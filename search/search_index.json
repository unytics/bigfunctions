{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BigFunctions Supercharge BigQuery","text":"BigQuery can now perform any task with SQL <ul> <li> <p>BigQuery runs SQL</p> <p></p> </li> <li> <p>BigFunctions supercharges SQL</p> <p></p> </li> <li> <p>dataform orchestrates SQL</p> <p></p> </li> </ul> <p>*dataform can be replaced by any sql orchestrator (dbt, sqlmesh, scheduled queries, etc)</p> <p>Taking the most of</p> <p> </p>"},{"location":"#powerful-functions-to-supercharge-bigquery","title":"Powerful Functions to Supercharge BigQuery","text":"<p>150+ Ready-to-Go Functions from the community (no install needed)</p> <p>Discover the Functions </p>"},{"location":"#a-framework-for-bigquery-functions","title":"A Framework for BigQuery functions","text":"<p>Build your own catalog of advanced functions.</p> <p>Discover the Framework </p> <p></p>"},{"location":"#keep-it-simplewith-sql-data-stack","title":"Keep it Simplewith SQL-Data-Stack","text":"<p>BigQuery, BigFunctions and dataform is all you need</p> <p>Discover the SQL Data Stack </p>"},{"location":"#want-bigquery-to-send-you-an-email-with-your-kpis-of-the-day","title":"Want BigQuery to send you an email with your KPIs of the day?","text":"<p>It's as easy as a copy &amp; paste!</p> <p>To send you an email with your KPIs of the day, simply copy the following code and run it in BigQuery.  One Click &amp; you got your email. No install needed!</p> <pre><code>with \n\n--- Compute the KPIs of the day ---\nkpis_of_the_day as (\n  select \n    1584  as total_users,\n    74863.35 as total_revenue\n),\n\n--- Set email recipients (you in this case) ---\nrecipients as (\n  select \n    session_user() as email,\n    initcap(replace(split(session_user(), '@')[offset(0)], '.', ' ')) as username,\n)\n\n\n--- Send an Email to recipients (you) with the KPIs of the day ---\nselect bigfunctions.eu.send_mail(\n\n  email,                    --- Recipient\n\n  \"Daily Metrics Summary\",  --- Email Subject\n\n  format(                   --- Email Body in markdown format\n    \"\"\"\n    ## Hi %s\n\n    *Here is your Daily Metrics Summary*\n\n    - **Total users**: %d\n    - **Total revenue**: %.2f $\n\n    Enjoy your day!    \n    \"\"\",\n    username,\n    total_users,\n    total_revenue\n  ),\n  null,                     --- Optional Attached file name\n  null                      --- Optional Attached file content\n)\n\nfrom kpis_of_the_day, recipients\n</code></pre>"},{"location":"bigfunctions/_export_table_to_unytics/","title":"_export_table_to_unytics","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>unytics</li> </ul>"},{"location":"bigfunctions/_export_table_to_unytics/#_export_table_to_unytics","title":"_export_table_to_unytics","text":"<pre><code>_export_table_to_unytics(source_table, destination_unytics_table)\n</code></pre>"},{"location":"bigfunctions/_export_table_to_unytics/#description","title":"Description","text":"<p>Creates a temp dataset in <code>bigfunctions</code> project and gives you ownership permission on it.</p>"},{"location":"bigfunctions/_export_table_to_unytics/#usage","title":"Usage","text":"Call or Deploy <code>_export_table_to_unytics</code> ? Call <code>_export_table_to_unytics</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>_export_table_to_unytics</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>_export_table_to_unytics</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>_export_table_to_unytics</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>_export_table_to_unytics</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get _export_table_to_unytics\nbigfun deploy _export_table_to_unytics\n</code></pre>"},{"location":"bigfunctions/_export_table_to_unytics/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu._export_table_to_unytics()\n</code></pre> <pre><code>select bigfunctions.us._export_table_to_unytics()\n</code></pre> <pre><code>select bigfunctions.europe_west1._export_table_to_unytics()\n</code></pre> <pre>\n<code>+--------------------------------------------------------+\n| status                                                 |\n+--------------------------------------------------------+\n| bigfunctions.temp_6bdb75ca_7f72_4f1f_b46a_6ca59f7f66ac |\n+--------------------------------------------------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>_export_table_to_unytics</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>_export_table_to_unytics</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/are_arrays_equal/","title":"are_arrays_equal","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/are_arrays_equal/#are_arrays_equal","title":"are_arrays_equal","text":"<pre><code>are_arrays_equal(array1, array2)\n</code></pre>"},{"location":"bigfunctions/are_arrays_equal/#description","title":"Description","text":"<p>Return true if <code>array1</code> = <code>array2</code> and false otherwise</p>"},{"location":"bigfunctions/are_arrays_equal/#usage","title":"Usage","text":"Call or Deploy <code>are_arrays_equal</code> ? Call <code>are_arrays_equal</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>are_arrays_equal</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>are_arrays_equal</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>are_arrays_equal</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>are_arrays_equal</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get are_arrays_equal\nbigfun deploy are_arrays_equal\n</code></pre>"},{"location":"bigfunctions/are_arrays_equal/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.are_arrays_equal([1, 4, 3], [1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.are_arrays_equal([1, 4, 3], [1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.are_arrays_equal([1, 4, 3], [1, 4, 3])\n</code></pre> <pre>\n<code>+------------------+\n| are_arrays_equal |\n+------------------+\n| true             |\n+------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.are_arrays_equal([1, 4, 3], [1, 4])\n</code></pre> <pre><code>select bigfunctions.us.are_arrays_equal([1, 4, 3], [1, 4])\n</code></pre> <pre><code>select bigfunctions.europe_west1.are_arrays_equal([1, 4, 3], [1, 4])\n</code></pre> <pre>\n<code>+------------------+\n| are_arrays_equal |\n+------------------+\n| false            |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/are_arrays_equal/#use-cases","title":"Use cases","text":"<p>Use Case: Data Validation</p> <p>Imagine you have a table containing product information, including a list of associated tags.  You want to validate that the tags associated with a product in one system match the tags in another system.</p> <pre><code>SELECT\n    product_id,\n    bigfunctions.YOUR_REGION.are_arrays_equal(system1_tags, system2_tags) AS tags_match\nFROM\n    product_data;\n</code></pre> <p>This query would return a table showing the <code>product_id</code> and a boolean value (<code>tags_match</code>) indicating whether the tag arrays are identical. You could then filter this table to identify products with mismatched tags.</p> Need help or Found a bug? Get help using <code>are_arrays_equal</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>are_arrays_equal</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/array_contains/","title":"array_contains","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/array_contains/#array_contains","title":"array_contains","text":"<pre><code>array_contains(arr, value)\n</code></pre>"},{"location":"bigfunctions/array_contains/#description","title":"Description","text":"<p>Returns <code>true</code> if <code>value</code> is in array <code>arr</code> else returns <code>false</code></p>"},{"location":"bigfunctions/array_contains/#usage","title":"Usage","text":"Call or Deploy <code>array_contains</code> ? Call <code>array_contains</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>array_contains</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>array_contains</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>array_contains</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>array_contains</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get array_contains\nbigfun deploy array_contains\n</code></pre>"},{"location":"bigfunctions/array_contains/#examples","title":"Examples","text":"<p>1. When <code>value</code> is in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.array_contains([3, 4], 4)\n</code></pre> <pre><code>select bigfunctions.us.array_contains([3, 4], 4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.array_contains([3, 4], 4)\n</code></pre> <pre>\n<code>+-------------+\n| is_in_array |\n+-------------+\n| true        |\n+-------------+\n</code>\n</pre> <p>2. When <code>value</code> is not in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.array_contains([3, 4], 7)\n</code></pre> <pre><code>select bigfunctions.us.array_contains([3, 4], 7)\n</code></pre> <pre><code>select bigfunctions.europe_west1.array_contains([3, 4], 7)\n</code></pre> <pre>\n<code>+-------------+\n| is_in_array |\n+-------------+\n| false       |\n+-------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>array_contains</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>array_contains</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/array_intersect/","title":"array_intersect","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/array_intersect/#array_intersect","title":"array_intersect","text":"<pre><code>array_intersect(array1, array2)\n</code></pre>"},{"location":"bigfunctions/array_intersect/#description","title":"Description","text":"<p>Returns the intersection of two arrays.</p>"},{"location":"bigfunctions/array_intersect/#usage","title":"Usage","text":"Call or Deploy <code>array_intersect</code> ? Call <code>array_intersect</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>array_intersect</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>array_intersect</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>array_intersect</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>array_intersect</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get array_intersect\nbigfun deploy array_intersect\n</code></pre>"},{"location":"bigfunctions/array_intersect/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.array_intersect([1, 2, 3], [2, 6, 7])\n</code></pre> <pre><code>select bigfunctions.us.array_intersect([1, 2, 3], [2, 6, 7])\n</code></pre> <pre><code>select bigfunctions.europe_west1.array_intersect([1, 2, 3], [2, 6, 7])\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| [2]    |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/array_intersect/#use-cases","title":"Use cases","text":"<p>Use Case: Finding Common Interests</p> <p>Imagine you have a dataset of users and their interests, stored as arrays. You want to find users who share at least one common interest with a specific user.</p> <pre><code>WITH UserInterests AS (\n    SELECT 'user1' AS user_id, ['reading', 'hiking', 'coding'] AS interests UNION ALL\n    SELECT 'user2' AS user_id, ['coding', 'gaming', 'music'] AS interests UNION ALL\n    SELECT 'user3' AS user_id, ['cooking', 'hiking', 'photography'] AS interests UNION ALL\n    SELECT 'user4' AS user_id, ['gaming', 'sports', 'travel'] AS interests\n),\nTargetUserInterests AS (\n    SELECT interests FROM UserInterests WHERE user_id = 'user1'  -- Let's say user1 is our target user\n)\nSELECT ui.user_id\nFROM UserInterests AS ui, TargetUserInterests AS tui\nWHERE bigfunctions.YOUR_REGION.array_intersect(ui.interests, tui.interests) IS NOT NULL  -- Replace YOUR_REGION with your BigQuery region\n  AND ui.user_id != 'user1'; -- Exclude the target user himself\n</code></pre> <p>This query uses <code>array_intersect</code> to find the intersection of interests between each user and the target user ('user1').  If the intersection is not null (meaning they have at least one common interest), the user_id is returned.  The final <code>AND</code> clause ensures the target user isn't included in the results.</p> <p>Other Use Cases:</p> <ul> <li>Product Recommendations:  Find products with features in common with a user's previously purchased items.</li> <li>Skill Matching: Identify candidates who possess a required set of skills for a job opening.</li> <li>Event Filtering:  Show events that match a user's selected categories.</li> <li>Data Deduplication: Detect records with overlapping data points, like lists of keywords or tags.</li> <li>Inventory Management:  Find items common to multiple warehouses.</li> </ul> <p>The key is that whenever you need to determine shared elements between two arrays, <code>array_intersect</code> becomes a valuable tool. Remember to replace <code>YOUR_REGION</code> with the appropriate BigQuery region for your project (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>).</p> Need help or Found a bug? Get help using <code>array_intersect</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>array_intersect</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/array_union/","title":"array_union","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/array_union/#array_union","title":"array_union","text":"<pre><code>array_union(array11, array2)\n</code></pre>"},{"location":"bigfunctions/array_union/#description","title":"Description","text":"<p>Returns the union of two arrays.</p>"},{"location":"bigfunctions/array_union/#usage","title":"Usage","text":"Call or Deploy <code>array_union</code> ? Call <code>array_union</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>array_union</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>array_union</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>array_union</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>array_union</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get array_union\nbigfun deploy array_union\n</code></pre>"},{"location":"bigfunctions/array_union/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.array_union([1, 2, 3], [2, 6, 7])\n</code></pre> <pre><code>select bigfunctions.us.array_union([1, 2, 3], [2, 6, 7])\n</code></pre> <pre><code>select bigfunctions.europe_west1.array_union([1, 2, 3], [2, 6, 7])\n</code></pre> <pre>\n<code>+-----------------+\n| result          |\n+-----------------+\n| [1, 2, 3, 6, 7] |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/array_union/#use-cases","title":"Use cases","text":"<p>Use Case: Combining Product Categories</p> <p>Imagine you have an e-commerce platform, and you store product categories as arrays in a BigQuery table. You want to display all unique categories associated with a product, even if they come from different sources.</p> <p>Table Schema:</p> <pre><code>CREATE OR REPLACE TABLE `your_project.your_dataset.products` (\n  product_id STRING,\n  categories_source1 ARRAY&lt;STRING&gt;,\n  categories_source2 ARRAY&lt;STRING&gt;\n);\n\nINSERT INTO `your_project.your_dataset.products` (product_id, categories_source1, categories_source2) VALUES\n('product1', ['Electronics', 'Smartphones'], ['Mobile Phones', 'Gadgets']),\n('product2', ['Clothing', 'Shoes'], ['Footwear', 'Accessories']);\n</code></pre> <p>Query with <code>array_union</code>:</p> <pre><code>SELECT\n    product_id,\n    bigfunctions.your_region.array_union(categories_source1, categories_source2) AS all_categories\n  FROM\n    `your_project.your_dataset.products`;\n</code></pre> <p>Result:</p> <pre><code>+-----------+-------------------------------------+\n| product_id | all_categories                     |\n+-----------+-------------------------------------+\n| product1   | ['Electronics', 'Smartphones', 'Mobile Phones', 'Gadgets'] |\n| product2   | ['Clothing', 'Shoes', 'Footwear', 'Accessories']        |\n+-----------+-------------------------------------+\n</code></pre> <p>Explanation:</p> <p>The <code>array_union</code> function effectively combines the arrays from <code>categories_source1</code> and <code>categories_source2</code>, eliminating duplicate category names. This gives you a single array (<code>all_categories</code>) containing all unique categories associated with each product.  This can be beneficial for filtering, faceting, or displaying comprehensive product information on your website.</p> <p>Other Use Cases:</p> <ul> <li>Merging User Interests: Combining user interests from different sources (e.g., browsing history, explicit preferences) into a single unified list.</li> <li>Consolidating Tags:  Merging tags or keywords assigned to articles or other content from multiple sources.</li> <li>Combining Lists of Features: Merging lists of product features from different databases or APIs.  Basically anytime you need to create a distinct list from multiple lists, <code>array_union</code> is a good choice.</li> </ul> Need help or Found a bug? Get help using <code>array_union</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>array_union</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ask_ai/","title":"ask_ai","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ai</li> </ul>"},{"location":"bigfunctions/ask_ai/#ask_ai","title":"ask_ai","text":"<pre><code>ask_ai(prompt, model)\n</code></pre>"},{"location":"bigfunctions/ask_ai/#description","title":"Description","text":"<p>Ask Anything!</p> <p>Google Generative AI <code>model</code> will get you an answer.</p> <p><code>model</code> must be one of:</p> <ul> <li><code>gemini-2.0-flash-001</code></li> <li><code>gemini-2.0-flash-lite-001</code></li> <li>... any future model</li> <li><code>null</code>, then <code>gemini-2.0-flash-001</code> will be used</li> </ul> <p>Default parameters are used for each model.</p>"},{"location":"bigfunctions/ask_ai/#usage","title":"Usage","text":"Call or Deploy <code>ask_ai</code> ? Call <code>ask_ai</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ask_ai</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ask_ai</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ask_ai</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ask_ai</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ask_ai\nbigfun deploy ask_ai\n</code></pre>"},{"location":"bigfunctions/ask_ai/#examples","title":"Examples","text":"<p>1. Clean data</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ask_ai(\n      '''\n      Question: what is the country from the following user input: 'I live in frace' ?\n      Answer: formatted as alpha three code\n      '''\n      , \"gemini-2.0-flash-001\")\n</code></pre> <pre><code>select bigfunctions.us.ask_ai(\n      '''\n      Question: what is the country from the following user input: 'I live in frace' ?\n      Answer: formatted as alpha three code\n      '''\n      , \"gemini-2.0-flash-001\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ask_ai(\n      '''\n      Question: what is the country from the following user input: 'I live in frace' ?\n      Answer: formatted as alpha three code\n      '''\n      , \"gemini-2.0-flash-001\")\n</code></pre> <pre>\n<code>+--------+\n| answer |\n+--------+\n| FRA    |\n+--------+\n</code>\n</pre> <p>2. Generate SQL</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ask_ai(\n      '''\n      Question: get the 10 products which generated the most revenue in 2023\n      Table: sales\n      Columns: product_id, price, quantity, timestamp\n      Answer: bigquery sql query\n      '''\n      , \"gemini-2.0-flash-001\")\n</code></pre> <pre><code>select bigfunctions.us.ask_ai(\n      '''\n      Question: get the 10 products which generated the most revenue in 2023\n      Table: sales\n      Columns: product_id, price, quantity, timestamp\n      Answer: bigquery sql query\n      '''\n      , \"gemini-2.0-flash-001\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ask_ai(\n      '''\n      Question: get the 10 products which generated the most revenue in 2023\n      Table: sales\n      Columns: product_id, price, quantity, timestamp\n      Answer: bigquery sql query\n      '''\n      , \"gemini-2.0-flash-001\")\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| answer                                                                                                                                                                   |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| SELECT product_id, SUM(price * quantity) AS revenue\nFROM sales\nWHERE timestamp BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY product_id\nORDER BY revenue DESC\nLIMIT 10\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/ask_ai/#use-cases","title":"Use cases","text":"<p>The provided documentation describes a BigQuery function <code>ask_ai</code> that leverages Google's Generative AI models to answer questions. Here are a few use cases, expanding on the examples provided:</p> <p>1. Data Cleaning and Transformation:</p> <ul> <li>Standardizing Country Codes:  As shown in the example, you can use <code>ask_ai</code> to clean up inconsistent country names entered by users.  Imagine a database with a \"country\" field containing free-text entries like \"USA,\" \"United States,\" \"US,\" \"united states of america,\" etc.  <code>ask_ai</code> can be used to convert these variations into a standardized format, such as the three-letter ISO country code.</li> <li>Extracting Information from Unstructured Text: Suppose you have a column with customer feedback. You could use <code>ask_ai</code> to identify and extract key sentiments (positive, negative, neutral), topics discussed, or specific product mentions.</li> <li>Data Validation:  You could use <code>ask_ai</code> to check the validity of data. For example, given a date of birth, you could ask if the person is over 18.</li> </ul> <p>2. Code Generation (SQL and potentially others):</p> <ul> <li>Generating SQL Queries: This is a powerful use case demonstrated in the documentation.  Instead of writing complex SQL queries manually, you can describe what you want to achieve in natural language, and <code>ask_ai</code> can generate the corresponding SQL.  This is particularly helpful for less experienced SQL users or for quickly prototyping queries.</li> <li>Generating Other Code:  While not explicitly mentioned, the ability to specify different models like <code>code-bison</code> suggests the possibility of generating code in other languages.  This could be explored for tasks like creating Python scripts for data processing or JavaScript code for web applications, directly within BigQuery.</li> </ul> <p>3. Data Analysis and Insights:</p> <ul> <li>Summarizing Text: Given a large volume of text data (e.g., customer reviews, news articles), <code>ask_ai</code> can provide concise summaries, highlighting key themes and trends.</li> <li>Answering Business Questions: You could pose questions like \"What are the top 3 reasons for customer churn?\" or \"Which product category has seen the highest growth in the last quarter?\" and <code>ask_ai</code> could analyze the data and provide answers in natural language.</li> <li>Generating Reports: By combining the SQL generation capabilities with summarization, you could automate the creation of simple reports based on data in BigQuery.</li> </ul> <p>4. Content Creation and Enhancement:</p> <ul> <li>Generating Product Descriptions:  If you have a database of product features, you could use <code>ask_ai</code> to generate compelling product descriptions for marketing materials.</li> <li>Creating Personalized Content:  Based on user data, you could generate personalized recommendations, email messages, or other content.</li> </ul> <p>Limitations:</p> <p>It's important to be aware that large language models like those used by <code>ask_ai</code> can sometimes generate incorrect or nonsensical output.  It's crucial to validate the results and use the function judiciously, especially in critical applications.  Furthermore, cost considerations might be relevant depending on usage volume.</p> Need help or Found a bug? Get help using <code>ask_ai</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ask_ai</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ask_appstore_reviews/","title":"ask_appstore_reviews","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ai</li> </ul>"},{"location":"bigfunctions/ask_appstore_reviews/#ask_appstore_reviews","title":"ask_appstore_reviews","text":"<pre><code>ask_appstore_reviews(prompt, app_url_in_appstore)\n</code></pre>"},{"location":"bigfunctions/ask_appstore_reviews/#description","title":"Description","text":"<p>Ask AI what your app users think.</p> <p>This function:</p> <ol> <li>Calls <code>get_appstore_reviews</code> function to retrieve the 500 latest user reviews of the mobile app.</li> <li>Builds a prompt using your question and including the retrieved user reviews.</li> <li>Calls <code>ask_ai</code> function to get the prompt answer using <code>gemini</code>.</li> </ol> <p>Click the GitHub icon to see the code.</p>"},{"location":"bigfunctions/ask_appstore_reviews/#usage","title":"Usage","text":"Call or Deploy <code>ask_appstore_reviews</code> ? Call <code>ask_appstore_reviews</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ask_appstore_reviews</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ask_appstore_reviews</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ask_appstore_reviews</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ask_appstore_reviews</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ask_appstore_reviews\nbigfun deploy ask_appstore_reviews\n</code></pre>"},{"location":"bigfunctions/ask_appstore_reviews/#examples","title":"Examples","text":"<p>Coolest Feature of Blablacar app</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ask_appstore_reviews(\"What is the coolest feature regarding customers?\", \"https://apps.apple.com/fr/app/blablacar-covoiturage-et-bus/id341329033\")\n</code></pre> <pre><code>select bigfunctions.us.ask_appstore_reviews(\"What is the coolest feature regarding customers?\", \"https://apps.apple.com/fr/app/blablacar-covoiturage-et-bus/id341329033\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ask_appstore_reviews(\"What is the coolest feature regarding customers?\", \"https://apps.apple.com/fr/app/blablacar-covoiturage-et-bus/id341329033\")\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| answer                                                                                                                                                                                                                                                                   |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ## Blablacar App Review Analysis: Coolest Feature?\n\nA recurring positive theme emerges: **the concept of community and shared journeys.**\nUsers appreciate the opportunity to connect with others, share costs, and contribute to a more sustainable way of travel\n\n...\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/ask_appstore_reviews/#use-cases","title":"Use cases","text":"<p>A marketing analyst for a mobile app company wants to understand user sentiment and identify the features users find most valuable.  They could use the <code>ask_appstore_reviews</code> function to:</p> <ol> <li> <p>Analyze user reviews for specific features: By providing a prompt like \"What do users say about the new in-app messaging feature?\", the analyst can quickly gauge user feedback on a specific update or functionality. The function would analyze the app store reviews and summarize user sentiment, highlighting both positive and negative comments.</p> </li> <li> <p>Identify the most popular features: Using a prompt like \"What is the coolest feature of our app according to users?\", the analyst can uncover the features that resonate most with their audience. This information can inform future development priorities and marketing campaigns.</p> </li> <li> <p>Track changes in user sentiment over time:  By running the function regularly (e.g., weekly or monthly), the analyst can track how user sentiment towards different features evolves over time. This can help identify emerging issues or trends and allow the company to react proactively.</p> </li> <li> <p>Compare user sentiment to competitors: By using the <code>get_appstore_reviews</code> function on competitors' apps (and then feeding those results into <code>ask_appstore_reviews</code>), the analyst could gain insights into what users value in competitor apps and identify areas where their own app could improve. For example, the prompt could be: \"Comparing our app to [Competitor App Name], what are the key features users prefer in their app?\"</p> </li> <li> <p>Generate marketing copy:  The summarized feedback from <code>ask_appstore_reviews</code> could be used to create compelling marketing materials that highlight the app's most popular features, using the actual language and sentiment expressed by users.  For example, snippets of positive reviews could be used in ad copy or on the app store listing.</p> </li> </ol> <p>In essence, the <code>ask_appstore_reviews</code> function provides a convenient way to analyze user feedback and gain actionable insights for app improvement, marketing, and product development.</p> Need help or Found a bug? Get help using <code>ask_appstore_reviews</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ask_appstore_reviews</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ask_my_data/","title":"ask_my_data","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ai</li> </ul>"},{"location":"bigfunctions/ask_my_data/#ask_my_data","title":"ask_my_data","text":"<pre><code>ask_my_data(question, fully_qualified_table)\n</code></pre>"},{"location":"bigfunctions/ask_my_data/#description","title":"Description","text":"<p>Ask your data any <code>question</code> in natural language.</p> <p>This function calls  <code>generate_sql</code> to convert the <code>question</code> into a SQL query adapted to your data and execute it. (If the execution fails, the temporary table <code>bigfunction_result</code> gives details).</p> Param Description <code>question</code> A question to ask over your data. It may start with a verb <code>fully_qualified_table</code> A table whose schema will be given to the generative AI model for context. - <code>fully_qualified_table</code> format must be like <code>PROJECT.DATASET.TABLE</code>.  - <code>fully_qualified_table</code> must exist.  - You must have read permission on the table schema"},{"location":"bigfunctions/ask_my_data/#usage","title":"Usage","text":"Call or Deploy <code>ask_my_data</code> ? Call <code>ask_my_data</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ask_my_data</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ask_my_data</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ask_my_data</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ask_my_data</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ask_my_data\nbigfun deploy ask_my_data\n</code></pre>"},{"location":"bigfunctions/ask_my_data/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.ask_my_data(\"get the 3 products which generated the most revenue in 2023\", \"bigfunctions.eu.sales\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.ask_my_data(\"get the 3 products which generated the most revenue in 2023\", \"bigfunctions.us.sales\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.ask_my_data(\"get the 3 products which generated the most revenue in 2023\", \"bigfunctions.europe_west1.sales\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+------------+---------+\n| product_id | revenue |\n+------------+---------+\n+ 8          + 50286   |\n+ 6          + 46172   |\n+ 10         + 27972   |\n+------------+---------+\n\n</code>\n</pre>"},{"location":"bigfunctions/ask_my_data/#use-cases","title":"Use cases","text":"<p>A business analyst wants to understand sales data for 2023, specifically which products generated the most revenue. They have a BigQuery table named <code>sales</code> in their project (e.g., <code>my-project.sales_data.sales</code>) containing product IDs, revenue figures, and other sales-related information.</p> <p>Instead of writing a complex SQL query, the analyst uses the <code>ask_my_data</code> function like so:</p> <pre><code>CALL bigfunctions.us.ask_my_data(\n    'Get the 3 products which generated the most revenue in 2023',\n    'my-project.sales_data.sales'\n);\nSELECT * FROM bigfunction_result;\n</code></pre> <p>This function call takes two arguments:</p> <ol> <li><code>'Get the 3 products which generated the most revenue in 2023'</code>: The natural language question the analyst wants to ask the data.</li> <li><code>'my-project.sales_data.sales'</code>: The fully qualified name of the table the question pertains to. This allows the function to understand the structure of the data and generate the appropriate SQL query.</li> </ol> <p>The <code>ask_my_data</code> function then internally translates the natural language question into a SQL query (likely involving aggregation, filtering, and ordering), executes it against the specified table, and stores the results in a temporary table named <code>bigfunction_result</code>. The analyst can then retrieve the results by querying <code>bigfunction_result</code>.</p> <p>This simplified approach allows users without extensive SQL knowledge to extract insights from their data using natural language, making data analysis more accessible and efficient.</p> Need help or Found a bug? Get help using <code>ask_my_data</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ask_my_data</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/benford_distance/","title":"benford_distance","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/benford_distance/#benford_distance","title":"benford_distance","text":"<pre><code>benford_distance(values)\n</code></pre>"},{"location":"bigfunctions/benford_distance/#description","title":"Description","text":"<p>Calculate the distance from Benford's Law for given <code>values</code>.</p> <p>As mentioned in wikipedia, Benford's law, is an observation that in many real-life sets of numerical data, the leading digit is likely to be small. In sets that obey the law, the number 1 appears as the leading significant digit about 30% of the time, while 9 appears as the leading significant digit less than 5% of the time.</p> <p>This function computes the Chi-square distance between the observed distribution of leading digits of <code>values</code> and the expected distribution according to Benford's Law.</p> <p>The smaller the <code>benford_distance</code>, the more the <code>values</code> follow Benford's Law.</p> <p>Read \"The Mysterious Benford\u2019s Law and it\u2019s Connection with Fraud Detection\" by Vihasharma to see some applications of this function.</p>"},{"location":"bigfunctions/benford_distance/#usage","title":"Usage","text":"Call or Deploy <code>benford_distance</code> ? Call <code>benford_distance</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>benford_distance</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>benford_distance</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>benford_distance</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>benford_distance</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get benford_distance\nbigfun deploy benford_distance\n</code></pre>"},{"location":"bigfunctions/benford_distance/#examples","title":"Examples","text":"<p>1. Uniformly distributed values do not follow Benford's Law</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.benford_distance([1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code></pre> <pre><code>select bigfunctions.us.benford_distance([1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code></pre> <pre><code>select bigfunctions.europe_west1.benford_distance([1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code></pre> <pre>\n<code>+------------------+\n| benford_distance |\n+------------------+\n| 0.4              |\n+------------------+\n</code>\n</pre> <p>2. Having more small values follow more Benford's Law. Distance is lower</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.benford_distance([1, 1, 1, 2, 2, 3, 4, 5, 6])\n</code></pre> <pre><code>select bigfunctions.us.benford_distance([1, 1, 1, 2, 2, 3, 4, 5, 6])\n</code></pre> <pre><code>select bigfunctions.europe_west1.benford_distance([1, 1, 1, 2, 2, 3, 4, 5, 6])\n</code></pre> <pre>\n<code>+------------------+\n| benford_distance |\n+------------------+\n| 0.2              |\n+------------------+\n</code>\n</pre> <p>3. Having constant values follow less Benford's Law than uniform. Distance is higher</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.benford_distance([1, 1, 1, 1, 1, 1, 1, 1, 1])\n</code></pre> <pre><code>select bigfunctions.us.benford_distance([1, 1, 1, 1, 1, 1, 1, 1, 1])\n</code></pre> <pre><code>select bigfunctions.europe_west1.benford_distance([1, 1, 1, 1, 1, 1, 1, 1, 1])\n</code></pre> <pre>\n<code>+------------------+\n| benford_distance |\n+------------------+\n| 2.3              |\n+------------------+\n</code>\n</pre> <p>4. Higher leading digits is worse. Distance is much higher</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.benford_distance([9, 9, 9, 9, 9, 9, 9, 9, 9])\n</code></pre> <pre><code>select bigfunctions.us.benford_distance([9, 9, 9, 9, 9, 9, 9, 9, 9])\n</code></pre> <pre><code>select bigfunctions.europe_west1.benford_distance([9, 9, 9, 9, 9, 9, 9, 9, 9])\n</code></pre> <pre>\n<code>+------------------+\n| benford_distance |\n+------------------+\n| 20.7             |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/benford_distance/#use-cases","title":"Use cases","text":"<p>A common use case for the <code>benford_distance</code> function is fraud detection.  Benford's Law states that in many naturally occurring datasets, the leading digit 1 appears with a probability of about 30%, followed by 2 at about 18%, and so on, with 9 being the least frequent leading digit. Datasets that deviate significantly from this distribution can be a red flag for manipulation or fabrication.</p> <p>Here's a practical example in the context of financial transactions:</p> <p>Scenario: You're an auditor examining a company's expense reports.  You suspect some employees might be submitting fraudulent claims.</p> <p>How to use <code>benford_distance</code>:</p> <ol> <li> <p>Apply the function: Use the <code>benford_distance</code> function on the array of leading digits. A higher distance suggests a greater deviation from Benford's Law.</p> </li> <li> <p>Investigate outliers:  Focus your investigation on expense reports with the highest <code>benford_distance</code> scores. These are the reports most likely to contain fabricated numbers.</p> </li> </ol> <p>Example BigQuery SQL:</p> <pre><code>SELECT\n    employee_id,\n    bigfunctions.us.benford_distance(array_agg(expense_amount)) AS benford_distance\nFROM `your_project.your_dataset.expense_reports`\nGROUP BY employee_id\nORDER BY benford_distance DESC;\n</code></pre> <p>This query groups expenses by employee and calculates the <code>benford_distance</code> for each employee's expense amounts. Ordering by <code>benford_distance</code> descending allows you to quickly identify employees with suspicious expense patterns.</p> <p>Other use cases:</p> <ul> <li>Election fraud detection: Analyzing vote counts for adherence to Benford's Law.</li> <li>Scientific data validation: Checking the integrity of experimental measurements.</li> <li>Financial market analysis: Identifying potential market manipulation or anomalies in stock prices.</li> <li>Accounting and auditing: Detecting inconsistencies or fabricated data in financial statements.</li> </ul> <p>By measuring the deviation from Benford's Law, the <code>benford_distance</code> function provides a valuable tool for identifying potentially fraudulent or manipulated data in a variety of applications.</p> Need help or Found a bug? Get help using <code>benford_distance</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>benford_distance</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/camel2snake/","title":"camel2snake","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/camel2snake/#camel2snake","title":"camel2snake","text":"<pre><code>camel2snake(camelCaseString)\n</code></pre>"},{"location":"bigfunctions/camel2snake/#description","title":"Description","text":"<p>Convert <code>string</code> from camelCase to snake_case</p>"},{"location":"bigfunctions/camel2snake/#usage","title":"Usage","text":"Call or Deploy <code>camel2snake</code> ? Call <code>camel2snake</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>camel2snake</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>camel2snake</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>camel2snake</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>camel2snake</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get camel2snake\nbigfun deploy camel2snake\n</code></pre>"},{"location":"bigfunctions/camel2snake/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.camel2snake(\"FooBar !\")\n</code></pre> <pre><code>select bigfunctions.us.camel2snake(\"FooBar !\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.camel2snake(\"FooBar !\")\n</code></pre> <pre>\n<code>+-------------------+\n| snake_case_string |\n+-------------------+\n| foo_bar           |\n+-------------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>camel2snake</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>camel2snake</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/categorize/","title":"categorize","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ai</li> </ul>"},{"location":"bigfunctions/categorize/#categorize","title":"categorize","text":"<pre><code>categorize(items)\n</code></pre>"},{"location":"bigfunctions/categorize/#description","title":"Description","text":"<p>Categorize <code>items</code> in categories and subcategories.</p> <p>Using GenAi, this function generates a hierarchy of categories and subcategories that best represents the given <code>items</code>. (<code>items</code>: must be a json array of strings or or objects).</p> <p>It returns a json array of objects as:</p> <pre><code>[\n  {item: first_item,     ...\n]\n</code></pre>"},{"location":"bigfunctions/categorize/#usage","title":"Usage","text":"Call or Deploy <code>categorize</code> ? Call <code>categorize</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>categorize</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>categorize</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>categorize</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>categorize</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get categorize\nbigfun deploy categorize\n</code></pre>"},{"location":"bigfunctions/categorize/#examples","title":"Examples","text":"<p>1. Categorize texts</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.categorize(json '''[\n        \"this is a great application\"\n        \"i cannot connect\"\n      ]'''\n      )\n</code></pre> <pre><code>select bigfunctions.us.categorize(json '''[\n        \"this is a great application\"\n        \"i cannot connect\"\n      ]'''\n      )\n</code></pre> <pre><code>select bigfunctions.europe_west1.categorize(json '''[\n        \"this is a great application\"\n        \"i cannot connect\"\n      ]'''\n      )\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| categories                                                                                                                                                             |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n  {'item': 'this is a great application', 'category': 'General Feedback/Positive Review'},\n  {'item': 'i cannot connect', 'category': 'App Issues/Login Issues'},\n]\n |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>2. Categorize User Reviews of Nickel App in App Store</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.categorize(\n      (\n        select to_json(array_agg(content))\n        from bigfunctions.eu.get_appstore_reviews(\n          'https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763'\n        )\n      )\n      )\n</code></pre> <pre><code>select bigfunctions.us.categorize(\n      (\n        select to_json(array_agg(content))\n        from bigfunctions.us.get_appstore_reviews(\n          'https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763'\n        )\n      )\n      )\n</code></pre> <pre><code>select bigfunctions.europe_west1.categorize(\n      (\n        select to_json(array_agg(content))\n        from bigfunctions.europe_west1.get_appstore_reviews(\n          'https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763'\n        )\n      )\n      )\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| categories                                                                                                                                                             |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n  {'item': 'this is a great application', 'category': 'General Feedback/Positive Review'},\n  {'item': 'i cannot connect', 'category': 'App Issues/Login Issues'},\n]\n |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>categorize</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>categorize</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/compute_linear_regression_coefficients/","title":"compute_linear_regression_coefficients","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_numeric</li> </ul>"},{"location":"bigfunctions/compute_linear_regression_coefficients/#compute_linear_regression_coefficients","title":"compute_linear_regression_coefficients","text":"<pre><code>compute_linear_regression_coefficients(x, y)\n</code></pre>"},{"location":"bigfunctions/compute_linear_regression_coefficients/#description","title":"Description","text":"<p>Returns linear regression coefficients from <code>x</code>, <code>y</code> columns.</p> <p>Compute linear regression of <code>(x, y)</code> and return <code>slope</code> and <code>intercept</code> coefficients so that:</p> <pre><code>y ~= slope * x + intercept\n</code></pre>"},{"location":"bigfunctions/compute_linear_regression_coefficients/#usage","title":"Usage","text":"Call or Deploy <code>compute_linear_regression_coefficients</code> ? Call <code>compute_linear_regression_coefficients</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>compute_linear_regression_coefficients</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>compute_linear_regression_coefficients</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>compute_linear_regression_coefficients</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>compute_linear_regression_coefficients</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get compute_linear_regression_coefficients\nbigfun deploy compute_linear_regression_coefficients\n</code></pre>"},{"location":"bigfunctions/compute_linear_regression_coefficients/#examples","title":"Examples","text":"<p>Example with a generated time serie</p> EUUSeurope-west1 <pre><code>create temp table sample_data as (\n\n  select\n          x,\n          2 * x + 1 as y  -- example relationship: y = 2x + 1\n      from unnest([1.0, -1.0, 3.0, -3.0, 5.0, -5.0]) as x\n\n);\n\nselect bigfunctions.eu.compute_linear_regression_coefficients(x, y)\nfrom sample_data\n</code></pre> <pre><code>create temp table sample_data as (\n\n  select\n          x,\n          2 * x + 1 as y  -- example relationship: y = 2x + 1\n      from unnest([1.0, -1.0, 3.0, -3.0, 5.0, -5.0]) as x\n\n);\n\nselect bigfunctions.us.compute_linear_regression_coefficients(x, y)\nfrom sample_data\n</code></pre> <pre><code>create temp table sample_data as (\n\n  select\n          x,\n          2 * x + 1 as y  -- example relationship: y = 2x + 1\n      from unnest([1.0, -1.0, 3.0, -3.0, 5.0, -5.0]) as x\n\n);\n\nselect bigfunctions.europe_west1.compute_linear_regression_coefficients(x, y)\nfrom sample_data\n</code></pre> <pre>\n<code>+-----------------------------------------+\n| coefficients                            |\n+-----------------------------------------+\n| struct(2.0 as slope, 1.0 as intercept)\n |\n+-----------------------------------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>compute_linear_regression_coefficients</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>compute_linear_regression_coefficients</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/connected_components/","title":"connected_components","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>graph</li> </ul>"},{"location":"bigfunctions/connected_components/#connected_components","title":"connected_components","text":"<pre><code>connected_components(fully_qualified_table)\n</code></pre>"},{"location":"bigfunctions/connected_components/#description","title":"Description","text":"<p>Compute the connected components of a non-directed graph.</p> <p>Given a table with two columns of the same type STRING or INTEGER representing the edges of a graph, this computes a new temporary table called <code>bigfunction_result</code> containing two columns of the same type named <code>node_id</code> and <code>connected_component_id</code>.</p> <p>This is an implementation of the Alternating Algorithm (large-star, small-star) described in the 2014 paper \"Connected Components in MapReduce and Beyond\" written by {rkiveris, silviol, mirrokni, rvibhor, sergeiv} @google.com</p> <p>PERFORMANCE AND COST CONSIDERATIONS</p> <ul> <li>This algorithm has been proved to converge in O(log(n)\u00b2) and is conjectured to converge in O(log(n)), where n is the number of nodes in the graph. It was the most performant known distributed connected component algorithm last time I checked (in 2017).</li> <li>This implementation persists temporary results at each iteration loop: for the BigQuery pricing, you should be expecting it to cost the equivalent of 15 to 30 scans on your input table. Since the input table has only two columns, this should be reasonable, and we recommend using INTEGER columns rather than STRING when possible.</li> <li>If your graph contains nodes with a very high number of neighbors, the algorithm may crash. It is recommended to apply a pre-filtering on your nodes and remove nodes with a pathologically high cardinality. You should also monitor actively the number of nodes filtered this way and their cardinality, as this could help you detect a data quality deterioration in your input graph. If the input graph contains duplicate edges, they will be automatically removed by the algorithm.</li> </ul> <p>ISOLATED NODES: If you want to have isolated nodes (nodes that have no neighbors) in the resulting graph, there is two possible ways to achieve this:</p> <ul> <li>Add self-loops edges to all your nodes in your input graph (it also works if you add edges between all the graph    nodes and a fictitious node with id NULL)</li> <li>Only add edges between distinct nodes to your input, and perform a join between your input graph and the    algorithm's output to find all the nodes that have disappeared. These will be the isolated nodes.    This second method requires a little more work but it should also be cheaper.</li> </ul>"},{"location":"bigfunctions/connected_components/#usage","title":"Usage","text":"Call or Deploy <code>connected_components</code> ? Call <code>connected_components</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>connected_components</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>connected_components</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>connected_components</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>connected_components</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get connected_components\nbigfun deploy connected_components\n</code></pre>"},{"location":"bigfunctions/connected_components/#examples","title":"Examples","text":"<p>Identify the two connected components of a graph which has 6 nodes and is represented by the edges below: <pre><code>+---------+-----+\n| node1 | node2 |\n+-------+-------+\n|   1   |   2   |\n|   2   |   3   |\n|   3   |   4   |\n|   5   |   6   |\n+-------+-------+\n</code></pre></p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.connected_components(\"bigfunctions.eu.sample_graph\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.connected_components(\"bigfunctions.us.sample_graph\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.connected_components(\"bigfunctions.europe_west1.sample_graph\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+---------+------------------------+\n| node_id | connected_component_id |\n+---------+------------------------+\n|    1    |           1            |\n|    2    |           1            |\n|    3    |           1            |\n|    4    |           1            |\n|    5    |           5            |\n|    6    |           5            |\n+---------+------------------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/connected_components/#use-cases","title":"Use cases","text":"<p>Use Case: Social Network Analysis</p> <p>Imagine you have a social network platform, and you store user connections (friendships) in a BigQuery table.  Each row in the table represents a connection between two users.</p> <p>Table Schema:</p> <pre><code>Table: social_connections\nColumns:\n  user1: STRING\n  user2: STRING\n</code></pre> <p>Data Example:</p> <pre><code>user1 | user2\n-------+-------\nalice  | bob\nbob    | charlie\ndavid  | eve\neve    | frank\ngeorge |\n</code></pre> <p>Goal:  You want to identify distinct groups of connected users (i.e., friend circles or communities). Users within a group are directly or indirectly connected to each other, while users in different groups have no connection path between them. George is an isolated user with no connections.</p> <p>Solution using <code>connected_components</code>:</p> <pre><code>-- Call the connected_components function using your dataset's region (e.g., us)\nCALL bigfunctions.us.connected_components('your_project.your_dataset.social_connections');\n\n-- Query the resulting table to see the connected components\nSELECT * FROM bigfunction_result;\n</code></pre> <p>Expected Output:</p> <pre><code>node_id | connected_component_id\n---------+------------------------\nalice    | alice\nbob      | alice\ncharlie  | alice\ndavid    | david\neve      | david\nfrank    | david\ngeorge   | george\n</code></pre> <p>Interpretation:</p> <ul> <li>Users alice, bob, and charlie belong to the same connected component (friend circle).</li> <li>Users david, eve, and frank form another connected component.</li> <li>George is in his own isolated component because he has no connections in the original <code>social_connections</code> table.  Note how self-loops are created, which is necessary for the function to work correctly.  This can be changed to NULL after the call, if desired.</li> </ul> <p>Further Analysis:</p> <p>You can now use the <code>connected_component_id</code> to perform further analysis on these groups, such as:</p> <ul> <li>Calculate the size of each community.</li> <li>Analyze the characteristics of users within each community (e.g., demographics, interests).</li> <li>Identify influential users within each community.</li> <li>Target marketing campaigns to specific communities.</li> </ul> <p>Other Use Cases:</p> <ul> <li>Network Infrastructure Analysis: Identify connected devices in a network.</li> <li>Recommendation Systems: Recommend products or content based on connected users' preferences.</li> <li>Fraud Detection: Detect groups of users engaging in suspicious activities.</li> <li>Biological Networks: Analyze protein-protein interaction networks or gene regulatory networks.  This could reveal functional modules or pathways.</li> </ul> <p>This example clearly demonstrates how the <code>connected_components</code> BigQuery function can be applied to a real-world scenario to gain valuable insights from connected data.  Remember to adjust the dataset region in the function call according to where your data is stored.</p> Need help or Found a bug? Get help using <code>connected_components</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>connected_components</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/convert_non_ascii_characters_to_unicode_escape_sequences/","title":"convert_non_ascii_characters_to_unicode_escape_sequences","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/convert_non_ascii_characters_to_unicode_escape_sequences/#convert_non_ascii_characters_to_unicode_escape_sequences","title":"convert_non_ascii_characters_to_unicode_escape_sequences","text":"<pre><code>convert_non_ascii_characters_to_unicode_escape_sequences(text)\n</code></pre>"},{"location":"bigfunctions/convert_non_ascii_characters_to_unicode_escape_sequences/#description","title":"Description","text":"<p>Replace all non ASCII characters with escape unicode</p>"},{"location":"bigfunctions/convert_non_ascii_characters_to_unicode_escape_sequences/#usage","title":"Usage","text":"Call or Deploy <code>convert_non_ascii_characters_to_unicode_escape_sequences</code> ? Call <code>convert_non_ascii_characters_to_unicode_escape_sequences</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>convert_non_ascii_characters_to_unicode_escape_sequences</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>convert_non_ascii_characters_to_unicode_escape_sequences</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>convert_non_ascii_characters_to_unicode_escape_sequences</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>convert_non_ascii_characters_to_unicode_escape_sequences</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get convert_non_ascii_characters_to_unicode_escape_sequences\nbigfun deploy convert_non_ascii_characters_to_unicode_escape_sequences\n</code></pre>"},{"location":"bigfunctions/convert_non_ascii_characters_to_unicode_escape_sequences/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.convert_non_ascii_characters_to_unicode_escape_sequences(\"SCH\\u00dcMANN\")\n</code></pre> <pre><code>select bigfunctions.us.convert_non_ascii_characters_to_unicode_escape_sequences(\"SCH\\u00dcMANN\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.convert_non_ascii_characters_to_unicode_escape_sequences(\"SCH\\u00dcMANN\")\n</code></pre> <pre>\n<code>+----------------------+\n| text_unicode_escaped |\n+----------------------+\n| SCH\\u00dcMANN        |\n+----------------------+\n</code>\n</pre>"},{"location":"bigfunctions/convert_non_ascii_characters_to_unicode_escape_sequences/#use-cases","title":"Use cases","text":"<p>This function is useful for handling text data that needs to be compatible with systems or formats that don't fully support Unicode characters. Here are some use cases:</p> <ul> <li> <p>Data exchange: When exchanging data between different systems, especially older systems that might not support Unicode, converting non-ASCII characters to their escape sequences ensures that the text is correctly interpreted on the receiving end.  For example, exchanging data with a system that only supports ASCII or a specific character encoding.</p> </li> <li> <p>JSON serialization:  Some JSON parsers or systems have issues with non-ASCII characters. Converting them to Unicode escape sequences ensures proper serialization and deserialization of the data.</p> </li> <li> <p>CSV export: Similar to data exchange, when exporting data to CSV, especially if the encoding is not explicitly defined or if the receiving system has limited Unicode support, escaping the characters can prevent data corruption or misinterpretation.</p> </li> <li> <p>Legacy system integration:  When integrating with legacy systems that only support ASCII, this function allows you to store or process Unicode data while maintaining compatibility.</p> </li> <li> <p>Web applications: In certain web applications, especially those dealing with user-generated content, escaping non-ASCII characters can prevent issues related to character encoding and cross-site scripting (XSS) vulnerabilities.</p> </li> <li> <p>Regular expressions: Some regular expression engines might not correctly handle Unicode characters. Escaping them can simplify the regex patterns and avoid unexpected behavior.</p> </li> <li> <p>Debugging: When debugging text processing issues, converting non-ASCII characters to escape sequences can make it easier to identify and analyze the characters causing problems.</p> </li> </ul> <p>In essence, the function acts as a bridge between systems or formats with differing levels of Unicode support, ensuring data integrity and preventing potential errors.</p> Need help or Found a bug? Get help using <code>convert_non_ascii_characters_to_unicode_escape_sequences</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>convert_non_ascii_characters_to_unicode_escape_sequences</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/create_ga4_views/","title":"create_ga4_views","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ga4</li> </ul>"},{"location":"bigfunctions/create_ga4_views/#create_ga4_views","title":"create_ga4_views","text":"<pre><code>create_ga4_views(ga4_dataset, destination_dataset)\n</code></pre>"},{"location":"bigfunctions/create_ga4_views/#description","title":"Description","text":"<p>Create views to help querying GA4 Data .</p> <p>This function creates table functions in <code>destination_dataset</code> to help querying GA4 data contained in <code>ga4_dataset</code> (like <code>your-project.analytics_123456789</code>).</p> <p>Table functions are like views but take parameters as input. Here, they take <code>start_date</code> and <code>end_date</code> parameters to restrict the analysis period and be more efficient</p> <p>Each created table function is the copy of a query from Bigquery-GA4-Queries GitHub repo created by Ali Izadi.</p> <p>For example, <code>event_scope__flatten_events</code> table function will be created in <code>destination_dataset</code>. You can then get the flatten events between '2024-11-01' and '2024-12-01' with:</p> <pre><code>select *\nfrom `destination_dataset`.event_scope__flatten_events('2024-11-01', '2024-12-01')\n</code></pre> <p>You can get details on each created table function by reading the README of Bigquery-GA4-Queries repo. If you find these queries useful, please add a star to the repo to show your support.</p> <p>Queries from <code>BigQuery Administration</code>, <code>Extras</code> folders are ignored as they go beyond GA4</p>"},{"location":"bigfunctions/create_ga4_views/#usage","title":"Usage","text":"Call or Deploy <code>create_ga4_views</code> ? Call <code>create_ga4_views</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>create_ga4_views</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>create_ga4_views</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>create_ga4_views</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>create_ga4_views</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get create_ga4_views\nbigfun deploy create_ga4_views\n</code></pre>"},{"location":"bigfunctions/create_ga4_views/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.create_ga4_views(\"your-project.your_ga4_dataset\", \"your-project.your_destination_dataset\");\n</code></pre> <pre><code>call bigfunctions.us.create_ga4_views(\"your-project.your_ga4_dataset\", \"your-project.your_destination_dataset\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.create_ga4_views(\"your-project.your_ga4_dataset\", \"your-project.your_destination_dataset\");\n</code></pre>"},{"location":"bigfunctions/create_ga4_views/#use-cases","title":"Use cases","text":""},{"location":"bigfunctions/create_ga4_views/#steps-to-query-ga4-data-efficiently-using-bigfunctions","title":"Steps to Query GA4 Data Efficiently Using BigFunctions","text":"<p>1. Create a Destination Dataset</p> <p>Prepare a dataset in BigQuery where the GA4 table functions will be stored. For example:</p> <pre><code>create schema `Ga4-Project.ga4_bigquery_queries`;\n</code></pre> <p></p> <p>2. Call the GA4 View Creation Function</p> <p>Use the bigfunction to create table functions for querying GA4 data. For example:</p> <pre><code>call bigfunctions.us.create_ga4_views(\n\n  'Ga4-Project.analytics_310989290',\n\n  'Ga4-Project.ga4_bigquery_queries'\n\n);\n</code></pre> <p></p> <p></p> <p>3. Wait for the function to process and create all necessary table functions.</p> <p>Once completed, all table functions (queries) are available in your destination dataset.</p> <p></p> <p>4. Query GA4 Data Using Table Functions</p> <p>You can now query specific GA4 data efficiently with date ranges by calling the created table functions. For example:</p> <pre><code>select *\nfrom `Ga4-Project.ga4_bigquery_queries`.event_scope__flatten_events('2024-11-01', '2024-12-01');\n</code></pre> <p>Replace '2024-11-01' and '2024-12-01' with your desired date range.</p> Need help or Found a bug? Get help using <code>create_ga4_views</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>create_ga4_views</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/create_materialized_view_w_flattened_json_column/","title":"create_materialized_view_w_flattened_json_column","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/create_materialized_view_w_flattened_json_column/#create_materialized_view_w_flattened_json_column","title":"create_materialized_view_w_flattened_json_column","text":"<pre><code>create_materialized_view_w_flattened_json_column(fully_qualified_table, fully_qualified_materialized_view, json_column)\n</code></pre>"},{"location":"bigfunctions/create_materialized_view_w_flattened_json_column/#description","title":"Description","text":"<p>Create a Materialized view of a table with <code>json_column</code> flattened .</p> <p>It creates a materialized view with:</p> <ul> <li>query given by sql_to_flatten_json_column function</li> <li>same partition as <code>fully_qualified_table</code></li> </ul>"},{"location":"bigfunctions/create_materialized_view_w_flattened_json_column/#usage","title":"Usage","text":"Call or Deploy <code>create_materialized_view_w_flattened_json_column</code> ? Call <code>create_materialized_view_w_flattened_json_column</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>create_materialized_view_w_flattened_json_column</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>create_materialized_view_w_flattened_json_column</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>create_materialized_view_w_flattened_json_column</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>create_materialized_view_w_flattened_json_column</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get create_materialized_view_w_flattened_json_column\nbigfun deploy create_materialized_view_w_flattened_json_column\n</code></pre>"},{"location":"bigfunctions/create_materialized_view_w_flattened_json_column/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.create_materialized_view_w_flattened_json_column(\"your_project.your_dataset.your_table\", \"your_project.your_dataset.your_materialized_view\", \"data\");\n</code></pre> <pre><code>call bigfunctions.us.create_materialized_view_w_flattened_json_column(\"your_project.your_dataset.your_table\", \"your_project.your_dataset.your_materialized_view\", \"data\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.create_materialized_view_w_flattened_json_column(\"your_project.your_dataset.your_table\", \"your_project.your_dataset.your_materialized_view\", \"data\");\n</code></pre>"},{"location":"bigfunctions/create_materialized_view_w_flattened_json_column/#use-cases","title":"Use cases","text":"<p>You have a BigQuery table containing a JSON column called <code>data</code> that stores user activity logs.  The JSON structure varies slightly between records, making it difficult to query specific attributes efficiently.  You want to create a materialized view that flattens this JSON column, allowing simpler and faster queries on these attributes.</p> <p>Use Case:</p> <p>Let's say your table <code>your_project.your_dataset.your_table</code> looks like this:</p> user_id event_timestamp data 1 2024-07-26 10:00 <code>{\"event_type\":\"page_view\", \"page\":\"/home\"}</code> 2 2024-07-26 10:01 <code>{\"event_type\":\"purchase\", \"item_id\": 123}</code> 1 2024-07-26 10:02 <code>{\"event_type\":\"page_view\", \"page\":\"/products\"}</code> <p>You can use the <code>create_materialized_view_w_flattened_json_column</code> function to create a materialized view <code>your_project.your_dataset.your_materialized_view</code>:</p> <pre><code>call bigfunctions.us.create_materialized_view_w_flattened_json_column('your_project.your_dataset.your_table', 'your_project.your_dataset.your_materialized_view', 'data');\n</code></pre> <p>This will create a materialized view with columns for <code>user_id</code>, <code>event_timestamp</code>, and the flattened JSON attributes, like <code>event_type</code>, <code>page</code>, and <code>item_id</code>. The resulting materialized view might look something like this (depending on the actual data and the function's implementation):</p> user_id event_timestamp event_type page item_id 1 2024-07-26 10:00 page_view /home NULL 2 2024-07-26 10:01 purchase NULL 123 1 2024-07-26 10:02 page_view /products NULL <p>Now, querying for all page views becomes significantly easier:</p> <pre><code>SELECT * FROM your_project.your_dataset.your_materialized_view WHERE event_type = 'page_view';\n</code></pre> <p>This query will be much faster than querying the original table and parsing the JSON within the <code>WHERE</code> clause. This improved query performance is the key benefit of using a materialized view with a flattened JSON column.</p> Need help or Found a bug? Get help using <code>create_materialized_view_w_flattened_json_column</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>create_materialized_view_w_flattened_json_column</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/create_temp_dataset/","title":"create_temp_dataset","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>unytics</li> </ul>"},{"location":"bigfunctions/create_temp_dataset/#create_temp_dataset","title":"create_temp_dataset","text":"<pre><code>create_temp_dataset()\n</code></pre>"},{"location":"bigfunctions/create_temp_dataset/#description","title":"Description","text":"<p>Creates a temp dataset in <code>bigfunctions</code> project and gives you ownership permission on it.</p>"},{"location":"bigfunctions/create_temp_dataset/#usage","title":"Usage","text":"Call or Deploy <code>create_temp_dataset</code> ? Call <code>create_temp_dataset</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>create_temp_dataset</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>create_temp_dataset</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>create_temp_dataset</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>create_temp_dataset</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get create_temp_dataset\nbigfun deploy create_temp_dataset\n</code></pre>"},{"location":"bigfunctions/create_temp_dataset/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.create_temp_dataset()\n</code></pre> <pre><code>select bigfunctions.us.create_temp_dataset()\n</code></pre> <pre><code>select bigfunctions.europe_west1.create_temp_dataset()\n</code></pre> <pre>\n<code>+--------------------------------------------------------+\n| temp_dataset_id                                        |\n+--------------------------------------------------------+\n| bigfunctions.temp_6bdb75ca_7f72_4f1f_b46a_6ca59f7f66ac |\n+--------------------------------------------------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>create_temp_dataset</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>create_temp_dataset</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/date_sub_isoyear/","title":"date_sub_isoyear","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_date</li> </ul>"},{"location":"bigfunctions/date_sub_isoyear/#date_sub_isoyear","title":"date_sub_isoyear","text":"<pre><code>date_sub_isoyear(date, years)\n</code></pre>"},{"location":"bigfunctions/date_sub_isoyear/#description","title":"Description","text":"<p>Returns same day <code>years</code> before (same week number and same day of week)</p>"},{"location":"bigfunctions/date_sub_isoyear/#usage","title":"Usage","text":"Call or Deploy <code>date_sub_isoyear</code> ? Call <code>date_sub_isoyear</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>date_sub_isoyear</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>date_sub_isoyear</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>date_sub_isoyear</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>date_sub_isoyear</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get date_sub_isoyear\nbigfun deploy date_sub_isoyear\n</code></pre>"},{"location":"bigfunctions/date_sub_isoyear/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.date_sub_isoyear(2023-06-02, 3)\n</code></pre> <pre><code>select bigfunctions.us.date_sub_isoyear(2023-06-02, 3)\n</code></pre> <pre><code>select bigfunctions.europe_west1.date_sub_isoyear(2023-06-02, 3)\n</code></pre> <pre>\n<code>+------------------+\n| substracted_date |\n+------------------+\n| 2020-05-29       |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/date_sub_isoyear/#use-cases","title":"Use cases","text":"<p>A use case for the <code>date_sub_isoyear</code> function would be analyzing year-over-year performance based on ISO week alignment.  Imagine you have sales data and want to compare the sales of a specific ISO week in the current year to the same ISO week in previous years.</p> <p>Scenario:  A retail company wants to compare sales performance of the first week of June 2023 (ISO week 22) to the sales of the same ISO week (week 22) in 2022 and 2021.</p> <p>Query Example (using the <code>europe-west1</code> dataset):</p> <pre><code>WITH SalesData AS (\n    SELECT\n        DATE('2021-05-31') AS sale_date, 1200 AS sales_amount UNION ALL  -- Example data for week 22 in 2021\n    SELECT\n        DATE('2022-05-30') AS sale_date, 1500 AS sales_amount UNION ALL  -- Example data for week 22 in 2022\n    SELECT\n        DATE('2023-06-05') AS sale_date, 1800 AS sales_amount           -- Example data for week 22 in 2023\n)\n\nSELECT\n    sd.sale_date,\n    sd.sales_amount,\n    bigfunctions.europe_west1.date_sub_isoyear(sd.sale_date, 1) AS previous_year_date,  -- Date of the same ISO week in the previous year\n    bigfunctions.europe_west1.date_sub_isoyear(sd.sale_date, 2) AS two_years_ago_date    -- Date of the same ISO week two years ago\nFROM\n    SalesData sd\nORDER BY sd.sale_date;\n</code></pre> <p>This query would return a table showing the sales for each date, along with the corresponding dates in the previous two years that fall within the same ISO week.  This allows for direct comparison of sales figures across consistent ISO weeks, regardless of calendar date shifts.</p> <p>Other potential use cases:</p> <ul> <li>Financial reporting: Comparing financial performance across ISO years.</li> <li>Marketing analysis: Tracking campaign effectiveness based on ISO week alignment.</li> <li>Supply chain management: Analyzing inventory levels and demand based on consistent ISO week patterns.</li> <li>Any time series analysis where comparison across ISO weeks is more relevant than calendar dates.</li> </ul> <p>By using <code>date_sub_isoyear</code>, you ensure that comparisons are made across equivalent time periods in different years, according to the ISO week numbering system, providing a more accurate and meaningful analysis.</p> Need help or Found a bug? Get help using <code>date_sub_isoyear</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>date_sub_isoyear</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/deduplicate_rows/","title":"deduplicate_rows","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/deduplicate_rows/#deduplicate_rows","title":"deduplicate_rows","text":"<pre><code>deduplicate_rows(query_or_table_or_view)\n</code></pre>"},{"location":"bigfunctions/deduplicate_rows/#description","title":"Description","text":"<p>Returns the deduplicated rows of <code>query_or_table_or_view</code></p>"},{"location":"bigfunctions/deduplicate_rows/#usage","title":"Usage","text":"Call or Deploy <code>deduplicate_rows</code> ? Call <code>deduplicate_rows</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>deduplicate_rows</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>deduplicate_rows</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>deduplicate_rows</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>deduplicate_rows</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get deduplicate_rows\nbigfun deploy deduplicate_rows\n</code></pre>"},{"location":"bigfunctions/deduplicate_rows/#examples","title":"Examples","text":"<p>1. Returns table with duplicate rows removed.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.deduplicate_rows(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.deduplicate_rows(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.deduplicate_rows(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+-----+-----+\n| id1 | id2 |\n+-----+-----+\n| 1   | 2   |\n| 1   | 3   |\n| 2   | 3   |\n| 4   | 3   |\n| 6   | 3   |\n| 7   | 3   |\n| 8   | 9   |\n| 9   | 9   |\n+-----+-----+\n\n</code>\n</pre> <p>2. When incorrect table name is passed as arguments.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.deduplicate_rows(\"my_project.my_dataset.my_tbl\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.deduplicate_rows(\"my_project.my_dataset.my_tbl\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.deduplicate_rows(\"my_project.my_dataset.my_tbl\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n| f0_                                                                                                                                       |\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n| Not found: Table my_project:my_dataset.my_tbl was not found in location US at [my_project:my_dataset.deduplicate_rows:2:13] |\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n\n</code>\n</pre> <p>3. When a query is passed into the procedure.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.deduplicate_rows(\"select data from unnest([1, 2, 3, 1]) data\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.deduplicate_rows(\"select data from unnest([1, 2, 3, 1]) data\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.deduplicate_rows(\"select data from unnest([1, 2, 3, 1]) data\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+------+\n| data |\n+------+\n| 1    |\n| 2    |\n| 3    |\n+------+\n\n</code>\n</pre>"},{"location":"bigfunctions/deduplicate_rows/#use-cases","title":"Use cases","text":"<p>Let's say you have a table of customer transactions where accidental duplicates might occur.  You want to analyze the data accurately, so you need to remove those duplicates.</p> <p>Scenario:</p> <p>Your table <code>customer_transactions</code> in dataset <code>my_dataset</code> in project <code>my_project</code> looks like this:</p> transaction_id customer_id amount date 1 101 10.00 2024-03-08 2 102 25.50 2024-03-08 3 101 10.00 2024-03-08 4 103 50.00 2024-03-09 5 102 12.00 2024-03-09 6 101 10.00 2024-03-08 <p>Use Case with <code>deduplicate_rows</code>:</p> <p>You can use the <code>deduplicate_rows</code> function to remove the duplicate transactions:</p> <pre><code>CALL bigfunctions.us.deduplicate_rows(\"my_project.my_dataset.customer_transactions\");\nSELECT * FROM bigfunction_result;\n</code></pre> <p>This will create a temporary table <code>bigfunction_result</code> containing the deduplicated rows:</p> transaction_id customer_id amount date 1 101 10.00 2024-03-08 2 102 25.50 2024-03-08 4 103 50.00 2024-03-09 5 102 12.00 2024-03-09 <p>Benefits:</p> <ul> <li>Simplicity:  Easily deduplicate rows without complex SQL queries.</li> <li>Efficiency:  Leverages BigQuery's processing power for fast deduplication, even on large tables.</li> <li>Flexibility: Works with both tables and query results, allowing you to deduplicate data from various sources.</li> </ul> <p>Other Use Cases:</p> <ul> <li>Deduplicating product catalogs with slight variations in descriptions.</li> <li>Removing duplicate entries in user registration data.</li> <li>Cleaning up sensor data where multiple readings might be recorded for the same timestamp.</li> <li>Removing duplicate records from log files.</li> </ul> <p>Remember to replace <code>bigfunctions.us</code> with the appropriate dataset for your BigQuery region.  You can also create a new table from the <code>bigfunction_result</code> if you want to store the deduplicated data permanently.</p> Need help or Found a bug? Get help using <code>deduplicate_rows</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>deduplicate_rows</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/deidentify/","title":"deidentify","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/deidentify/#deidentify","title":"deidentify","text":"<pre><code>deidentify(text, info_types)\n</code></pre>"},{"location":"bigfunctions/deidentify/#description","title":"Description","text":"<p>Masks sensitive information of type <code>info_types</code> in <code>text</code> using Cloud Data Loss Prevention</p> Param Possible values (can be one or any combination of the following values separated by comma) <code>info_types</code> <code>ADVERTISING_ID</code>, <code>AGE</code>, <code>AUTH_TOKEN</code>, <code>AWS_CREDENTIALS</code>, <code>AZURE_AUTH_TOKEN</code>, <code>BASIC_AUTH_HEADER</code>, <code>CREDIT_CARD_NUMBER</code>, <code>CREDIT_CARD_TRACK_NUMBER</code>, <code>DATE</code>, <code>DATE_OF_BIRTH</code>, <code>DOMAIN_NAME</code>, <code>EMAIL_ADDRESS</code>, <code>ENCRYPTION_KEY</code>, <code>ETHNIC_GROUP</code>, <code>FEMALE_NAME</code>, <code>FIRST_NAME</code>, <code>GCP_API_KEY</code>, <code>GCP_CREDENTIALS</code>, <code>GENDER</code>, <code>GENERIC_ID</code>, <code>HTTP_COOKIE</code>, <code>HTTP_COOKIE</code>, <code>IBAN_CODE</code>, <code>ICCID_NUMBER</code>, <code>ICD10_CODE</code>, <code>ICD9_CODE</code>, <code>IMEI_HARDWARE_ID</code>, <code>IMSI_ID</code>, <code>IP_ADDRESS</code>, <code>JSON_WEB_TOKEN</code>, <code>LAST_NAME</code>, <code>LOCATION</code>, <code>LOCATION_COORDINATES</code>, <code>MAC_ADDRESS</code>, <code>MAC_ADDRESS_LOCAL</code>, <code>MALE_NAME</code>, <code>MARITAL_STATUS</code>, <code>MEDICAL_RECORD_NUMBER</code>, <code>MEDICAL_TERM</code>, <code>OAUTH_CLIENT_SECRET</code>, <code>ORGANIZATION_NAME</code>, <code>PASSPORT</code>, <code>PASSWORD</code>, <code>PERSON_NAME</code>, <code>PHONE_NUMBER</code>, <code>SSL_CERTIFICATE</code>, <code>STORAGE_SIGNED_POLICY_DOCUMENT</code>, <code>STORAGE_SIGNED_URL</code>, <code>STREET_ADDRESS</code>, <code>SWIFT_CODE</code>, <code>TIME</code>, <code>URL</code>, <code>VAT_NUMBER</code>, <code>VEHICLE_IDENTIFICATION_NUMBER</code>, <code>WEAK_PASSWORD_HASH</code>, <code>XSRF_TOKEN</code>"},{"location":"bigfunctions/deidentify/#usage","title":"Usage","text":"Call or Deploy <code>deidentify</code> ? Call <code>deidentify</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>deidentify</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>deidentify</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>deidentify</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>deidentify</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get deidentify\nbigfun deploy deidentify\n</code></pre>"},{"location":"bigfunctions/deidentify/#examples","title":"Examples","text":"<p>1. String with email in it.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.deidentify(\"My email is shivam@google.co.in\", \"PHONE_NUMBER, EMAIL_ADDRESS\")\n</code></pre> <pre><code>select bigfunctions.us.deidentify(\"My email is shivam@google.co.in\", \"PHONE_NUMBER, EMAIL_ADDRESS\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.deidentify(\"My email is shivam@google.co.in\", \"PHONE_NUMBER, EMAIL_ADDRESS\")\n</code></pre> <pre>\n<code>+-----------------------------+\n| masked_info                 |\n+-----------------------------+\n| My email is [EMAIL_ADDRESS] |\n+-----------------------------+\n</code>\n</pre> <p>2. String with phone number in it.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.deidentify(\"My phone number is 0123456789\", \"PHONE_NUMBER, email_address\")\n</code></pre> <pre><code>select bigfunctions.us.deidentify(\"My phone number is 0123456789\", \"PHONE_NUMBER, email_address\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.deidentify(\"My phone number is 0123456789\", \"PHONE_NUMBER, email_address\")\n</code></pre> <pre>\n<code>+-----------------------------------+\n| masked_info                       |\n+-----------------------------------+\n| My phone number is [PHONE_NUMBER] |\n+-----------------------------------+\n</code>\n</pre> <p>3. If <code>info_types</code> is <code>null</code> or empty, all built-in info types may be used</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.deidentify(\"My email is shivam@google.co.in\", null)\n</code></pre> <pre><code>select bigfunctions.us.deidentify(\"My email is shivam@google.co.in\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.deidentify(\"My email is shivam@google.co.in\", null)\n</code></pre> <pre>\n<code>+------------------------------------------+\n| masked_info                              |\n+------------------------------------------+\n| My email is [PERSON_NAME][EMAIL_ADDRESS] |\n+------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/deidentify/#use-cases","title":"Use cases","text":"<p>A customer support system stores chat transcripts including customer names, email addresses, phone numbers, and potentially credit card numbers if they make a purchase through the chat.  Regulations like GDPR require protecting this sensitive information.  The <code>deidentify</code> function can be used within BigQuery to anonymize this data for analysis or other purposes where the raw PII isn't required.</p> <p>Scenario: A data analyst needs to analyze chat transcripts to understand common customer issues.  They don't need the actual PII, just the context of the conversations.</p> <p>Implementation:</p> <ol> <li> <p>Data Storage: Chat transcripts are stored in a BigQuery table with columns like <code>chat_id</code>, <code>customer_id</code>, <code>transcript</code>. The <code>transcript</code> column contains the raw conversation text.</p> </li> <li> <p>De-identification Query: The analyst can use the <code>deidentify</code> function in a query to create an anonymized view of the data:</p> </li> </ol> <pre><code>SELECT\n    chat_id,\n    customer_id,\n    bigfunctions.us.deidentify(transcript, 'PERSON_NAME,EMAIL_ADDRESS,PHONE_NUMBER,CREDIT_CARD_NUMBER') AS anonymized_transcript\nFROM\n    `project.dataset.chat_transcripts`;\n</code></pre> <p>This query replaces identifiable information within the <code>transcript</code> column with generic markers like <code>[PERSON_NAME]</code>, <code>[EMAIL_ADDRESS]</code>, etc.</p> <ol> <li>Analysis: The analyst can then perform their analysis on the anonymized view, preserving customer privacy while still gaining insights from the conversation data.  For example, they could use natural language processing to identify common themes or topics of discussion.</li> </ol> <p>Benefits:</p> <ul> <li>Compliance: Meets data privacy regulations by masking sensitive information.</li> <li>Simplified Analysis: Enables analysis without risking exposure of PII.</li> <li>Flexibility: Allows specifying the types of information to mask, providing granular control over the de-identification process.</li> <li>Data Utility: Preserves the context and content of the conversations, allowing for meaningful analysis even after removing PII.</li> </ul> Need help or Found a bug? Get help using <code>deidentify</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>deidentify</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/delete_empty_datasets/","title":"delete_empty_datasets","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/delete_empty_datasets/#delete_empty_datasets","title":"delete_empty_datasets","text":"<pre><code>delete_empty_datasets(project)\n</code></pre>"},{"location":"bigfunctions/delete_empty_datasets/#description","title":"Description","text":"<p>Delete empty datasets in <code>project</code></p>"},{"location":"bigfunctions/delete_empty_datasets/#usage","title":"Usage","text":"Call or Deploy <code>delete_empty_datasets</code> ? Call <code>delete_empty_datasets</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>delete_empty_datasets</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>delete_empty_datasets</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>delete_empty_datasets</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>delete_empty_datasets</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get delete_empty_datasets\nbigfun deploy delete_empty_datasets\n</code></pre>"},{"location":"bigfunctions/delete_empty_datasets/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.delete_empty_datasets(\"your-project\");\n</code></pre> <pre><code>call bigfunctions.us.delete_empty_datasets(\"your-project\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.delete_empty_datasets(\"your-project\");\n</code></pre> Need help or Found a bug? Get help using <code>delete_empty_datasets</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>delete_empty_datasets</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/detect_language/","title":"detect_language","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/detect_language/#detect_language","title":"detect_language","text":"<pre><code>detect_language(text)\n</code></pre>"},{"location":"bigfunctions/detect_language/#description","title":"Description","text":"<p>Detects <code>text</code> language (using franc-min javascript library).</p> <p>Returns a three-letter language code (<code>eng</code> for <code>english</code> for example). Returns <code>und</code> for <code>undefined</code> if it could not detect the language or if the text is too short. All language codes are defined here</p>"},{"location":"bigfunctions/detect_language/#usage","title":"Usage","text":"Call or Deploy <code>detect_language</code> ? Call <code>detect_language</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>detect_language</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>detect_language</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>detect_language</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>detect_language</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get detect_language\nbigfun deploy detect_language\n</code></pre>"},{"location":"bigfunctions/detect_language/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.detect_language(\"I love this project so much\")\n</code></pre> <pre><code>select bigfunctions.us.detect_language(\"I love this project so much\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.detect_language(\"I love this project so much\")\n</code></pre> <pre>\n<code>+----------+\n| language |\n+----------+\n| eng      |\n+----------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>detect_language</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>detect_language</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/detect_sensitive_info/","title":"detect_sensitive_info","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/detect_sensitive_info/#detect_sensitive_info","title":"detect_sensitive_info","text":"<pre><code>detect_sensitive_info(text)\n</code></pre>"},{"location":"bigfunctions/detect_sensitive_info/#description","title":"Description","text":"<p>Detect sensitive information in <code>text</code> using Cloud Data Loss Prevention</p>"},{"location":"bigfunctions/detect_sensitive_info/#usage","title":"Usage","text":"Call or Deploy <code>detect_sensitive_info</code> ? Call <code>detect_sensitive_info</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>detect_sensitive_info</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>detect_sensitive_info</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>detect_sensitive_info</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>detect_sensitive_info</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get detect_sensitive_info\nbigfun deploy detect_sensitive_info\n</code></pre>"},{"location":"bigfunctions/detect_sensitive_info/#examples","title":"Examples","text":"<p>1. String with email in it.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.detect_sensitive_info(\"My email is shivam@google.co.in\")\n</code></pre> <pre><code>select bigfunctions.us.detect_sensitive_info(\"My email is shivam@google.co.in\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.detect_sensitive_info(\"My email is shivam@google.co.in\")\n</code></pre> <pre>\n<coden| sensitive_info|\nn| [{\"string\": \"shivam\", \"info_type\": \"PERSON_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"shivam\", \"info_type\": \"FIRST_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"shivam\", \"info_type\": \"FEMALE_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"shivam\", \"info_type\": \"MALE_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"google\", \"info_type\": \"ORGANIZATION_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"shivam@google.co.in\", \"info_type\": \"EMAIL_ADDRESS\", \"confidence\": \"VERY_LIKELY\"}, {\"string\": \"google.co.in\", \"info_type\": \"DOMAIN_NAME\", \"confidence\": \"LIKELY\"}] |\nn</code>\n</pre> <p>2. String with phone number in it.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.detect_sensitive_info(\"My phone number is 0123456789\")\n</code></pre> <pre><code>select bigfunctions.us.detect_sensitive_info(\"My phone number is 0123456789\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.detect_sensitive_info(\"My phone number is 0123456789\")\n</code></pre> <pre>\n<code>+---------------------------------------------------------------------------------+\n| sensitive_info                                                                  |\n+---------------------------------------------------------------------------------+\n| [{\"string\": \"0123456789\", \"info_type\": \"PHONE_NUMBER\", \"confidence\": \"LIKELY\"}] |\n+---------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/detect_sensitive_info/#use-cases","title":"Use cases","text":"<p>This <code>detect_sensitive_info</code> BigQuery function, leveraging Google Cloud DLP, has several practical use cases, particularly when dealing with large datasets stored in BigQuery:</p> <p>1. Data Discovery and Classification:</p> <ul> <li>Understanding Data Content: Before applying specific data governance policies or anonymization techniques, you need to know what sensitive data you have.  <code>detect_sensitive_info</code> can scan through text fields in your BigQuery tables to identify various types of sensitive information like PII (Personally Identifiable Information), including names, email addresses, phone numbers, credit card numbers, and more.</li> <li>Compliance Auditing: Regularly scanning your data with this function helps ensure compliance with data privacy regulations like GDPR, CCPA, HIPAA, etc.  You can identify potential violations and take corrective action.</li> </ul> <p>2. Data Masking and Anonymization:</p> <ul> <li>Pre-processing for Data Sharing: Before sharing datasets with third parties or making them publicly available, use <code>detect_sensitive_info</code> to pinpoint sensitive data. Then, you can apply appropriate masking or anonymization techniques (like redaction or pseudonymization) based on the detected information types.</li> </ul> <p>3. Security Monitoring and Threat Detection:</p> <ul> <li>Identifying Data Breaches: Implement continuous monitoring by periodically running <code>detect_sensitive_info</code> on critical datasets.  Unusual patterns or sudden appearances of sensitive information in unexpected locations might indicate a data breach or unauthorized access.</li> <li>Vulnerability Assessment:  By scanning data entering your BigQuery tables, you can assess vulnerabilities related to sensitive data exposure. For example, if a free-text field intended for product descriptions suddenly contains credit card numbers, it indicates a potential security flaw in your data ingestion process.</li> </ul> <p>4. Data Governance and Policy Enforcement:</p> <ul> <li>Automated Policy Enforcement: Integrate <code>detect_sensitive_info</code> into automated data governance workflows.  When sensitive data is detected, trigger alerts, block data ingestion, or automatically apply remediation steps.</li> </ul> <p>Example Scenario:</p> <p>Imagine a company storing customer feedback in a BigQuery table.  They want to analyze the feedback for sentiment analysis but need to protect customer privacy.</p> <ol> <li>They use <code>detect_sensitive_info</code> to scan the feedback text column.</li> <li>The function identifies email addresses and phone numbers mentioned in some feedback entries.</li> <li>Based on this, they apply a masking function to replace the identified sensitive information with placeholders or pseudonyms before sharing the data with their analytics team.</li> </ol> <p>This ensures that the analytics team can still perform sentiment analysis on the data without having access to the customers' private information.</p> Need help or Found a bug? Get help using <code>detect_sensitive_info</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>detect_sensitive_info</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/distinct_values/","title":"distinct_values","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/distinct_values/#distinct_values","title":"distinct_values","text":"<pre><code>distinct_values(arr)\n</code></pre>"},{"location":"bigfunctions/distinct_values/#description","title":"Description","text":"<p>Return distinct values</p>"},{"location":"bigfunctions/distinct_values/#usage","title":"Usage","text":"Call or Deploy <code>distinct_values</code> ? Call <code>distinct_values</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>distinct_values</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>distinct_values</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>distinct_values</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>distinct_values</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get distinct_values\nbigfun deploy distinct_values\n</code></pre>"},{"location":"bigfunctions/distinct_values/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.distinct_values([1, 4, 3, 4])\n</code></pre> <pre><code>select bigfunctions.us.distinct_values([1, 4, 3, 4])\n</code></pre> <pre><code>select bigfunctions.europe_west1.distinct_values([1, 4, 3, 4])\n</code></pre> <pre>\n<code>+-----------------+\n| distinct_values |\n+-----------------+\n| [1, 4, 3]       |\n+-----------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>distinct_values</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>distinct_values</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/exchange_rate/","title":"exchange_rate","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>public_services</li> </ul>"},{"location":"bigfunctions/exchange_rate/#exchange_rate","title":"exchange_rate","text":"<pre><code>exchange_rate(base, to)\n</code></pre>"},{"location":"bigfunctions/exchange_rate/#description","title":"Description","text":"<p>Get <code>exchange_rate</code> from <code>base</code> (e.g. <code>USD</code>) to <code>to</code> (e.g. <code>EUR</code>) from Yahoo Finance.</p> <p>This functions uses yfinance python package and returns the average of the <code>bid price</code> and the <code>ask price</code>. If the data is not available in Yahoo Finance, will return <code>null</code></p> Param Possible values <code>base</code>and<code>to</code> Iso 4217 currency codes such as <code>EUR</code> or <code>USD</code>. See active codes on wikipedia"},{"location":"bigfunctions/exchange_rate/#usage","title":"Usage","text":"Call or Deploy <code>exchange_rate</code> ? Call <code>exchange_rate</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>exchange_rate</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>exchange_rate</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>exchange_rate</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>exchange_rate</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get exchange_rate\nbigfun deploy exchange_rate\n</code></pre>"},{"location":"bigfunctions/exchange_rate/#examples","title":"Examples","text":"<p>To know how many euros a dollar is worth</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.exchange_rate(\"USD\", \"EUR\")\n</code></pre> <pre><code>select bigfunctions.us.exchange_rate(\"USD\", \"EUR\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.exchange_rate(\"USD\", \"EUR\")\n</code></pre> <pre>\n<code>+---------------+\n| exchange_rate |\n+---------------+\n| 0.910437      |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/exchange_rate/#use-cases","title":"Use cases","text":"<p>A company sells products internationally and stores sales data in BigQuery. The sales data includes the transaction amount and the currency in which the transaction occurred.  They need to report all sales in a single currency (e.g., USD) for financial analysis.</p> <p>They can use the <code>exchange_rate</code> function to convert all transactions to USD in their reporting queries.  For example, if they have a table called <code>sales</code> with columns <code>transaction_amount</code> and <code>transaction_currency</code>, they can write a query like this:</p> <pre><code>SELECT\n    transaction_amount * bigfunctions.us.exchange_rate(transaction_currency, 'USD') AS transaction_amount_usd\n  FROM\n    `your-project.your_dataset.sales`\n</code></pre> <p>This query would calculate <code>transaction_amount_usd</code> by multiplying the original <code>transaction_amount</code> by the exchange rate returned by the <code>exchange_rate</code> function. This effectively normalizes all transaction amounts to USD.  This makes it possible to aggregate and analyze sales data across different currencies, providing a consolidated view of the company's financial performance.</p> Need help or Found a bug? Get help using <code>exchange_rate</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>exchange_rate</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/export_table_to_datastore/","title":"export_table_to_datastore","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>export</li> </ul>"},{"location":"bigfunctions/export_table_to_datastore/#export_table_to_datastore","title":"export_table_to_datastore","text":"<pre><code>export_table_to_datastore(fully_qualified_table, key_column, datastore_path)\n</code></pre>"},{"location":"bigfunctions/export_table_to_datastore/#description","title":"Description","text":"<p>Export <code>fully_qualified_table</code> to datastore</p>"},{"location":"bigfunctions/export_table_to_datastore/#usage","title":"Usage","text":"Call or Deploy <code>export_table_to_datastore</code> ? Call <code>export_table_to_datastore</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>export_table_to_datastore</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>export_table_to_datastore</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>export_table_to_datastore</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>export_table_to_datastore</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get export_table_to_datastore\nbigfun deploy export_table_to_datastore\n</code></pre>"},{"location":"bigfunctions/export_table_to_datastore/#examples","title":"Examples","text":"<p>load random csv</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.export_table_to_datastore(\"your-project.dataset.table\", \"user_id\", \"your-project/default/default/users\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.export_table_to_datastore(\"your-project.dataset.table\", \"user_id\", \"your-project/default/default/users\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.export_table_to_datastore(\"your-project.dataset.table\", \"user_id\", \"your-project/default/default/users\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+---------+\n+   key   +\n+---------+\n+  12345  +\n+  23455  +\n+   ...   +\n+---------+\n\n</code>\n</pre> Need help or Found a bug? Get help using <code>export_table_to_datastore</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>export_table_to_datastore</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/export_table_to_unytics/","title":"export_table_to_unytics","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>unytics</li> </ul>"},{"location":"bigfunctions/export_table_to_unytics/#export_table_to_unytics","title":"export_table_to_unytics","text":"<pre><code>export_table_to_unytics(source_table, destination_unytics_table)\n</code></pre>"},{"location":"bigfunctions/export_table_to_unytics/#description","title":"Description","text":"<p>Creates a temp dataset in <code>bigfunctions</code> project and gives you ownership permission on it.</p>"},{"location":"bigfunctions/export_table_to_unytics/#usage","title":"Usage","text":"Call or Deploy <code>export_table_to_unytics</code> ? Call <code>export_table_to_unytics</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>export_table_to_unytics</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>export_table_to_unytics</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>export_table_to_unytics</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>export_table_to_unytics</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get export_table_to_unytics\nbigfun deploy export_table_to_unytics\n</code></pre>"},{"location":"bigfunctions/export_table_to_unytics/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.export_table_to_unytics();\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.export_table_to_unytics();\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.export_table_to_unytics();\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\nbigfunctions.temp_6bdb75ca_7f72_4f1f_b46a_6ca59f7f66ac\n</code>\n</pre> Need help or Found a bug? Get help using <code>export_table_to_unytics</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>export_table_to_unytics</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/export_to_datastore/","title":"export_to_datastore","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>export</li> </ul>"},{"location":"bigfunctions/export_to_datastore/#export_to_datastore","title":"export_to_datastore","text":"<pre><code>export_to_datastore(datastore_path, key, data)\n</code></pre>"},{"location":"bigfunctions/export_to_datastore/#description","title":"Description","text":"<p>Exports <code>data</code> to Datastore (Firestore in Datastore mode) to <code>key</code> at <code>datastore_path</code> (like <code>project/database/namespace/kind</code>)</p> <p>\ud83d\udca1 For this to work, <code>bigfunction@bigfunctions.iam.gserviceaccount.com</code> must have datastore user role in your project.</p>"},{"location":"bigfunctions/export_to_datastore/#usage","title":"Usage","text":"Call or Deploy <code>export_to_datastore</code> ? Call <code>export_to_datastore</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>export_to_datastore</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>export_to_datastore</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>export_to_datastore</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>export_to_datastore</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get export_to_datastore\nbigfun deploy export_to_datastore\n</code></pre>"},{"location":"bigfunctions/export_to_datastore/#examples","title":"Examples","text":"<p>1. Export <code>data</code> to default database, to default namespace with auto-generated <code>key</code>.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.export_to_datastore(\"your-project/default/default/users\", null, json '{\"name\": \"Marc Harris\", \"email\": \"marc@harris.com\"}')\n</code></pre> <pre><code>select bigfunctions.us.export_to_datastore(\"your-project/default/default/users\", null, json '{\"name\": \"Marc Harris\", \"email\": \"marc@harris.com\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.export_to_datastore(\"your-project/default/default/users\", null, json '{\"name\": \"Marc Harris\", \"email\": \"marc@harris.com\"}')\n</code></pre> <pre>\n<code>+------------------+\n| key              |\n+------------------+\n| 4503604769587200 |\n+------------------+\n</code>\n</pre> <p>2. Export <code>data</code> with email as <code>key</code>.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.export_to_datastore(\"your-project/default/default/users\", \"marc@harris.com\", json '{\"name\": \"Marc Harris\"}')\n</code></pre> <pre><code>select bigfunctions.us.export_to_datastore(\"your-project/default/default/users\", \"marc@harris.com\", json '{\"name\": \"Marc Harris\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.export_to_datastore(\"your-project/default/default/users\", \"marc@harris.com\", json '{\"name\": \"Marc Harris\"}')\n</code></pre> <pre>\n<code>+-----------------+\n| key             |\n+-----------------+\n| marc@harris.com |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/export_to_datastore/#use-cases","title":"Use cases","text":"<p>This <code>export_to_datastore</code> function is useful for scenarios where you need to move or synchronize data from BigQuery to Datastore (Firestore in Datastore mode). Here are a few use cases:</p> <ul> <li> <p>Materialized Views in Datastore: You might have complex analytical queries in BigQuery that produce aggregated data. Instead of recomputing these queries every time you need the results, you could use <code>export_to_datastore</code> to periodically store the aggregated data in Datastore.  This makes accessing these aggregations much faster for applications that don't need the full power of BigQuery.</p> </li> <li> <p>Data Synchronization for Microservices:  Imagine a microservice architecture where one service uses BigQuery for analytics and another service relies on Datastore for operational data.  You can use this function to keep the relevant data synchronized between the two data stores.  For example, BigQuery might store a user's purchase history, while Datastore stores their profile information.  You can use <code>export_to_datastore</code> to update the Datastore profile with aggregated purchase statistics calculated in BigQuery.</p> </li> <li> <p>Creating Lookups for Real-time Applications: BigQuery is great for analytical workloads, but not ideal for low-latency lookups.  If your application needs to quickly retrieve data based on a key, you can use <code>export_to_datastore</code> to create a lookup table in Datastore.  For instance, you might have product information stored in BigQuery, and you want to quickly retrieve product details by their SKU. You could export the SKU and relevant product details to Datastore for faster retrieval by your application.</p> </li> <li> <p>Simplifying Data Access for Non-technical Users: Datastore often provides a simpler interface for accessing data compared to BigQuery, especially for users who are not familiar with SQL.  You can use <code>export_to_datastore</code> to make specific datasets available in Datastore, allowing non-technical users to access and manipulate data more easily.</p> </li> <li> <p>Backup and Restore:  While not a primary backup solution, <code>export_to_datastore</code> could be used in conjunction with other backup methods to create a copy of specific BigQuery data in Datastore, particularly for smaller, critical datasets.</p> </li> </ul> <p>Example: Building a Real-time Product Catalog</p> <p>Let's say you have product information stored in a BigQuery table called <code>products</code>. You want to display this information on your website, which requires low-latency data access. Here's how you could use <code>export_to_datastore</code>:</p> <ol> <li>BigQuery Query: Write a query that selects the relevant product information (e.g., product_id, name, price, description) from the <code>products</code> table.</li> <li><code>export_to_datastore</code> Function:  Use the function within your BigQuery query to export the results to Datastore. You would use the <code>product_id</code> as the <code>key</code> and the remaining product information as the <code>data</code>.</li> </ol> <pre><code>SELECT bigfunctions.us.export_to_datastore(\n    'your-project',\n    null,  -- Use default namespace\n    'product_catalog', -- Kind for product data\n    CAST(product_id as STRING),  -- Product ID as key\n    TO_JSON_STRING(STRUCT(name, price, description))  -- Product details as JSON\n)\nFROM `your_project.your_dataset.products`;\n</code></pre> <ol> <li>Website Integration: Your website's backend can now efficiently retrieve product information from Datastore using the <code>product_id</code> as the key, providing a fast and responsive user experience.</li> </ol> <p>This is just one example.  The versatility of the <code>export_to_datastore</code> function allows you to bridge the gap between BigQuery's analytical capabilities and Datastore's operational strengths in a variety of situations.</p> Need help or Found a bug? Get help using <code>export_to_datastore</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>export_to_datastore</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/export_to_pubsub/","title":"export_to_pubsub","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>export</li> </ul>"},{"location":"bigfunctions/export_to_pubsub/#export_to_pubsub","title":"export_to_pubsub","text":"<pre><code>export_to_pubsub(project, topic, data, attributes)\n</code></pre>"},{"location":"bigfunctions/export_to_pubsub/#description","title":"Description","text":"<p>Exports <code>data</code> and <code>attributes</code> to Pub/Sub <code>topic</code>.</p> <p>\ud83d\udca1 For this to work, <code>749389685934-compute@developer.gserviceaccount.com</code> must have publish permission on your topic.</p>"},{"location":"bigfunctions/export_to_pubsub/#usage","title":"Usage","text":"Call or Deploy <code>export_to_pubsub</code> ? Call <code>export_to_pubsub</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>export_to_pubsub</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>export_to_pubsub</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>export_to_pubsub</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>export_to_pubsub</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get export_to_pubsub\nbigfun deploy export_to_pubsub\n</code></pre>"},{"location":"bigfunctions/export_to_pubsub/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.export_to_pubsub(\"your-project\", \"your_topic\", \"Your message data\", {\"attribute1\": \"value1\", \"attribute2\": \"value2\"})\n</code></pre> <pre><code>select bigfunctions.us.export_to_pubsub(\"your-project\", \"your_topic\", \"Your message data\", {\"attribute1\": \"value1\", \"attribute2\": \"value2\"})\n</code></pre> <pre><code>select bigfunctions.europe_west1.export_to_pubsub(\"your-project\", \"your_topic\", \"Your message data\", {\"attribute1\": \"value1\", \"attribute2\": \"value2\"})\n</code></pre> <pre>\n<code>+----------------------+\n| published_message_id |\n+----------------------+\n| 1123432546           |\n+----------------------+\n</code>\n</pre>"},{"location":"bigfunctions/export_to_pubsub/#use-cases","title":"Use cases","text":"<p>Let's imagine you have a BigQuery table that tracks real-time sensor data from a manufacturing plant.  You want to trigger a downstream process whenever a sensor reading exceeds a certain threshold.  This downstream process might be an alert system, an automated adjustment to the machinery, or a data pipeline for further analysis.  Instead of constantly polling the BigQuery table, you can use the <code>export_to_pubsub</code> function to push relevant data to a Pub/Sub topic in real-time.</p> <p>Here's how it would work:</p> <ol> <li> <p>BigQuery Streaming Inserts: Sensor data is streamed into a BigQuery table.</p> </li> <li> <p>BigQuery Scheduled Query:  A scheduled query runs periodically (e.g., every minute) to check for sensor readings exceeding the threshold.  The query might look something like this:</p> </li> </ol> <pre><code>SELECT sensor_id, timestamp, reading\nFROM `your-project.your_dataset.sensor_data`\nWHERE reading &gt; 1000 AND _PARTITIONTIME &gt;= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 MINUTE)\n</code></pre> <ol> <li>Call <code>export_to_pubsub</code> within the query:  If the query returns any results, you integrate the <code>export_to_pubsub</code> function within the query itself:</li> </ol> <pre><code>SELECT bigfunctions.your_region.export_to_pubsub(\n    'your-project',\n    'sensor_alerts_topic',\n    TO_JSON_STRING(t),  -- Send the entire row as the message data\n    '{\"sensor_type\": \"temperature\"}' -- Add attributes for context\n)\nFROM (\n    SELECT sensor_id, timestamp, reading\n    FROM `your-project.your_dataset.sensor_data`\n    WHERE reading &gt; 1000 AND _PARTITIONTIME &gt;= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 MINUTE)\n) AS t;\n</code></pre> <ol> <li>Pub/Sub triggers downstream process: The <code>sensor_alerts_topic</code> is subscribed to by a service that handles the alerts or automated actions. When a message arrives on the topic, the subscriber is triggered, and the downstream process is initiated.</li> </ol> <p>Benefits:</p> <ul> <li>Real-time responsiveness:  Alerts and actions are triggered as soon as the threshold is crossed, without needing to constantly poll BigQuery.</li> <li>Scalability: Pub/Sub handles the message distribution, ensuring that the downstream systems can scale to handle a large volume of alerts.</li> <li>Decoupling: BigQuery is decoupled from the downstream processes, making the system more flexible and maintainable.</li> <li>Reduced cost: Avoids the cost and latency of repeatedly querying BigQuery for new data.</li> </ul> <p>This is just one example.  The <code>export_to_pubsub</code> function can be used in various scenarios where you need to push data from BigQuery to other systems in a real-time or near real-time fashion. Other examples include:</p> <ul> <li>New user registration: Push new user data to a Pub/Sub topic for welcome email processing.</li> <li>Order fulfillment:  Notify downstream systems about new orders placed.</li> <li>Fraud detection: Push suspicious transactions to a Pub/Sub topic for real-time analysis.</li> <li>Data synchronization: Keep other systems in sync with changes happening in BigQuery.</li> </ul> Need help or Found a bug? Get help using <code>export_to_pubsub</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>export_to_pubsub</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/export_to_storage/","title":"export_to_storage","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>export</li> </ul>"},{"location":"bigfunctions/export_to_storage/#export_to_storage","title":"export_to_storage","text":"<pre><code>export_to_storage(path, content, content_type)\n</code></pre>"},{"location":"bigfunctions/export_to_storage/#description","title":"Description","text":"<p>Exports <code>content</code> to Cloud Storage</p> <p>\ud83d\udca1 For this to work, <code>bigfunction@bigfunctions.iam.gserviceaccount.com</code> must have objectCreator role to the bucket.</p>"},{"location":"bigfunctions/export_to_storage/#usage","title":"Usage","text":"Call or Deploy <code>export_to_storage</code> ? Call <code>export_to_storage</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>export_to_storage</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>export_to_storage</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>export_to_storage</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>export_to_storage</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get export_to_storage\nbigfun deploy export_to_storage\n</code></pre>"},{"location":"bigfunctions/export_to_storage/#examples","title":"Examples","text":"<p>Export <code>data</code> to default database, to default namespace with auto-generated <code>key</code>.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.export_to_storage(\"gs://bucket/path/to/filename.csv\", column1,column2\n      value1,value2)\n</code></pre> <pre><code>select bigfunctions.us.export_to_storage(\"gs://bucket/path/to/filename.csv\", column1,column2\n      value1,value2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.export_to_storage(\"gs://bucket/path/to/filename.csv\", column1,column2\n      value1,value2)\n</code></pre> <pre>\n<code>+--------+\n| status |\n+--------+\n| OK     |\n+--------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>export_to_storage</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>export_to_storage</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/faker/","title":"faker","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>generate</li> </ul>"},{"location":"bigfunctions/faker/#faker","title":"faker","text":"<pre><code>faker(what, locale)\n</code></pre>"},{"location":"bigfunctions/faker/#description","title":"Description","text":"<p>Generates fake data of type <code>what</code> and localized with <code>locale</code> parameter (using faker python library)</p> Param Possible values <code>what</code> <code>aba</code>, <code>address</code>, <code>administrative_unit</code>, <code>am_pm</code>, <code>android_platform_token</code>, <code>ascii_company_email</code>, <code>ascii_email</code>, <code>ascii_free_email</code>, <code>ascii_safe_email</code>, <code>bank_country</code>, <code>bban</code>, <code>binary</code>, <code>boolean</code>, <code>bothify</code>, <code>bs</code>, <code>building_number</code>, <code>catch_phrase</code>, <code>century</code>, <code>chrome</code>, <code>city</code>, <code>city_prefix</code>, <code>city_suffix</code>, <code>color</code>, <code>color_name</code>, <code>company</code>, <code>company_email</code>, <code>company_suffix</code>, <code>coordinate</code>, <code>country</code>, <code>country_calling_code</code>, <code>country_code</code>, <code>credit_card_expire</code>, <code>credit_card_full</code>, <code>credit_card_number</code>, <code>credit_card_provider</code>, <code>credit_card_security_code</code>, <code>cryptocurrency</code>, <code>cryptocurrency_code</code>, <code>cryptocurrency_name</code>, <code>csv</code>, <code>currency</code>, <code>currency_code</code>, <code>currency_name</code>, <code>currency_symbol</code>, <code>current_country</code>, <code>current_country_code</code>, <code>date</code>, <code>date_between</code>, <code>date_between_dates</code>, <code>date_object</code>, <code>date_of_birth</code>, <code>date_this_century</code>, <code>date_this_decade</code>, <code>date_this_month</code>, <code>date_this_year</code>, <code>date_time</code>, <code>date_time_ad</code>, <code>date_time_between</code>, <code>date_time_between_dates</code>, <code>date_time_this_century</code>, <code>date_time_this_decade</code>, <code>date_time_this_month</code>, <code>date_time_this_year</code>, <code>day_of_month</code>, <code>day_of_week</code>, <code>dga</code>, <code>domain_name</code>, <code>domain_word</code>, <code>dsv</code>, <code>ean</code>, <code>ean13</code>, <code>ean8</code>, <code>ein</code>, <code>email</code>, <code>emoji</code>, <code>file_extension</code>, <code>file_name</code>, <code>file_path</code>, <code>firefox</code>, <code>first_name</code>, <code>first_name_female</code>, <code>first_name_male</code>, <code>first_name_nonbinary</code>, <code>fixed_width</code>, <code>free_email</code>, <code>free_email_domain</code>, <code>future_date</code>, <code>future_datetime</code>, <code>get_providers</code>, <code>hex_color</code>, <code>hexify</code>, <code>hostname</code>, <code>http_method</code>, <code>iana_id</code>, <code>iban</code>, <code>image_url</code>, <code>internet_explorer</code>, <code>invalid_ssn</code>, <code>ios_platform_token</code>, <code>ipv4</code>, <code>ipv4_network_class</code>, <code>ipv4_private</code>, <code>ipv4_public</code>, <code>ipv6</code>, <code>isbn10</code>, <code>isbn13</code>, <code>iso8601</code>, <code>items</code>, <code>itin</code>, <code>job</code>, <code>json</code>, <code>json_bytes</code>, <code>language_code</code>, <code>language_name</code>, <code>last_name</code>, <code>last_name_female</code>, <code>last_name_male</code>, <code>last_name_nonbinary</code>, <code>latitude</code>, <code>latlng</code>, <code>lexify</code>, <code>license_plate</code>, <code>linux_platform_token</code>, <code>linux_processor</code>, <code>local_latlng</code>, <code>locale</code>, <code>localized_ean</code>, <code>localized_ean13</code>, <code>localized_ean8</code>, <code>location_on_land</code>, <code>longitude</code>, <code>mac_address</code>, <code>mac_platform_token</code>, <code>mac_processor</code>, <code>md5</code>, <code>military_apo</code>, <code>military_dpo</code>, <code>military_ship</code>, <code>military_state</code>, <code>mime_type</code>, <code>month</code>, <code>month_name</code>, <code>msisdn</code>, <code>name</code>, <code>name_female</code>, <code>name_male</code>, <code>name_nonbinary</code>, <code>nic_handle</code>, <code>nic_handles</code>, <code>null_boolean</code>, <code>numerify</code>, <code>opera</code>, <code>paragraph</code>, <code>paragraphs</code>, <code>password</code>, <code>past_date</code>, <code>past_datetime</code>, <code>phone_number</code>, <code>port_number</code>, <code>postalcode</code>, <code>postalcode_in_state</code>, <code>postalcode_plus4</code>, <code>postcode</code>, <code>postcode_in_state</code>, <code>prefix</code>, <code>prefix_female</code>, <code>prefix_male</code>, <code>prefix_nonbinary</code>, <code>pricetag</code>, <code>profile</code>, <code>psv</code>, <code>pybool</code>, <code>pydecimal</code>, <code>pydict</code>, <code>pyfloat</code>, <code>pyint</code>, <code>pyiterable</code>, <code>pylist</code>, <code>pyobject</code>, <code>pyset</code>, <code>pystr</code>, <code>pystr_format</code>, <code>pystruct</code>, <code>pytimezone</code>, <code>pytuple</code>, <code>random_choices</code>, <code>random_digit</code>, <code>random_digit_not_null</code>, <code>random_digit_not_null_or_empty</code>, <code>random_digit_or_empty</code>, <code>random_element</code>, <code>random_elements</code>, <code>random_int</code>, <code>random_letter</code>, <code>random_letters</code>, <code>random_lowercase_letter</code>, <code>random_number</code>, <code>random_sample</code>, <code>random_uppercase_letter</code>, <code>randomize_nb_elements</code>, <code>rgb_color</code>, <code>rgb_css_color</code>, <code>ripe_id</code>, <code>safari</code>, <code>safe_color_name</code>, <code>safe_domain_name</code>, <code>safe_email</code>, <code>safe_hex_color</code>, <code>sbn9</code>, <code>secondary_address</code>, <code>seed_instance</code>, <code>sentence</code>, <code>sentences</code>, <code>sha1</code>, <code>sha256</code>, <code>simple_profile</code>, <code>slug</code>, <code>ssn</code>, <code>state</code>, <code>state_abbr</code>, <code>street_address</code>, <code>street_name</code>, <code>street_suffix</code>, <code>suffix</code>, <code>suffix_female</code>, <code>suffix_male</code>, <code>suffix_nonbinary</code>, <code>swift</code>, <code>swift11</code>, <code>swift8</code>, <code>tar</code>, <code>text</code>, <code>texts</code>, <code>time</code>, <code>time_delta</code>, <code>time_object</code>, <code>time_series</code>, <code>timezone</code>, <code>tld</code>, <code>tsv</code>, <code>unix_device</code>, <code>unix_partition</code>, <code>unix_time</code>, <code>upc_a</code>, <code>upc_e</code>, <code>uri</code>, <code>uri_extension</code>, <code>uri_page</code>, <code>uri_path</code>, <code>url</code>, <code>user_agent</code>, <code>user_name</code>, <code>uuid4</code>, <code>windows_platform_token</code>, <code>word</code>, <code>words</code>, <code>year</code>, <code>zip</code>, <code>zipcode</code>, <code>zipcode_in_state</code>, <code>zipcode_plus4</code> <code>locale</code> <code>null</code>, <code>ar_AA</code>, <code>ar_AE</code>, <code>ar_BH</code>, <code>ar_EG</code>, <code>ar_JO</code>, <code>ar_PS</code>, <code>ar_SA</code>, <code>az_AZ</code>, <code>bg_BG</code>, <code>bn_BD</code>, <code>bs_BA</code>, <code>cs_CZ</code>, <code>da_DK</code>, <code>de</code>, <code>de_AT</code>, <code>de_CH</code>, <code>de_DE</code>, <code>dk_DK</code>, <code>el_CY</code>, <code>el_GR</code>, <code>en</code>, <code>en_AU</code>, <code>en_CA</code>, <code>en_GB</code>, <code>en_IE</code>, <code>en_IN</code>, <code>en_NZ</code>, <code>en_PH</code>, <code>en_TH</code>, <code>en_US</code>, <code>es</code>, <code>es_AR</code>, <code>es_CA</code>, <code>es_CL</code>, <code>es_CO</code>, <code>es_ES</code>, <code>es_MX</code>, <code>et_EE</code>, <code>fa_IR</code>, <code>fi_FI</code>, <code>fil_PH</code>, <code>fr_BE</code>, <code>fr_CA</code>, <code>fr_CH</code>, <code>fr_FR</code>, <code>fr_QC</code>, <code>ga_IE</code>, <code>he_IL</code>, <code>hi_IN</code>, <code>hr_HR</code>, <code>hu_HU</code>, <code>hy_AM</code>, <code>id_ID</code>, <code>it_CH</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ka_GE</code>, <code>ko_KR</code>, <code>la</code>, <code>lb_LU</code>, <code>lt_LT</code>, <code>lv_LV</code>, <code>mt_MT</code>, <code>ne_NP</code>, <code>nl_BE</code>, <code>nl_NL</code>, <code>no_NO</code>, <code>or_IN</code>, <code>pl_PL</code>, <code>pt_BR</code>, <code>pt_PT</code>, <code>ro_RO</code>, <code>ru_RU</code>, <code>sk_SK</code>, <code>sl_SI</code>, <code>sq_AL</code>, <code>sv_SE</code>, <code>ta_IN</code>, <code>th</code>, <code>th_TH</code>, <code>tl_PH</code>, <code>tr_TR</code>, <code>tw_GH</code>, <code>uk_UA</code>, <code>vi_VN</code>, <code>zh_CN</code>, <code>zh_TW</code>"},{"location":"bigfunctions/faker/#usage","title":"Usage","text":"Call or Deploy <code>faker</code> ? Call <code>faker</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>faker</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>faker</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>faker</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>faker</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get faker\nbigfun deploy faker\n</code></pre>"},{"location":"bigfunctions/faker/#examples","title":"Examples","text":"<p>1. Generate fake italian name</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.faker(\"name\", \"it_IT\")\n</code></pre> <pre><code>select bigfunctions.us.faker(\"name\", \"it_IT\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.faker(\"name\", \"it_IT\")\n</code></pre> <pre>\n<code>+------------------+\n| fake_data        |\n+------------------+\n| Michela Beccaria |\n+------------------+\n</code>\n</pre> <p>2. Generate fake IPv4 address (without specifying locale)</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.faker(\"ipv4_private\", null)\n</code></pre> <pre><code>select bigfunctions.us.faker(\"ipv4_private\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.faker(\"ipv4_private\", null)\n</code></pre> <pre>\n<code>+---------------+\n| fake_data     |\n+---------------+\n| 10.52.207.187 |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/faker/#use-cases","title":"Use cases","text":"<p>This <code>faker</code> BigQuery function has several practical use cases, primarily centered around generating realistic test data:</p> <ol> <li> <p>Populating Test Databases: When developing or testing applications that interact with BigQuery, you often need a substantial amount of data to simulate real-world scenarios. Instead of manually creating this data, you can use <code>faker</code> to automatically generate a large volume of realistic fake data for various data types like names, addresses, emails, dates, etc.  This ensures your application is tested under realistic conditions.</p> </li> <li> <p>Data Anonymization and Privacy: In situations where you need to share data but protect sensitive information, <code>faker</code> can be used to replace real data with plausible fake data. This allows you to maintain the statistical properties of the dataset while preserving individual privacy.  For instance, you could replace real names with fake names, real addresses with fake addresses, and so on.</p> </li> <li> <p>Demonstrations and Mockups:  When demonstrating a new application or creating mockups, you may not have access to real data. <code>faker</code> provides a quick and easy way to generate realistic data to populate your demos and make them more compelling.</p> </li> <li> <p>Load Testing: To test the performance of your BigQuery queries and applications under stress, you can use <code>faker</code> to generate large datasets with specific characteristics. This helps you identify potential bottlenecks and optimize your queries for better performance.</p> </li> <li> <p>Training Machine Learning Models: Some machine learning models require large amounts of data for training. <code>faker</code> can supplement real data or even be used to generate entirely synthetic datasets for training purposes, especially when real data is scarce or expensive to obtain.</p> </li> <li> <p>Data Analysis and Exploration: When exploring a new dataset or developing new data analysis techniques, <code>faker</code> can be used to generate datasets with known properties. This allows you to test your analysis methods and understand how they perform under different conditions.</p> </li> </ol> <p>Example Scenario:</p> <p>Imagine you are developing a new e-commerce application and need to test its reporting features.  You could use <code>faker</code> to generate a dataset of fake customer orders with realistic order dates, product names, prices, shipping addresses, and so on.  This would allow you to thoroughly test your reporting dashboard and ensure it can handle a large volume of data and accurately calculate metrics like sales by region, average order value, and customer lifetime value.</p> <p>By leveraging the various data types and locales supported by <code>faker</code>, you can tailor the generated data to your specific needs and create highly realistic test scenarios.</p> Need help or Found a bug? Get help using <code>faker</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>faker</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/find_greater_value/","title":"find_greater_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/find_greater_value/#find_greater_value","title":"find_greater_value","text":"<pre><code>find_greater_value(arr, x)\n</code></pre>"},{"location":"bigfunctions/find_greater_value/#description","title":"Description","text":"<p>Return the <code>offset</code> (zero-based index) of the first <code>value</code> in <code>arr</code> where <code>value &gt;= x</code> (or <code>null</code> if no <code>value</code> is greater than <code>x</code>).</p>"},{"location":"bigfunctions/find_greater_value/#usage","title":"Usage","text":"Call or Deploy <code>find_greater_value</code> ? Call <code>find_greater_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>find_greater_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>find_greater_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>find_greater_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>find_greater_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get find_greater_value\nbigfun deploy find_greater_value\n</code></pre>"},{"location":"bigfunctions/find_greater_value/#examples","title":"Examples","text":"<p>1. When a strictly greater <code>value</code> exists in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_greater_value([0, 20, 50, 80, 100], 25)\n</code></pre> <pre><code>select bigfunctions.us.find_greater_value([0, 20, 50, 80, 100], 25)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_greater_value([0, 20, 50, 80, 100], 25)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 2      |\n+--------+\n</code>\n</pre> <p>2. When an identical <code>value</code> exists in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_greater_value([0, 20, 50, 80, 100], 20)\n</code></pre> <pre><code>select bigfunctions.us.find_greater_value([0, 20, 50, 80, 100], 20)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_greater_value([0, 20, 50, 80, 100], 20)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 1      |\n+--------+\n</code>\n</pre> <p>3. When a greater <code>value</code> does NOT exist in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_greater_value([0, 20, 50, 80, 100], 110)\n</code></pre> <pre><code>select bigfunctions.us.find_greater_value([0, 20, 50, 80, 100], 110)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_greater_value([0, 20, 50, 80, 100], 110)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| null   |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/find_greater_value/#use-cases","title":"Use cases","text":"<p>Use Case: Finding the appropriate pricing tier</p> <p>Imagine you have a table of pricing tiers for a product, with each tier defined by a usage threshold and a corresponding price. You could use <code>find_greater_value</code> to efficiently determine the correct pricing tier for a given customer's usage.</p> <p>Example Scenario:</p> <p>A software company offers different pricing tiers based on the number of API calls made per month:</p> Tier API Calls Price Free 0-1,000 $0 Basic 1,001-5,000 $25 Premium 5,001-10,000 $50 Enterprise &gt; 10,000 $100 <p>BigQuery Implementation:</p> <pre><code>WITH PricingTiers AS (\n    SELECT [1000, 5000, 10000] AS api_call_thresholds,\n           [0, 25, 50, 100] AS prices\n),\nCustomerUsage AS (\n    SELECT 'customer_A' AS customer_id, 7500 AS api_calls\n)\nSELECT\n    CustomerUsage.customer_id,\n    CustomerUsage.api_calls,\n    PricingTiers.prices[SAFE_OFFSET(bigfunctions.YOUR_REGION.find_greater_value(PricingTiers.api_call_thresholds, CustomerUsage.api_calls))] AS price\nFROM CustomerUsage\nCROSS JOIN PricingTiers;\n</code></pre> <p>Explanation:</p> <ol> <li><code>PricingTiers</code> CTE: This CTE stores the API call thresholds and corresponding prices as arrays.</li> <li><code>CustomerUsage</code> CTE: This CTE represents the customer's API usage.</li> <li>Main Query:</li> <li>It joins <code>CustomerUsage</code> and <code>PricingTiers</code>.</li> <li><code>find_greater_value</code> searches the <code>api_call_thresholds</code> array for the first value greater than or equal to the customer's <code>api_calls</code>. This returns the index (offset) of the appropriate tier.</li> <li><code>SAFE_OFFSET</code> handles cases where the usage exceeds all defined tiers (e.g., &gt; 10,000), returning the last price in the array.</li> </ol> <p>Result:</p> customer_id api_calls price customer_A 7500 50 <p>This example demonstrates how <code>find_greater_value</code> can be used for efficient lookups in tiered data, eliminating the need for complex <code>CASE</code> statements or joins. This approach is particularly useful when dealing with a large number of tiers or when the tiers are subject to change, as updating the arrays is much simpler than modifying numerous <code>CASE</code> conditions. You could extend this to other use cases such as tax brackets, shipping costs based on weight, or commission rates based on sales volume.  Remember to replace <code>YOUR_REGION</code> with your BigQuery region (e.g. <code>us</code>, <code>eu</code>, <code>us-central1</code>).</p> Need help or Found a bug? Get help using <code>find_greater_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>find_greater_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/find_lower_value/","title":"find_lower_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/find_lower_value/#find_lower_value","title":"find_lower_value","text":"<pre><code>find_lower_value(arr, x)\n</code></pre>"},{"location":"bigfunctions/find_lower_value/#description","title":"Description","text":"<p>Return the <code>offset</code> (zero-based index) of the first <code>value</code> in <code>arr</code> where <code>value &lt;= x</code> (or <code>null</code> if no <code>value</code> is lower than <code>x</code>).</p>"},{"location":"bigfunctions/find_lower_value/#usage","title":"Usage","text":"Call or Deploy <code>find_lower_value</code> ? Call <code>find_lower_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>find_lower_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>find_lower_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>find_lower_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>find_lower_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get find_lower_value\nbigfun deploy find_lower_value\n</code></pre>"},{"location":"bigfunctions/find_lower_value/#examples","title":"Examples","text":"<p>1. When a strictly lower <code>value</code> exists in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_lower_value([5, 4, 3, 100], 3.5)\n</code></pre> <pre><code>select bigfunctions.us.find_lower_value([5, 4, 3, 100], 3.5)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_lower_value([5, 4, 3, 100], 3.5)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 2      |\n+--------+\n</code>\n</pre> <p>2. When an identical <code>value</code> exists in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_lower_value([5, 4, 3, 100], 4)\n</code></pre> <pre><code>select bigfunctions.us.find_lower_value([5, 4, 3, 100], 4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_lower_value([5, 4, 3, 100], 4)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 1      |\n+--------+\n</code>\n</pre> <p>3. When a lower <code>value</code> does NOT exist in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_lower_value([5, 4, 3, 100], 2)\n</code></pre> <pre><code>select bigfunctions.us.find_lower_value([5, 4, 3, 100], 2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_lower_value([5, 4, 3, 100], 2)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| null   |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/find_lower_value/#use-cases","title":"Use cases","text":"<p>Imagine you have a table of product prices and you want to find the index of the first product in a given list that is priced at or below a certain threshold.</p> <p>Scenario: You're building a price comparison tool.  You have a table with competitor prices for a specific product:</p> Competitor Price A 12.99 B 10.50 C 15.00 D 9.99 E 11.75 <p>A user sets a maximum price they are willing to pay, say $11.00. You want to quickly find the first competitor in the list offering a price at or below $11.00.</p> <p>BigQuery SQL using <code>find_lower_value</code>:</p> <pre><code>SELECT find_lower_value([12.99, 10.50, 15.00, 9.99, 11.75], 11.00) AS first_affordable_competitor_index;\n</code></pre> <p>This query would return <code>1</code>, which is the index of competitor B (remember, it's zero-based indexing).</p> <p>Other Use Cases:</p> <ul> <li>Inventory Management: Finding the index of the first bin in a warehouse with stock at or below a reorder point.</li> <li>Data Analysis: Quickly locating the first data point in a time series that falls below a certain threshold (e.g., first day temperature dropped below freezing).</li> <li>Game Development: Determining the first item in a sorted list of player scores that is less than or equal to a given score.</li> <li>Algorithm Optimization:  As part of more complex algorithms like binary search variations, where you need to efficiently find the position of an element or the first element meeting a specific condition within a sorted or partially sorted array.</li> </ul> <p>This function provides a concise and efficient way to perform this type of search within BigQuery without needing to write more complex procedural code.</p> Need help or Found a bug? Get help using <code>find_lower_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>find_lower_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/find_value/","title":"find_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/find_value/#find_value","title":"find_value","text":"<pre><code>find_value(arr, value)\n</code></pre>"},{"location":"bigfunctions/find_value/#description","title":"Description","text":"<p>Return the first <code>offset</code> (zero-based index) of <code>value</code> in array <code>arr</code> (or <code>null</code> if <code>value</code> is not in <code>arr</code>).</p>"},{"location":"bigfunctions/find_value/#usage","title":"Usage","text":"Call or Deploy <code>find_value</code> ? Call <code>find_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>find_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>find_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>find_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>find_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get find_value\nbigfun deploy find_value\n</code></pre>"},{"location":"bigfunctions/find_value/#examples","title":"Examples","text":"<p>1. When <code>value</code> is in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_value([3, 4], 4)\n</code></pre> <pre><code>select bigfunctions.us.find_value([3, 4], 4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_value([3, 4], 4)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 1      |\n+--------+\n</code>\n</pre> <p>2. When <code>value</code> is not in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_value([3, 4], 7)\n</code></pre> <pre><code>select bigfunctions.us.find_value([3, 4], 7)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_value([3, 4], 7)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| null   |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/find_value/#use-cases","title":"Use cases","text":"<p>You have a table of customer orders, and each order has an array of product IDs.  You want to find the position of a specific product ID within each order's product array.</p> <p>Table Schema:</p> <pre><code>CREATE OR REPLACE TABLE `your_project.your_dataset.orders` (\n  order_id INT64,\n  product_ids ARRAY&lt;INT64&gt;\n);\n\nINSERT INTO `your_project.your_dataset.orders` (order_id, product_ids) VALUES\n(1, [101, 102, 103, 104]),\n(2, [102, 105, 106]),\n(3, [101, 103, 107, 102]);\n</code></pre> <p>Use Case: Finding the position of product ID 102:</p> <pre><code>SELECT\n    order_id,\n    bigfunctions.your_region.find_value(product_ids, 102) AS product_102_position\n  FROM\n    `your_project.your_dataset.orders`;\n</code></pre> <p>Result:</p> <pre><code>+---------+----------------------+\n| order_id | product_102_position |\n+---------+----------------------+\n|       1 |                    1 |\n|       2 |                    0 |\n|       3 |                    3 |\n+---------+----------------------+\n</code></pre> <p>Explanation:</p> <ul> <li>The <code>find_value</code> function searches the <code>product_ids</code> array for the value <code>102</code>.</li> <li>It returns the zero-based index (position) of the first occurrence of <code>102</code>.</li> <li>For <code>order_id = 1</code>, <code>102</code> is at index 1.</li> <li>For <code>order_id = 2</code>, <code>102</code> is at index 0.</li> <li>For <code>order_id = 3</code>, <code>102</code> is at index 3.</li> </ul> <p>Other Potential Use Cases:</p> <ul> <li>Inventory Management:  Find the location of a specific item within a warehouse represented as an array.</li> <li>Log Analysis: Find the first occurrence of a specific error code within a log entry containing an array of codes.</li> <li>User Behavior Analysis:  Determine the position of a specific action within a user's sequence of actions on a website.</li> </ul> <p>Remember to replace <code>your_project</code>, <code>your_dataset</code>, and <code>your_region</code> with your actual values.  For example, if your dataset is in the <code>us-central1</code> region, you would use <code>bigfunctions.us_central1</code>.</p> Need help or Found a bug? Get help using <code>find_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>find_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/format_percentage/","title":"format_percentage","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_numeric</li> </ul>"},{"location":"bigfunctions/format_percentage/#format_percentage","title":"format_percentage","text":"<pre><code>format_percentage(first_number, second_number, nb_decimals)\n</code></pre>"},{"location":"bigfunctions/format_percentage/#description","title":"Description","text":"<p>Return <code>first_number / second_number</code> as a formatted percentage in a user-friendly format. You can use this function to handle a safe divide of the two numbers as well as your desired level of rounding.</p>"},{"location":"bigfunctions/format_percentage/#usage","title":"Usage","text":"Call or Deploy <code>format_percentage</code> ? Call <code>format_percentage</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>format_percentage</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>format_percentage</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>format_percentage</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>format_percentage</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get format_percentage\nbigfun deploy format_percentage\n</code></pre>"},{"location":"bigfunctions/format_percentage/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.format_percentage(1, 3, 2)\n</code></pre> <pre><code>select bigfunctions.us.format_percentage(1, 3, 2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.format_percentage(1, 3, 2)\n</code></pre> <pre>\n<code>+----------------------+\n| formatted_percentage |\n+----------------------+\n| 33.33 %              |\n+----------------------+\n</code>\n</pre>"},{"location":"bigfunctions/format_percentage/#use-cases","title":"Use cases","text":"<p>You're an analyst for an e-commerce company and you need to calculate and display the conversion rate for different marketing campaigns.  You have a table with the number of clicks and the number of resulting purchases for each campaign.</p> <pre><code>WITH campaign_data AS (\n    SELECT\n        'Campaign A' AS campaign_name,\n        1000 AS clicks,\n        50 AS purchases\n    UNION ALL\n    SELECT\n        'Campaign B' AS campaign_name,\n        500 AS clicks,\n        20 AS purchases\n    UNION ALL\n    SELECT\n        'Campaign C' AS campaign_name,\n        2000 AS clicks,\n        150 AS purchases\n\n)\n\nSELECT\n    campaign_name,\n    bigfunctions.us.format_percentage(purchases, clicks, 2) AS conversion_rate\nFROM campaign_data;\n</code></pre> <p>This query uses the <code>format_percentage</code> function to calculate the conversion rate (purchases / clicks) for each campaign and format it as a percentage with two decimal places.  The result would be a table like this:</p> <pre><code>+---------------+----------------+\n| campaign_name | conversion_rate |\n+---------------+----------------+\n| Campaign A    | 5.00 %         |\n| Campaign B    | 4.00 %         |\n| Campaign C    | 7.50 %         |\n+---------------+----------------+\n</code></pre> <p>This makes it easy to compare the effectiveness of different campaigns in a human-readable format.  You could also use this function to calculate and display other percentages, such as sales growth rates, discount percentages, or return rates.</p> Need help or Found a bug? Get help using <code>format_percentage</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>format_percentage</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/frequent_values/","title":"frequent_values","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/frequent_values/#frequent_values","title":"frequent_values","text":"<pre><code>frequent_values(values, frequency_threshold)\n</code></pre>"},{"location":"bigfunctions/frequent_values/#description","title":"Description","text":"<p>Returns <code>frequent_values</code> among array of <code>values</code></p> <p>This function computes the frequency of each value in <code>values</code> array and returns the values which frequency is stricly above the given <code>frequency_threshold</code>.</p>"},{"location":"bigfunctions/frequent_values/#usage","title":"Usage","text":"Call or Deploy <code>frequent_values</code> ? Call <code>frequent_values</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>frequent_values</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>frequent_values</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>frequent_values</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>frequent_values</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get frequent_values\nbigfun deploy frequent_values\n</code></pre>"},{"location":"bigfunctions/frequent_values/#examples","title":"Examples","text":"<p>Detect frequent strings in an array of strings with a <code>frequency_threshold</code> of 0.2. <code>banana</code> appears 3 times for an array of 6 elements so its frequency is 3 / 6 = 0.5 &gt; 0.4. It is a frequent string compared to the <code>frequency_threshold</code>.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.frequent_values(['apple', 'apple', 'banana', 'banana', 'banana', 'cherry'], 0.4)\n</code></pre> <pre><code>select bigfunctions.us.frequent_values(['apple', 'apple', 'banana', 'banana', 'banana', 'cherry'], 0.4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.frequent_values(['apple', 'apple', 'banana', 'banana', 'banana', 'cherry'], 0.4)\n</code></pre> <pre>\n<code>+-----------------+\n| frequent_values |\n+-----------------+\n| banana          |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/frequent_values/#use-cases","title":"Use cases","text":"<p>Let's say you have a BigQuery table storing customer product reviews.  Each row represents a review and includes a column named <code>keywords</code> which is an array of strings representing keywords extracted from the review text.</p> <p>You want to identify the most frequently occurring keywords across all reviews to understand trending topics or product features that customers frequently mention.</p> <p>Here's how you can use the <code>frequent_values</code> function:</p> <pre><code>SELECT bigfunctions.us.frequent_values(ARRAY_AGG(keywords), 0.05) AS frequent_keywords\nFROM `your_project.your_dataset.your_table`\n</code></pre> <p>This query does the following:</p> <ol> <li><code>ARRAY_AGG(keywords)</code>: Aggregates all the <code>keywords</code> arrays from each review into a single array of all keywords.</li> <li><code>bigfunctions.us.frequent_values(..., 0.05)</code>:  Applies the <code>frequent_values</code> function to this aggregated array with a <code>frequency_threshold</code> of 0.05.  This means that only keywords that appear in at least 5% of the reviews will be returned.</li> <li><code>AS frequent_keywords</code>: Aliases the resulting array of frequent keywords as <code>frequent_keywords</code>.</li> </ol> <p>This will give you an array of strings containing the keywords that occur most frequently in your customer reviews, allowing you to identify important themes and trends.</p> <p>Other Use Cases:</p> <ul> <li>Log analysis: Identify frequent error messages or user actions in log data.</li> <li>E-commerce: Find frequently purchased items together (market basket analysis).</li> <li>Social media analysis: Detect trending hashtags or topics.</li> <li>Genomics:  Identify frequently occurring gene mutations in a population.</li> </ul> <p>Essentially, any time you need to find frequently occurring elements within a large dataset of arrays, the <code>frequent_values</code> function can be a useful tool.</p> Need help or Found a bug? Get help using <code>frequent_values</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>frequent_values</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/generate_categories/","title":"generate_categories","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ai</li> </ul>"},{"location":"bigfunctions/generate_categories/#generate_categories","title":"generate_categories","text":"<pre><code>generate_categories(items)\n</code></pre>"},{"location":"bigfunctions/generate_categories/#description","title":"Description","text":"<p>Return <code>categories</code> of <code>items</code>.</p> <p>Using GenAi, this function generates a hierarchy of categories and subcategories that best represents the given <code>items</code>. (<code>items</code>: must be a json array of strings or or objects).</p> <p>Result is a json with the following schema:</p> <pre><code>{\n  categories: [\n    {\n      name: string,\n      subcategories: [\n        string\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"bigfunctions/generate_categories/#usage","title":"Usage","text":"Call or Deploy <code>generate_categories</code> ? Call <code>generate_categories</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>generate_categories</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>generate_categories</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>generate_categories</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>generate_categories</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get generate_categories\nbigfun deploy generate_categories\n</code></pre>"},{"location":"bigfunctions/generate_categories/#examples","title":"Examples","text":"<p>Categorize User Reviews of Nickel App in App Store</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.generate_categories(\n      (\n        select to_json(array_agg(content))\n        from bigfunctions.eu.get_appstore_reviews(\n          'https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763'\n        )\n      )\n      )\n</code></pre> <pre><code>select bigfunctions.us.generate_categories(\n      (\n        select to_json(array_agg(content))\n        from bigfunctions.us.get_appstore_reviews(\n          'https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763'\n        )\n      )\n      )\n</code></pre> <pre><code>select bigfunctions.europe_west1.generate_categories(\n      (\n        select to_json(array_agg(content))\n        from bigfunctions.europe_west1.get_appstore_reviews(\n          'https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763'\n        )\n      )\n      )\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| categories                                                                                                                                                       |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"categories\": [\n    {\n      \"name\": \"Account Management\",\n      \"subcategories\": [\n            \"Login Issues\",\n            ...\n      ]\n    },\n    ...\n  ]\n}\n |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/generate_categories/#use-cases","title":"Use cases","text":"<p>The <code>generate_categories</code> function is useful for automatically categorizing text data, particularly when you have a large collection of items and want to understand the main themes or topics discussed.  Here are a few specific use cases:</p> <ul> <li> <p>Customer Feedback Analysis:  Analyze customer reviews, support tickets, or survey responses to identify common issues, compliments, or feature requests.  The function can group similar feedback into categories, making it easier to understand customer sentiment and prioritize areas for improvement. The provided example shows how to categorize app store reviews, highlighting topics like \"Account Management,\" which might include subcategories like \"Login Issues.\"</p> </li> <li> <p>Product Categorization:  Automatically categorize products in an e-commerce setting based on their descriptions. This can improve search functionality, recommend related products, or organize product catalogs.  For example, if the input <code>items</code> are product descriptions like \"vintage leather jacket,\" \"stylish bomber jacket,\" and \"warm winter coat,\" the function might generate categories like \"Outerwear\" with subcategories \"Jackets\" and \"Coats.\"</p> </li> <li> <p>Topic Modeling for Research:  Analyze a collection of research papers, articles, or social media posts to identify the main topics discussed.  This can be helpful for literature reviews, trend analysis, or identifying areas for further research.</p> </li> <li> <p>Content Tagging:  Automatically tag articles, blog posts, or other content with relevant keywords or categories, making it easier for users to discover content that interests them.</p> </li> <li> <p>Support Ticket Routing:  Categorize incoming support tickets based on their descriptions to automatically route them to the appropriate support team.</p> </li> </ul> <p>In essence, any scenario where you need to group a large number of text items into meaningful categories could benefit from the <code>generate_categories</code> function. The use of GenAI allows the function to infer categories and subcategories even without predefined categories, making it flexible and adaptable to various data types.</p> Need help or Found a bug? Get help using <code>generate_categories</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>generate_categories</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/generate_dates/","title":"generate_dates","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_date</li> </ul>"},{"location":"bigfunctions/generate_dates/#generate_dates","title":"generate_dates","text":"<pre><code>generate_dates(start_date, end_date)\n</code></pre>"},{"location":"bigfunctions/generate_dates/#description","title":"Description","text":"<p>Generate a table of dates</p>"},{"location":"bigfunctions/generate_dates/#usage","title":"Usage","text":"Call or Deploy <code>generate_dates</code> ? Call <code>generate_dates</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>generate_dates</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>generate_dates</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>generate_dates</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>generate_dates</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get generate_dates\nbigfun deploy generate_dates\n</code></pre>"},{"location":"bigfunctions/generate_dates/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select * from bigfunctions.eu.generate_dates(date('2023-01-01'), date('2023-01-05'))\n</code></pre> <pre><code>select * from bigfunctions.us.generate_dates(date('2023-01-01'), date('2023-01-05'))\n</code></pre> <pre><code>select * from bigfunctions.europe_west1.generate_dates(date('2023-01-01'), date('2023-01-05'))\n</code></pre> <pre>\n<code>\n+------------+-------------+-------------------+-----------------+-------------------+-----------------+-------------+------------+---------------+-------------+\n|    date    | day_of_week | week_start_monday | week_end_monday | week_start_sunday | week_end_sunday | month_start | month_end  | quarter_start | quarter_end |\n+------------+-------------+-------------------+-----------------+-------------------+-----------------+-------------+------------+---------------+-------------+\n| 2023-01-01 |     Sun     |    2022-12-26     |    2023-01-01   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n| 2023-01-02 |     Mon     |    2023-01-02     |    2023-01-08   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n| 2023-01-03 |     Tue     |    2023-01-02     |    2023-01-08   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n| 2023-01-04 |     Wed     |    2023-01-02     |    2023-01-08   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n| 2023-01-05 |     Thu     |    2023-01-02     |    2023-01-08   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n+------------+-------------+-------------------+-----------------+-------------------+-----------------+-------------+------------+---------------+-------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/generate_dates/#use-cases","title":"Use cases","text":"<p>The <code>generate_dates</code> function is useful for several scenarios requiring a series of dates, including:</p> <ul> <li> <p>Generating time series data: If you need to analyze trends or patterns over time but only have data for certain dates, you could use <code>generate_dates</code> to create a complete date range and then join it with your existing data, filling in missing values as needed. For example, you might track daily website visits but have some gaps in your data. This function can help create a continuous date series.</p> </li> <li> <p>Creating date dimension tables for a data warehouse: A date dimension table is a common component of data warehouses.  It stores a comprehensive list of dates along with related attributes like day of week, week start/end dates, month start/end dates, quarter start/end dates, etc. <code>generate_dates</code> provides many of these attributes, facilitating the creation of such a table.</p> </li> <li> <p>Scheduling or automating tasks: You could use <code>generate_dates</code> to create a list of dates for a specific period, then use that list to schedule tasks or trigger automated processes. For example, you could generate a list of dates representing business days in the next month and then schedule a report to be generated on each of those dates.</p> </li> <li> <p>Backfilling or forecasting data: If you need to backfill missing data or generate forecasts for future periods, <code>generate_dates</code> can help provide the date framework. For backfilling, you'd specify a past date range, and for forecasting, you'd specify a future date range.</p> </li> <li> <p>Simplifying date calculations in queries: Instead of performing complex date calculations within a query, you can pre-calculate these values using <code>generate_dates</code> and store them in a table. This can make your queries simpler, easier to understand, and potentially more efficient.  For instance, determining the start of the week for various dates becomes a simple lookup rather than a calculation in each query.</p> </li> </ul> <p>Example:  Analyzing website traffic trends even with missing data points for specific dates.</p> <ol> <li>Generate a table of dates covering the period you want to analyze:</li> </ol> <pre><code>SELECT * FROM bigfunctions.us.generate_dates('2023-01-01', '2023-01-31');\n</code></pre> <ol> <li> <p>Join this generated table with your website traffic data table using the <code>date</code> field as the join key.</p> </li> <li> <p>You now have a row for each date, even if your original website traffic data was missing entries for some dates.  You can then use functions like <code>COALESCE</code> or <code>IFNULL</code> to fill in missing traffic values with zeros or other appropriate placeholders. This enables continuous trend analysis without being affected by missing data points.</p> </li> </ol> Need help or Found a bug? Get help using <code>generate_dates</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>generate_dates</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/generate_face_embedding/","title":"generate_face_embedding","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ai</li> </ul>"},{"location":"bigfunctions/generate_face_embedding/#generate_face_embedding","title":"generate_face_embedding","text":"<pre><code>generate_face_embedding(image_url)\n</code></pre>"},{"location":"bigfunctions/generate_face_embedding/#description","title":"Description","text":"<p>Detect Face on image and Generate its Embedding using deepface.</p> <ul> <li><code>image_url</code> is the url of a photo which contains a face. It can be a signed url of a cloud storage object. Then this function works well with object tables.</li> <li><code>output</code> is the output of <code>DeepFace.represent</code> method. It is like:</li> </ul> <pre><code>{\n  embedding: [...],      # A 4096 float vector\n  facial_areal: {...},   # Coordinated of detected face\n  face_confidence: 1.0,  # Confidence score for face detection\n}\n</code></pre>"},{"location":"bigfunctions/generate_face_embedding/#usage","title":"Usage","text":"Call or Deploy <code>generate_face_embedding</code> ? Call <code>generate_face_embedding</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>generate_face_embedding</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>generate_face_embedding</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>generate_face_embedding</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>generate_face_embedding</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get generate_face_embedding\nbigfun deploy generate_face_embedding\n</code></pre>"},{"location":"bigfunctions/generate_face_embedding/#examples","title":"Examples","text":"<p>Public test image from deepface</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.generate_face_embedding(\"https://raw.githubusercontent.com/serengil/deepface/master/tests/dataset/img1.jpg\")\n</code></pre> <pre><code>select bigfunctions.us.generate_face_embedding(\"https://raw.githubusercontent.com/serengil/deepface/master/tests/dataset/img1.jpg\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.generate_face_embedding(\"https://raw.githubusercontent.com/serengil/deepface/master/tests/dataset/img1.jpg\")\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------+\n| output                                                                  |\n+-------------------------------------------------------------------------+\n| {\n  embedding: [...],\n  facial_areal: {...},\n  face_confidence: 1.0,\n}\n |\n+-------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/generate_face_embedding/#use-cases","title":"Use cases","text":"<p>This <code>generate_face_embedding</code> function is useful for facial recognition tasks within BigQuery.  Here's a use case:</p> <p>Scenario: You have a large dataset of images stored in Google Cloud Storage, represented as an object table in BigQuery.  You want to identify all images that contain a specific person.</p> <p>Implementation using <code>generate_face_embedding</code>:</p> <ol> <li> <p>Pre-calculate the embedding of the target person:  Take a known image of the target person and use <code>generate_face_embedding</code> to calculate their facial embedding. Store this embedding (a vector of numbers) somewhere accessible, like a small BigQuery table.</p> </li> <li> <p>Process your image dataset: Query your object table and apply <code>generate_face_embedding</code> to the image URL column for each row.  This will generate facial embeddings for all faces detected in your dataset.</p> </li> <li> <p>Compare embeddings:  Use a BigQuery function (e.g., a user-defined function or a built-in function for vector similarity like cosine similarity) to compare the embeddings generated in step 2 with the target person's embedding from step 1.</p> </li> <li> <p>Filter based on similarity: Filter the results based on a similarity threshold. Images with embeddings that are highly similar to the target person's embedding likely contain the target person.</p> </li> </ol> <p>Example SQL Snippet (Illustrative):</p> <pre><code># Assuming 'target_embeddings' table contains pre-calculated embedding\n# and 'image_table' is your object table with 'image_url' column\n\nSELECT\n    image_url\nFROM\n    image_table\nWHERE EXISTS (\n    SELECT\n        1\n    FROM\n        target_embeddings\n    WHERE\n        cosine_similarity(bigfunctions.us.generate_face_embedding(image_table.image_url).embedding, target_embeddings.embedding) &gt; 0.9  -- Example threshold\n);\n</code></pre> <p>Benefits of using <code>generate_face_embedding</code> within BigQuery:</p> <ul> <li>Scalability: BigQuery's distributed processing power allows you to analyze massive image datasets efficiently.</li> <li>Integration: Seamlessly integrates with your existing BigQuery data and workflows.  No need to export data or use external tools.</li> <li>Cost-effectiveness: BigQuery's pricing model can be advantageous for large-scale processing compared to other solutions.</li> </ul> <p>Other Use Cases:</p> <ul> <li>Face clustering: Group similar faces together to identify different individuals in a dataset.</li> <li>Security and surveillance:  Identify known individuals in security footage.</li> <li>Image search: Search for images containing similar faces.</li> <li>Social media analysis: Analyze profile pictures for demographic information or to identify influencers.</li> </ul> Need help or Found a bug? Get help using <code>generate_face_embedding</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>generate_face_embedding</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/generate_sql/","title":"generate_sql","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ai</li> </ul>"},{"location":"bigfunctions/generate_sql/#generate_sql","title":"generate_sql","text":"<pre><code>generate_sql(question, fully_qualified_table)\n</code></pre>"},{"location":"bigfunctions/generate_sql/#description","title":"Description","text":"<p>Transform <code>question</code> to a SQL query.</p> <p>This function sends the following enriched question to <code>ask_ai</code> (the schema of <code>fully_qualified_table</code> is sent so that the generated SQL query is adapted to your data):</p> <pre><code>Question: {{question}}\nTable:    {{fully_qualified_table}}\nColumns:  {{columns of fully_qualified_table}}\nAnswer:   bigquery sql query\n</code></pre> Param Description <code>question</code> A question to ask over your data. It may start with a verb <code>fully_qualified_table</code> A table whose schema will be given to the generative AI model for context. - <code>fully_qualified_table</code> format must be like <code>PROJECT.DATASET.TABLE</code>.  - <code>fully_qualified_table</code> must exist.  - You must have read permission on the table schema"},{"location":"bigfunctions/generate_sql/#usage","title":"Usage","text":"Call or Deploy <code>generate_sql</code> ? Call <code>generate_sql</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>generate_sql</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>generate_sql</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>generate_sql</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>generate_sql</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get generate_sql\nbigfun deploy generate_sql\n</code></pre>"},{"location":"bigfunctions/generate_sql/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.generate_sql(\"get the 3 products which generated the most revenue in 2023\", \"bigfunctions.eu.sales\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.generate_sql(\"get the 3 products which generated the most revenue in 2023\", \"bigfunctions.us.sales\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.generate_sql(\"get the 3 products which generated the most revenue in 2023\", \"bigfunctions.europe_west1.sales\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+---------------+-------------------+-------------------------+\n| generated_sql | question          | raw_answer_before_clean |\n+---------------+-------------------+-------------------------+\n+ SELECT ...    + Question: get ... | sql``` SELECT...        |\n+---------------+-------------------+-------------------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/generate_sql/#use-cases","title":"Use cases","text":"<p>A use case for the <code>generate_sql</code> function is to quickly generate SQL queries from natural language questions for data analysis.  Imagine a business analyst who isn't proficient in SQL but needs to explore a BigQuery dataset called <code>my_project.sales_data.transactions</code>. They could use this function like so:</p> <pre><code>CALL bigfunctions.us.generate_sql(\n    'What are the top 5 selling products by revenue in Q1 2024?',\n    'my_project.sales_data.transactions'\n);\nSELECT * FROM bigfunction_result;\n</code></pre> <p>This call would send the question and the fully qualified table name to the <code>generate_sql</code> function. The function leverages a generative AI model (likely by internally calling <code>ask_ai</code>) to understand the question and the schema of the provided table (<code>my_project.sales_data.transactions</code>).  It then returns a generated SQL query in the <code>bigfunction_result</code> table. The analyst can then execute the generated SQL to get the desired results without having to write the query themselves.</p> <p>Benefits of this approach:</p> <ul> <li>Accessibility: Enables non-technical users to analyze data using natural language.</li> <li>Speed and Efficiency:  Quickly generates queries, saving time and effort.</li> <li>Exploration and Prototyping:  Facilitates quick data exploration and testing different hypotheses.</li> <li>Learning SQL:  Can be used as a learning tool to understand how natural language questions translate to SQL.</li> </ul> <p>Other Examples:</p> <ul> <li>Marketing Analyst: \"How many customers made their first purchase in the last month?\"</li> <li>Sales Manager: \"What is the average order value for customers in California?\"</li> <li>Product Manager: \"Which products have seen the biggest increase in sales this year?\"</li> </ul> <p>In each of these cases, the analyst can ask their question in plain English, and the <code>generate_sql</code> function takes care of translating it into a functional SQL query.</p> Need help or Found a bug? Get help using <code>generate_sql</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>generate_sql</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/geocode/","title":"geocode","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_geo_data</li> </ul>"},{"location":"bigfunctions/geocode/#geocode","title":"geocode","text":"<pre><code>geocode(address)\n</code></pre>"},{"location":"bigfunctions/geocode/#description","title":"Description","text":"<p>Get <code>address</code> details from Google Maps</p>"},{"location":"bigfunctions/geocode/#usage","title":"Usage","text":"Call or Deploy <code>geocode</code> ? Call <code>geocode</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>geocode</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>geocode</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>geocode</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>geocode</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get geocode\nbigfun deploy geocode\n</code></pre> <p>Requirements</p> <p><code>geocode</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>gmaps_api_key</code> Google Maps Api Key doc"},{"location":"bigfunctions/geocode/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.geocode(\"1 rue des champs elysees, Paris\")\n</code></pre> <pre><code>select bigfunctions.us.geocode(\"1 rue des champs elysees, Paris\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.geocode(\"1 rue des champs elysees, Paris\")\n</code></pre> <pre>\n<code>+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| address_details                                                                                                                                                                                                                                                                                                                                                 |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n    \"address_components\": [...],\n    \"formatted_address\": \"1 Av. des Champs-\u00c9lys\u00e9es, 75008 Paris, France\",\n    \"geometry\": {\n        \"location\": {\n            \"lat\": 48.86988770000001,\n            \"lng\": 2.3079341\n        },\n        ...\n    },\n    \"place_id\": \"ChIJ6499V8Rv5kcR5f9dbz3OeBI\",\n    \"plus_code\": {...},\n    \"types\": [\"street_address\"]\n}\n |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/geocode/#use-cases","title":"Use cases","text":"<p>A use case for the <code>geocode</code> function is to enrich a dataset of customer addresses with geographic information.</p> <p>Scenario: An e-commerce company has a table of customer data, including their addresses as text strings. They want to analyze sales by geographic region, calculate shipping distances, or visualize customer locations on a map.</p> <p>Implementation:</p> <ol> <li> <p>Data: The company has a BigQuery table named <code>customers</code> with columns like <code>customer_id</code>, <code>address</code>, etc.</p> </li> <li> <p>Geocoding: They use the <code>geocode</code> function to get the latitude, longitude, and other location details for each customer address.</p> </li> </ol> <p><pre><code>SELECT\n    customer_id,\n    address,\n    bigfunctions.us.geocode(address).geometry.location.lat AS latitude,\n    bigfunctions.us.geocode(address).geometry.location.lng AS longitude,\n    bigfunctions.us.geocode(address).formatted_address AS standardized_address\nFROM\n    `customers`;\n</code></pre> (Remember to replace <code>bigfunctions.us</code> with the appropriate dataset for your region.)</p> <ol> <li> <p>Enriched Data: The query above creates a new table (or you can save the results into a new column in the existing table) with the original customer data plus the derived <code>latitude</code>, <code>longitude</code>, and <code>standardized_address</code>.  The <code>standardized_address</code> is helpful for data cleaning and consistency.</p> </li> <li> <p>Downstream Analysis:  Now the company can use the latitude and longitude information for various analytical purposes:</p> <ul> <li>Sales Analysis by Region: Aggregate sales data based on customer location (e.g., total sales within a specific city or state).</li> <li>Shipping Optimization: Calculate distances between warehouses and customer locations to optimize delivery routes and estimate shipping costs.</li> <li>Customer Segmentation: Group customers based on proximity for targeted marketing campaigns.</li> <li>Data Visualization:  Visualize customer locations on a map to identify geographic patterns and trends.</li> </ul> </li> </ol> <p>Benefits:</p> <ul> <li>Improved Data Accuracy:  Geocoding standardizes addresses and provides accurate location data, which is crucial for accurate analysis.</li> <li>Enhanced Business Insights:  Geographic data enables deeper analysis of customer behavior and market trends.</li> <li>Operational Efficiency: Optimized shipping routes and targeted marketing campaigns lead to cost savings and increased revenue.</li> </ul> <p>This example illustrates a common use case for geocoding in business analytics. By leveraging the <code>geocode</code> function, companies can enrich their data with valuable location information and unlock new possibilities for analysis and decision-making.</p> Need help or Found a bug? Get help using <code>geocode</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>geocode</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/geocode_fr/","title":"geocode_fr","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_geo_data</li> </ul>"},{"location":"bigfunctions/geocode_fr/#geocode_fr","title":"geocode_fr","text":"<pre><code>geocode_fr(address)\n</code></pre>"},{"location":"bigfunctions/geocode_fr/#description","title":"Description","text":"<p>Get <code>address</code> details from api-adresse.data.gouv.fr</p>"},{"location":"bigfunctions/geocode_fr/#usage","title":"Usage","text":"Call or Deploy <code>geocode_fr</code> ? Call <code>geocode_fr</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>geocode_fr</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>geocode_fr</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>geocode_fr</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>geocode_fr</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get geocode_fr\nbigfun deploy geocode_fr\n</code></pre>"},{"location":"bigfunctions/geocode_fr/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.geocode_fr(\"1 rue des champs elysees, Paris\")\n</code></pre> <pre><code>select bigfunctions.us.geocode_fr(\"1 rue des champs elysees, Paris\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.geocode_fr(\"1 rue des champs elysees, Paris\")\n</code></pre> <pre>\n<code>+---------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| address_details                                                                                                                                               |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"latitude\": 48.871285,\n  \"longitude\": 2.302859,\n  \"result_label\": \"Avenue des Champs Elys\u00e9es 75008 Paris\",\n  \"result_score\": 0.7805588980716253,\n  ...\n}\n |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>geocode_fr</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>geocode_fr</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get/","title":"get","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>web</li> </ul>"},{"location":"bigfunctions/get/#get","title":"get","text":"<pre><code>get(url, headers)\n</code></pre>"},{"location":"bigfunctions/get/#description","title":"Description","text":"<p>Request <code>url</code></p>"},{"location":"bigfunctions/get/#usage","title":"Usage","text":"Call or Deploy <code>get</code> ? Call <code>get</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get\nbigfun deploy get\n</code></pre> Keep the secrets safe! <p>Do NOT write secrets in plain text in your SQL queries!</p> <p>Otherwise, anyone with access to your BigQuery logs can read and use them.</p> <p>Instead, generate an encrypted version that you can safely share:</p> <p> Encrypt Secret </p> <ol> <li>Enter a secret value below along with the emails of the users who are authorized to use it (separated by commas).</li> <li>Click on <code>Encrypt Secret</code>.</li> <li>The browser (no server is called) will generate an encrypted version and copy it in the clipboard</li> <li>Paste the encrypted secret into the arguments of your function exactly like if you passed the plain text version.</li> <li>The bigfunction will decrypt it and check that the calling user is authorized.</li> </ol> More on secret encryption <p>Technically, this encryption system uses the same encryption mechanism used to transfer data over the internet. It uses a pair of a public and private keys.</p> <p>The public key (contained in this web page) is used to encrypt a text. The corresponding private key is the only one who is able to decrypt the text. The private key is stored in a secret manager and is only accessible to this function. Thus, this function (and this function only) can decrypt it.</p> <p>Moreover, the function will check that the caller of the function belong to the list of <code>authorized users</code> that you gave at encryption time.</p> <p>Thanks to this:</p> <ul> <li>Nobody but this function will be able to decrypt it.</li> <li>Nobody but <code>authorized users</code> can use the encrypted version in a function.</li> <li>No function but the function <code>get</code> can decrypt it.</li> </ul>"},{"location":"bigfunctions/get/#examples","title":"Examples","text":"<p>1. Without headers</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get(\"https://unytics.io/bigfunctions/\", null)\n</code></pre> <pre><code>select bigfunctions.us.get(\"https://unytics.io/bigfunctions/\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get(\"https://unytics.io/bigfunctions/\", null)\n</code></pre> <pre>\n<code>+------------------------+\n| response               |\n+------------------------+\n| &amp;lt;html&gt;...&amp;lt;/html&gt; |\n+------------------------+\n</code>\n</pre> <p>2. With <code>Content-Type = application/json</code> headers</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get(\"https://api.github.com/repos/unytics/bigfunctions\", json_object('Content-Type', 'application/json'))\n</code></pre> <pre><code>select bigfunctions.us.get(\"https://api.github.com/repos/unytics/bigfunctions\", json_object('Content-Type', 'application/json'))\n</code></pre> <pre><code>select bigfunctions.europe_west1.get(\"https://api.github.com/repos/unytics/bigfunctions\", json_object('Content-Type', 'application/json'))\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| {...}    |\n+----------+\n</code>\n</pre> <p>3. With encrypted bearer token</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get(\"https://api.github.com/repos/unytics/bigfunctions_terraform\", json_object(\n        'Content-Type', 'application/json',\n        'Authorization', 'Bearer ENCRYPTED_SECRET(ioLZsCtEu5ZKu...)'\n      )\n      )\n</code></pre> <pre><code>select bigfunctions.us.get(\"https://api.github.com/repos/unytics/bigfunctions_terraform\", json_object(\n        'Content-Type', 'application/json',\n        'Authorization', 'Bearer ENCRYPTED_SECRET(ioLZsCtEu5ZKu...)'\n      )\n      )\n</code></pre> <pre><code>select bigfunctions.europe_west1.get(\"https://api.github.com/repos/unytics/bigfunctions_terraform\", json_object(\n        'Content-Type', 'application/json',\n        'Authorization', 'Bearer ENCRYPTED_SECRET(ioLZsCtEu5ZKu...)'\n      )\n      )\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| {...}    |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/get/#use-cases","title":"Use cases","text":"<p>This <code>get</code> BigQuery function allows you to make HTTP GET requests directly from within your BigQuery SQL queries.  Here are a few use cases:</p> <p>1. Enriching Data:</p> <p>Imagine you have a table of customer orders with country codes. You can use <code>get</code> to call a third-party geocoding API to get more detailed location information (like city and latitude/longitude) based on the country code, enriching your order data without leaving BigQuery.</p> <pre><code>SELECT\n    order_id,\n    bigfunctions.&lt;your-region&gt;.get(CONCAT('https://geocoding-api.example.com/?country=', country_code), CAST('{\"Content-Type\": \"application/json\"}' as JSON)) as geo_data\nFROM\n    `your_project.your_dataset.orders`;\n</code></pre> <p>2. Monitoring External Services:</p> <p>You can periodically call a health check endpoint of your services using <code>get</code> within a scheduled query.  This lets you monitor the uptime and response times of your services directly from BigQuery and potentially trigger alerts based on the returned status.</p> <pre><code>SELECT\n    CURRENT_TIMESTAMP() as check_time,\n    bigfunctions.&lt;your-region&gt;.get('https://your-service.example.com/healthcheck', null) as health_status;\n</code></pre> <p>3. Retrieving Current Data:</p> <p>Suppose you need up-to-the-minute exchange rates for currency conversions.  You could use <code>get</code> to fetch the latest rates from a financial API within your query, ensuring your conversions are always based on the most current data.</p> <pre><code>SELECT\n    transaction_amount,\n    JSON_VALUE(bigfunctions.&lt;your-region&gt;.get('https://financial-api.example.com/exchange_rates', CAST('{\"Content-Type\": \"application/json\"}' as JSON)), '$.USD_to_EUR') AS exchange_rate\nFROM\n    `your_project.your_dataset.transactions`;\n</code></pre> <p>4. Simple Web Scraping (Caution):</p> <p>While not its primary purpose, <code>get</code> can be used for basic web scraping tasks. For example, retrieving the current price of a product from a publicly accessible website.  However, be mindful of the website's terms of service and rate limiting policies.  Dedicated web scraping tools are generally more robust and suitable for complex scraping tasks.</p> <pre><code>SELECT\n    REGEXP_EXTRACT(bigfunctions.&lt;your-region&gt;.get('https://example.com/product-page', null), '&lt;price&gt;(.*?)&lt;/price&gt;') AS product_price;\n</code></pre> <p>Key Considerations:</p> <ul> <li>Rate Limiting:  Be aware of potential rate limits imposed by the APIs or websites you are calling. Implement appropriate retry mechanisms and backoff strategies to avoid overloading external services.</li> <li>Error Handling:  Handle potential errors gracefully. The <code>get</code> function might return error codes or empty responses if the external service is unavailable or there are network issues.  Include error handling in your SQL to manage such scenarios.</li> <li>Data Volume and Cost:  Making a large number of external requests can impact query performance and incur costs, especially if the responses are substantial. Consider caching responses where appropriate to reduce the number of calls.</li> <li>Security:  Avoid exposing sensitive information (like API keys) directly in your SQL queries. Use BigQuery authorized networks or alternative secure methods for accessing protected resources.</li> </ul> <p>By carefully considering these factors, you can leverage the <code>get</code> BigQuery function to effectively integrate external data and services into your data analysis workflows.</p> Need help or Found a bug? Get help using <code>get</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_appstore_reviews/","title":"get_appstore_reviews","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>public_services</li> </ul>"},{"location":"bigfunctions/get_appstore_reviews/#get_appstore_reviews","title":"get_appstore_reviews","text":"<pre><code>get_appstore_reviews(url)\n</code></pre>"},{"location":"bigfunctions/get_appstore_reviews/#description","title":"Description","text":"<p>GET Apple App Store Reviews of an app given its <code>url</code></p>"},{"location":"bigfunctions/get_appstore_reviews/#usage","title":"Usage","text":"Call or Deploy <code>get_appstore_reviews</code> ? Call <code>get_appstore_reviews</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_appstore_reviews</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_appstore_reviews</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_appstore_reviews</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_appstore_reviews</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_appstore_reviews\nbigfun deploy get_appstore_reviews\n</code></pre>"},{"location":"bigfunctions/get_appstore_reviews/#examples","title":"Examples","text":"<p>Get customer reviews of Nickel App in App Store</p> EUUSeurope-west1 <pre><code>select * from bigfunctions.eu.get_appstore_reviews(\"https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763\")\n</code></pre> <pre><code>select * from bigfunctions.us.get_appstore_reviews(\"https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763\")\n</code></pre> <pre><code>select * from bigfunctions.europe_west1.get_appstore_reviews(\"https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763\")\n</code></pre> <pre>\n<code>\n| ---------------------------------------------------|\n| rating | content                                   |\n| ---------------------------------------------------|\n|    5   | Very simple to use                        |\n|        |                                           |\n|    5   | I advise you perfectly,                   |\n|        | I have been with them for 5 years now,    |\n|        | I have never had a problem.               |\n|        |                                           |\n|    5   | Really great. I opted for the black card. |\n|        |                                           |\n|        | ...                                       |\n| ---------------------------------------------------|\n\n</code>\n</pre>"},{"location":"bigfunctions/get_appstore_reviews/#use-cases","title":"Use cases","text":"<p>A market research team wants to analyze user sentiment towards a competitor's mobile application. They can use the <code>get_appstore_reviews</code> function to retrieve all user reviews for the competitor's app from the Apple App Store.  The team can then perform the following actions:</p> <ul> <li>Sentiment Analysis:  Process the text of the reviews to determine the overall sentiment (positive, negative, neutral) expressed by users. This can provide insights into the strengths and weaknesses of the competitor's app as perceived by users.</li> <li>Feature Analysis: Identify frequently mentioned features or functionalities within the reviews. This helps understand what users like or dislike about the competitor's app and can inform feature development for their own app.</li> <li>Issue Tracking: Detect recurring complaints or issues reported by users.  This can help the team understand potential problems with the competitor's app and proactively address similar concerns in their own development.</li> <li>Competitive Benchmarking: Compare user ratings and reviews of the competitor's app with their own to gauge their relative performance and identify areas for improvement.</li> <li>Marketing &amp; Strategy:  Understand the language and tone used by users in their reviews. This can help craft more effective marketing messages and target specific user needs.</li> </ul> <p>Example:  Let's say the competitor's app is \"Fitness Tracker X\" and its App Store URL is known.  The market research team can use the BigQuery function like this (using the US region as an example):</p> <pre><code>SELECT *\nFROM bigfunctions.us.get_appstore_reviews('https://apps.apple.com/us/app/fitness-tracker-x/some_app_id')\n</code></pre> <p>This query will return a table with the reviews and ratings for \"Fitness Tracker X.\" The team can then further process this data for sentiment analysis, feature analysis, etc.  They could also store the results in a BigQuery table for ongoing monitoring of user reviews over time.</p> Need help or Found a bug? Get help using <code>get_appstore_reviews</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_appstore_reviews</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_daily_jobs_cost/","title":"get_daily_jobs_cost","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/get_daily_jobs_cost/#get_daily_jobs_cost","title":"get_daily_jobs_cost","text":"<pre><code>get_daily_jobs_cost(project, nb_days)\n</code></pre>"},{"location":"bigfunctions/get_daily_jobs_cost/#description","title":"Description","text":"<p>Get daily jobs cost into <code>daily_jobs_cost</code> temporary table</p>"},{"location":"bigfunctions/get_daily_jobs_cost/#usage","title":"Usage","text":"Call or Deploy <code>get_daily_jobs_cost</code> ? Call <code>get_daily_jobs_cost</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_daily_jobs_cost</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_daily_jobs_cost</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_daily_jobs_cost</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_daily_jobs_cost</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_daily_jobs_cost\nbigfun deploy get_daily_jobs_cost\n</code></pre>"},{"location":"bigfunctions/get_daily_jobs_cost/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.get_daily_jobs_cost(\"your-project\");\n</code></pre> <pre><code>call bigfunctions.us.get_daily_jobs_cost(\"your-project\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.get_daily_jobs_cost(\"your-project\");\n</code></pre> Need help or Found a bug? Get help using <code>get_daily_jobs_cost</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_daily_jobs_cost</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_data_from_apify/","title":"get_data_from_apify","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>web</li> </ul>"},{"location":"bigfunctions/get_data_from_apify/#get_data_from_apify","title":"get_data_from_apify","text":"<pre><code>get_data_from_apify(actor, input, api_token)\n</code></pre>"},{"location":"bigfunctions/get_data_from_apify/#description","title":"Description","text":"<p>Get data using an apify <code>actor</code>.</p> <p>Requirements</p> <p>You must create an account on apify and rent an actor to be able to get data from it.</p>"},{"location":"bigfunctions/get_data_from_apify/#usage","title":"Usage","text":"Call or Deploy <code>get_data_from_apify</code> ? Call <code>get_data_from_apify</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_data_from_apify</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_data_from_apify</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_data_from_apify</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_data_from_apify</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_data_from_apify\nbigfun deploy get_data_from_apify\n</code></pre> Keep the secrets safe! <p>Do NOT write secrets in plain text in your SQL queries!</p> <p>Otherwise, anyone with access to your BigQuery logs can read and use them.</p> <p>Instead, generate an encrypted version that you can safely share:</p> <p> Encrypt Secret </p> <ol> <li>Enter a secret value below along with the emails of the users who are authorized to use it (separated by commas).</li> <li>Click on <code>Encrypt Secret</code>.</li> <li>The browser (no server is called) will generate an encrypted version and copy it in the clipboard</li> <li>Paste the encrypted secret into the arguments of your function exactly like if you passed the plain text version.</li> <li>The bigfunction will decrypt it and check that the calling user is authorized.</li> </ol> More on secret encryption <p>Technically, this encryption system uses the same encryption mechanism used to transfer data over the internet. It uses a pair of a public and private keys.</p> <p>The public key (contained in this web page) is used to encrypt a text. The corresponding private key is the only one who is able to decrypt the text. The private key is stored in a secret manager and is only accessible to this function. Thus, this function (and this function only) can decrypt it.</p> <p>Moreover, the function will check that the caller of the function belong to the list of <code>authorized users</code> that you gave at encryption time.</p> <p>Thanks to this:</p> <ul> <li>Nobody but this function will be able to decrypt it.</li> <li>Nobody but <code>authorized users</code> can use the encrypted version in a function.</li> <li>No function but the function <code>get_data_from_apify</code> can decrypt it.</li> </ul>"},{"location":"bigfunctions/get_data_from_apify/#examples","title":"Examples","text":"<p>Get PSG followers on instagram</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_data_from_apify(\"apify/instagram-followers-count-scraper\", json '{ \"usernames\": [\"psg\"] }', \"ENCRYPTED_SECRET(Eu5XjDuxO1IBPOAN0U...==)\")\n</code></pre> <pre><code>select bigfunctions.us.get_data_from_apify(\"apify/instagram-followers-count-scraper\", json '{ \"usernames\": [\"psg\"] }', \"ENCRYPTED_SECRET(Eu5XjDuxO1IBPOAN0U...==)\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_data_from_apify(\"apify/instagram-followers-count-scraper\", json '{ \"usernames\": [\"psg\"] }', \"ENCRYPTED_SECRET(Eu5XjDuxO1IBPOAN0U...==)\")\n</code></pre> <pre>\n<coden| data                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\nn| [\n  {\n    \"followersCount\": 62841046,\n    \"followsCount\": 168,\n    \"profilePic\": \"https://instagram.fmel7-1.fna.fbcdn.net/v/t51.2885-19/449700979_1506857413562380_7088351830712502452_n.jpg?stp=dst-jpg_e0_s150x150_tt6&amp;_nc_ht=instagram.fmel7-1.fna.fbcdn.net&amp;_nc_cat=1&amp;_nc_oc=Q6cZ2AF9oFgyWnsA4x8tu8w5Rr1J_mI9FoabJNg7fHkelZ6jSaMwUSor_QZNs9IQ-iRs_iw&amp;_nc_ohc=gUrxGWpcWb4Q7kNvgEJE0ih&amp;_nc_gid=cb1d2f086b814adca4020f9401c84a32&amp;edm=AOQ1c0wBAAAA&amp;ccb=7-5&amp;oh=00_AYBbHG5DjV1qxsQhy0IaD0_d51XzY0LAcRhK2Fx1lnjRKA&amp;oe=67B4E610&amp;_nc_sid=8b3546\",\n    \"timestamp\": \"2025-02-14 - 11:22\",\n    \"userFullName\": \"Paris Saint-Germain\",\n    \"userId\": \"232024162\",\n    \"userName\": \"psg\",\n    \"userUrl\": \"https://www.instagram.com/psg\"\n  }\n]\n |\n+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>get_data_from_apify</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_data_from_apify</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_github_data/","title":"get_github_data","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>public_services</li> </ul>"},{"location":"bigfunctions/get_github_data/#get_github_data","title":"get_github_data","text":"<pre><code>get_github_data(public_repo, destination_dataset, streams)\n</code></pre>"},{"location":"bigfunctions/get_github_data/#description","title":"Description","text":"<p>Get data from <code>public_repo</code> into <code>destination_dataset</code> (using GitHub Airbyte Connector with Airbyte-Serverless)</p> <p>Data is appended in raw format in tables (one table per stream) into <code>destination_dataset</code>. When supported by the stream, data is extracted incrementally (next execution will only retrieve new rows).</p> <p>You must create the <code>destination_dataset</code> and give <code>dataEditor</code> access to <code>bigfunction@bigfunctions.iam.gserviceaccount.com</code> before calling this function. You can do this by executing:</p> <pre><code>-- Create Destination Dataset\ncreate schema `your_project.your_dataset`;\n\n-- Grant Access to Destination Dataset\ngrant `roles/bigquery.dataEditor`\non schema `your_project.your_dataset`\nto 'serviceAccount:bigfunction@bigfunctions.iam.gserviceaccount.com';\n</code></pre> <p>While it's running (or after) you can explore logs in table <code>your_project.your_dataset._airbyte_logs</code></p>"},{"location":"bigfunctions/get_github_data/#usage","title":"Usage","text":"Call or Deploy <code>get_github_data</code> ? Call <code>get_github_data</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_github_data</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_github_data</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_github_data</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_github_data</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_github_data\nbigfun deploy get_github_data\n</code></pre> <p>Requirements</p> <p><code>get_github_data</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>github_personal_access_token</code> GitHub Personal Access Token for public repositories doc"},{"location":"bigfunctions/get_github_data/#examples","title":"Examples","text":"<p>1. Get stargazers from airbytehq/airbyte repository</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_github_data(\"airbytehq/airbyte\", \"your_project.your_dataset\", \"stargazers\")\n</code></pre> <pre><code>select bigfunctions.us.get_github_data(\"airbytehq/airbyte\", \"your_project.your_dataset\", \"stargazers\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_github_data(\"airbytehq/airbyte\", \"your_project.your_dataset\", \"stargazers\")\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| ok     |\n+--------+\n</code>\n</pre> <p>2. Get stargazers AND releases from airbytehq/airbyte repository</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_github_data(\"airbytehq/airbyte\", \"your_project.your_dataset\", \"stargazers, releases\")\n</code></pre> <pre><code>select bigfunctions.us.get_github_data(\"airbytehq/airbyte\", \"your_project.your_dataset\", \"stargazers, releases\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_github_data(\"airbytehq/airbyte\", \"your_project.your_dataset\", \"stargazers, releases\")\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| ok     |\n+--------+\n</code>\n</pre> <p>3. To get a list of available streams, let <code>streams</code> param to null</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_github_data(\"airbytehq/airbyte\", \"your_project.your_dataset\", null)\n</code></pre> <pre><code>select bigfunctions.us.get_github_data(\"airbytehq/airbyte\", \"your_project.your_dataset\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_github_data(\"airbytehq/airbyte\", \"your_project.your_dataset\", null)\n</code></pre> <pre>\n<coden| result|\nn| issue_timeline_events,assignees,branches,collaborators,comments,commit_comment_reactions,commit_comments,commits,contributor_activity,deployments,events,issue_comment_reactions,issue_events,issue_labels,issue_milestones,issue_reactions,issues,organizations,project_cards,project_columns,projects,pull_request_comment_reactions,pull_request_commits,pull_request_stats,projects_v2,pull_requests,releases,repositories,review_comments,reviews,stargazers,tags,teams,team_members,users,workflows,workflow_runs,workflow_jobs,team_memberships |\nn</code>\n</pre>"},{"location":"bigfunctions/get_github_data/#use-cases","title":"Use cases","text":"<p>A data analyst wants to analyze the activity on the <code>dbt-labs/dbt-core</code> GitHub repository.  They are particularly interested in tracking the number of stargazers over time, identifying key contributors through commits, and understanding the release history.  They can use the <code>get_github_data</code> BigQuery function to import this data directly into BigQuery for analysis.</p> <p>Here's how they would use the function:</p> <ol> <li>Prepare the destination dataset:</li> </ol> <pre><code>-- Create the dataset\nCREATE SCHEMA `my_project.github_data`;\n\n-- Grant access to the BigFunctions service account\nGRANT `roles/bigquery.dataEditor`\nON SCHEMA `my_project.github_data`\nTO 'serviceAccount:bigfunction@bigfunctions.iam.gserviceaccount.com';\n</code></pre> <ol> <li>Import the data using the function:</li> </ol> <pre><code>SELECT bigfunctions.us.get_github_data('dbt-labs/dbt-core', 'my_project.github_data', 'stargazers, commits, releases');\n</code></pre> <p>This call will import data for the specified streams (<code>stargazers</code>, <code>commits</code>, and <code>releases</code>) into tables within the <code>my_project.github_data</code> dataset.  For instance, the stargazer data will likely be in a table named <code>my_project.github_data.stargazers</code>.</p> <ol> <li>Analyze the data in BigQuery:</li> </ol> <p>Now the analyst can use standard SQL queries to analyze the imported data.  For example:</p> <pre><code>-- Track stargazer growth over time\nSELECT DATE(starred_at) AS star_date, COUNT(*) AS num_stars\nFROM `my_project.github_data.stargazers`\nGROUP BY star_date\nORDER BY star_date;\n\n-- Identify top contributors\nSELECT author.login, COUNT(*) AS num_commits\nFROM `my_project.github_data.commits`\nGROUP BY author.login\nORDER BY num_commits DESC;\n\n-- Explore release history\nSELECT name, tag_name, published_at\nFROM `my_project.github_data.releases`\nORDER BY published_at DESC;\n</code></pre> <p>This use case demonstrates how the <code>get_github_data</code> function simplifies the process of importing and analyzing GitHub repository data within BigQuery, enabling data-driven insights into project activity and community engagement.</p> Need help or Found a bug? Get help using <code>get_github_data</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_github_data</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_json/","title":"get_json","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>saas</li> </ul>"},{"location":"bigfunctions/get_json/#get_json","title":"get_json","text":"<pre><code>get_json(url, headers)\n</code></pre>"},{"location":"bigfunctions/get_json/#description","title":"Description","text":"<p>GET json <code>data</code> from <code>url</code></p>"},{"location":"bigfunctions/get_json/#usage","title":"Usage","text":"Call or Deploy <code>get_json</code> ? Call <code>get_json</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_json</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_json</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_json</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_json</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_json\nbigfun deploy get_json\n</code></pre>"},{"location":"bigfunctions/get_json/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_json(\"https://api.github.com/repos/unytics/bigfunctions\", null)\n</code></pre> <pre><code>select bigfunctions.us.get_json(\"https://api.github.com/repos/unytics/bigfunctions\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_json(\"https://api.github.com/repos/unytics/bigfunctions\", null)\n</code></pre> <pre>\n<code>+-------+\n| data  |\n+-------+\n| {...} |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/get_json/#use-cases","title":"Use cases","text":"<p>A use case for the <code>get_json</code> function is enriching data in BigQuery with information from an external API.</p> <p>Scenario: You have a table in BigQuery containing information about GitHub repositories, including their names. You want to enrich this data with details like the number of stars, forks, and open issues for each repository.  The GitHub API provides this information in JSON format.</p> <p>Implementation:</p> <ol> <li> <p>BigQuery Table: Let's assume your BigQuery table is named <code>github_repos</code> and has a column named <code>repo_name</code> containing the names of the repositories (e.g., \"unytics/bigfunctions\").</p> </li> <li> <p>BigQuery Query using <code>get_json</code>: You can use the following query to fetch data from the GitHub API and extract the desired information:</p> </li> </ol> <pre><code>SELECT\n    repo_name,\n    JSON_EXTRACT_SCALAR(get_json(CONCAT('https://api.github.com/repos/', repo_name), NULL), '$.stargazers_count') AS stars,\n    JSON_EXTRACT_SCALAR(get_json(CONCAT('https://api.github.com/repos/', repo_name), NULL), '$.forks_count') AS forks,\n    JSON_EXTRACT_SCALAR(get_json(CONCAT('https://api.github.com/repos/', repo_name), NULL), '$.open_issues_count') AS open_issues\nFROM\n    `your-project.your-dataset.github_repos`;\n</code></pre> <p>Explanation:</p> <ul> <li><code>CONCAT('https://api.github.com/repos/', repo_name)</code> dynamically constructs the URL for each repository's API endpoint.</li> <li><code>get_json(..., NULL)</code> fetches the JSON data from the constructed URL. The second argument <code>NULL</code> indicates that no custom headers are needed for this request.</li> <li><code>JSON_EXTRACT_SCALAR(..., '$.stargazers_count')</code> extracts the value associated with the key <code>stargazers_count</code> from the JSON response. Similarly, we extract <code>forks_count</code> and <code>open_issues_count</code>.</li> <li>Remember to replace  <code>your-project.your-dataset.github_repos</code> with the actual path to your BigQuery table and select the correct regional dataset for <code>bigfunctions</code> (e.g., <code>bigfunctions.us</code>, <code>bigfunctions.eu</code>).</li> </ul> <p>Result: This query will produce a new table with the original <code>repo_name</code> and the newly fetched <code>stars</code>, <code>forks</code>, and <code>open_issues</code> columns.</p> <p>This example demonstrates how <code>get_json</code> can be used to integrate external API data directly into BigQuery for analysis and reporting, avoiding the need for intermediate data extraction and loading steps.  You can adapt this pattern to interact with other APIs that provide JSON data.</p> Need help or Found a bug? Get help using <code>get_json</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_json</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_latest_partition_timestamp/","title":"get_latest_partition_timestamp","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/get_latest_partition_timestamp/#get_latest_partition_timestamp","title":"get_latest_partition_timestamp","text":"<pre><code>get_latest_partition_timestamp(fully_qualified_table)\n</code></pre>"},{"location":"bigfunctions/get_latest_partition_timestamp/#description","title":"Description","text":"<p>Return the maximum of the partition column of <code>fully_qualified_table</code></p>"},{"location":"bigfunctions/get_latest_partition_timestamp/#usage","title":"Usage","text":"Call or Deploy <code>get_latest_partition_timestamp</code> ? Call <code>get_latest_partition_timestamp</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_latest_partition_timestamp</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_latest_partition_timestamp</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_latest_partition_timestamp</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_latest_partition_timestamp</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_latest_partition_timestamp\nbigfun deploy get_latest_partition_timestamp\n</code></pre>"},{"location":"bigfunctions/get_latest_partition_timestamp/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.get_latest_partition_timestamp(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.get_latest_partition_timestamp(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.get_latest_partition_timestamp(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+----------------------------+\n| latest_partition_timestamp |\n+----------------------------+\n|         2023-01-10         |\n+----------------------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/get_latest_partition_timestamp/#use-cases","title":"Use cases","text":"<p>Let's say you have a BigQuery table called <code>my_project.my_dataset.event_logs</code> that is partitioned by day on a column named <code>event_date</code>.  You want to find the date of the most recent events logged in that table. You can use <code>get_latest_partition_timestamp</code> for this:</p> <pre><code>SELECT * FROM bigfunctions.us.get_latest_partition_timestamp('my_project.my_dataset.event_logs');\nSELECT * FROM bigfunction_result; -- To see the result\n</code></pre> <p>This will return a table with one row and one column, <code>latest_partition_timestamp</code>, containing the latest date for which a partition exists.</p> <p>Other Use Cases:</p> <ul> <li>Data ingestion pipelines: Determine if new data has arrived since the last pipeline run.  You can compare the latest partition timestamp with the timestamp of the last processed data.</li> <li>Report generation: Automatically filter reports to include only the most recent data.  For example, a daily report could use this function to determine the date to filter on.</li> <li>Monitoring: Track the recency of data in different tables.  Regularly call this function on key tables and alert if the latest partition timestamp is older than expected.</li> <li>Data quality checks: Verify that partitions are being created as expected. For instance, if you expect daily partitions, you can check if the latest partition timestamp is within the last 24 hours.</li> </ul> <p>Important Considerations:</p> <ul> <li>Partitioning Column: The table must be partitioned, and the function will return the maximum value of the partitioning column.</li> <li>Data Type: The partitioning column's data type will determine the returned timestamp format.  If the partitioning column is DATE, the function will return a date.  If it's TIMESTAMP, it will return a timestamp.</li> <li>Empty Partitions: The function returns the latest partition regardless of whether that partition contains data.  An empty partition will still be considered the latest.</li> <li>Region: Remember to use the correct BigFunctions dataset for your region (e.g., <code>bigfunctions.us</code> for US, <code>bigfunctions.eu</code> for EU).  See the documentation for the full list of regions.</li> </ul> Need help or Found a bug? Get help using <code>get_latest_partition_timestamp</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_latest_partition_timestamp</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_meteo/","title":"get_meteo","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>public_services</li> </ul>"},{"location":"bigfunctions/get_meteo/#get_meteo","title":"get_meteo","text":"<pre><code>get_meteo(latitude, longitude, date)\n</code></pre>"},{"location":"bigfunctions/get_meteo/#description","title":"Description","text":"<p>Get <code>meteo</code> for <code>latitude</code> , <code>longitude</code> and <code>date</code></p>"},{"location":"bigfunctions/get_meteo/#usage","title":"Usage","text":"Call or Deploy <code>get_meteo</code> ? Call <code>get_meteo</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_meteo</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_meteo</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_meteo</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_meteo</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_meteo\nbigfun deploy get_meteo\n</code></pre>"},{"location":"bigfunctions/get_meteo/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_meteo(52.52, 13.41, \"2023-05-10\")\n</code></pre> <pre><code>select bigfunctions.us.get_meteo(52.52, 13.41, \"2023-05-10\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_meteo(52.52, 13.41, \"2023-05-10\")\n</code></pre> <pre>\n<code>+-------+\n| meteo |\n+-------+\n| {...} |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/get_meteo/#use-cases","title":"Use cases","text":"<p>This <code>get_meteo</code> function appears to retrieve meteorological data (likely temperature, precipitation, wind, etc.) based on a given latitude, longitude, and date.</p> <p>Here's a potential use case:</p> <p>Analyzing the impact of weather on sales for a retail chain.</p> <p>Imagine a retail company with stores across various locations. They want to understand how weather conditions influence daily sales.  They could use this function in the following way:</p> <ol> <li> <p>Data Preparation:  They have a BigQuery table with daily sales data for each store, including the store's location (latitude and longitude) and the date of the sales.</p> </li> <li> <p>Enriching Sales Data with Weather:  They can use the <code>get_meteo</code> function within a BigQuery query to add weather information to their sales data.  For example:</p> </li> </ol> <pre><code>SELECT\n    sales.*,\n    bigfunctions.us.get_meteo(sales.latitude, sales.longitude, sales.date) AS weather_data\nFROM\n    `project.dataset.sales_table` AS sales;\n</code></pre> <p>(Assuming the sales table is in the US region. Adjust the dataset name according to the table's location).</p> <ol> <li> <p>Analysis: Now they have a combined table with sales and corresponding weather data.  They can analyze this data to identify correlations and patterns. For example:</p> <ul> <li>Do rainy days lead to increased sales of umbrellas or indoor games?</li> <li>Does hot weather boost sales of ice cream and cold drinks?</li> <li>Does extreme weather (heavy snow, heat waves) negatively impact overall sales?</li> </ul> </li> <li> <p>Predictive Modeling: This enriched data can be used to train machine learning models to predict future sales based on weather forecasts.</p> </li> </ol> <p>Other potential use cases:</p> <ul> <li>Agriculture: Analyzing historical weather patterns to optimize planting and harvesting schedules.</li> <li>Real Estate:  Understanding the climate of different locations for property valuation and development.</li> <li>Tourism: Providing weather information to tourists planning their trips.</li> <li>Insurance: Assessing weather-related risks for pricing policies.</li> </ul> <p>Essentially, anytime you need to combine location-based data with historical or current weather information within BigQuery, the <code>get_meteo</code> function could be a valuable tool.  The documentation emphasizes its ease of use by being directly callable within BigQuery without needing to deploy it separately.</p> Need help or Found a bug? Get help using <code>get_meteo</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_meteo</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_playstore_reviews/","title":"get_playstore_reviews","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>public_services</li> </ul>"},{"location":"bigfunctions/get_playstore_reviews/#get_playstore_reviews","title":"get_playstore_reviews","text":"<pre><code>get_playstore_reviews(app_id, country, language)\n</code></pre>"},{"location":"bigfunctions/get_playstore_reviews/#description","title":"Description","text":"<p>GET Google Play Store Reviews of an app (using google-play-scraper)</p> <ul> <li><code>app_id</code> can be found in the url of the app on the play store. For example for url <code>https://play.google.com/store/apps/details?id=com.fpe.comptenickel&amp;hl=en&amp;pli=1</code>, the <code>app_id</code> is <code>com.fpe.comptenickel</code></li> <li><code>country</code> is the two-letter country iso code of the device where the app was downloaded</li> <li><code>language</code> is the two-letter language iso code of the review</li> </ul> <p>The function will return the 600 newest <code>reviews</code> as json.</p>"},{"location":"bigfunctions/get_playstore_reviews/#usage","title":"Usage","text":"Call or Deploy <code>get_playstore_reviews</code> ? Call <code>get_playstore_reviews</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_playstore_reviews</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_playstore_reviews</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_playstore_reviews</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_playstore_reviews</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_playstore_reviews\nbigfun deploy get_playstore_reviews\n</code></pre>"},{"location":"bigfunctions/get_playstore_reviews/#examples","title":"Examples","text":"<p>GET reviews written in English for Nickel App installed on French devices</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_playstore_reviews(\"com.fpe.comptenickel\", \"fr\", \"en\")\n</code></pre> <pre><code>select bigfunctions.us.get_playstore_reviews(\"com.fpe.comptenickel\", \"fr\", \"en\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_playstore_reviews(\"com.fpe.comptenickel\", \"fr\", \"en\")\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| reviews                                                                                                                                                      |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n  {\n    appVersion: \"2.90.0\"\n    at: \"Thu, 19 Sep 2024 10:44:05 GMT\",\n    content: \"...\",\n    repliedAt: ...,\n    replyContent: ...,\n    ...\n  },\n  ...\n]\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/get_playstore_reviews/#use-cases","title":"Use cases","text":"<p>A market research team wants to analyze user sentiment towards a specific mobile application (e.g., \"Nickel App\" with app ID <code>com.fpe.comptenickel</code>) across different regions. They want to understand how French users who have downloaded the app and written their review in English perceive the app.  To achieve this, they would use the <code>get_playstore_reviews</code> BigQuery function with the following parameters:</p> <ul> <li><code>app_id</code>: <code>com.fpe.comptenickel</code></li> <li><code>country</code>: <code>fr</code> (France)</li> <li><code>language</code>: <code>en</code> (English)</li> </ul> <p>They would then execute a query like this (adjusting the dataset <code>bigfunctions.us</code> to match their BigQuery region):</p> <pre><code>SELECT * FROM UNNEST(JSON_EXTRACT_ARRAY(bigfunctions.us.get_playstore_reviews('com.fpe.comptenickel', 'fr', 'en'), '$.reviews')) AS review;\n</code></pre> <p>This query retrieves the reviews as a JSON array, then unnests the array so each review is a separate row.  The team can then perform further analysis on the <code>content</code>, <code>score</code>, and other fields within each review to gauge user sentiment, identify common themes in positive or negative feedback, and understand the overall user experience for this specific user segment. This information can then be used to inform product development, marketing strategies, and customer support efforts.</p> Need help or Found a bug? Get help using <code>get_playstore_reviews</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_playstore_reviews</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_table_columns/","title":"get_table_columns","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/get_table_columns/#get_table_columns","title":"get_table_columns","text":"<pre><code>get_table_columns(fully_qualified_table)\n</code></pre>"},{"location":"bigfunctions/get_table_columns/#description","title":"Description","text":"<p>Get the column information of the given table from <code>INFORMATION_SCHEMA.COLUMNS</code> and put them in a temporary table called <code>bigfunction_result</code>.</p>"},{"location":"bigfunctions/get_table_columns/#usage","title":"Usage","text":"Call or Deploy <code>get_table_columns</code> ? Call <code>get_table_columns</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_table_columns</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_table_columns</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_table_columns</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_table_columns</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_table_columns\nbigfun deploy get_table_columns\n</code></pre>"},{"location":"bigfunctions/get_table_columns/#examples","title":"Examples","text":"<p>call <code>bigfunctions.eu._get_columns</code>(\"bigfunctions.samples.natality\"); select column_name, data_type from bigfunction_result ;</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.get_table_columns(\"bigfunctions.eu.natality\");\n</code></pre> <pre><code>call bigfunctions.us.get_table_columns(\"bigfunctions.us.natality\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.get_table_columns(\"bigfunctions.europe_west1.natality\");\n</code></pre>"},{"location":"bigfunctions/get_table_columns/#use-cases","title":"Use cases","text":"<p>A use case for the <code>get_table_columns</code> function is to programmatically determine the schema of a BigQuery table. This can be useful in various scenarios, including:</p> <ul> <li> <p>Data Validation: Before loading data into a table, you could use this function to verify that the incoming data matches the expected schema. This can prevent errors and ensure data consistency.</p> </li> <li> <p>Dynamic Query Generation:  You might need to construct SQL queries dynamically based on the columns present in a table. <code>get_table_columns</code> allows you to retrieve the column names and data types, which you can then use to build your query string.</p> </li> <li> <p>Data Discovery and Exploration: When working with unfamiliar datasets, this function can help you quickly understand the structure of a table without manually inspecting it in the BigQuery UI.</p> </li> <li> <p>Schema Migration:  If you're migrating data between tables or systems, you can use <code>get_table_columns</code> to compare the schemas of the source and destination tables and identify any discrepancies.</p> </li> <li> <p>Automated Documentation:  You can use this function as part of a script to automatically generate documentation about your BigQuery tables, including a list of columns and their data types.</p> </li> <li> <p>Monitoring and Auditing: Regularly checking the schema of critical tables can help detect any unexpected changes that might indicate data quality issues or unauthorized modifications.</p> </li> </ul> <p>Example Scenario: Dynamic Query Generation</p> <p>Let's say you have a table with a variable number of columns, and you want to write a query that selects only the columns of a specific data type (e.g., INTEGER). You can use <code>get_table_columns</code> to achieve this:</p> <pre><code>-- Call the function to get the columns of the table 'your_project.your_dataset.your_table'\nCALL `bigfunctions.your_region.get_table_columns`('your_project.your_dataset.your_table');\n\n-- Build a dynamic SQL query based on the results\nDECLARE query STRING;\nSET query = 'SELECT ';\n\nSELECT\n    ARRAY_TO_STRING(\n        ARRAY_AGG(\n            IF(data_type = 'INTEGER', column_name, NULL)\n        ),\n        ', '\n    )\nINTO query\nFROM bigfunction_result;\n\nSET query = query || ' FROM `your_project.your_dataset.your_table`';\n\n-- Execute the dynamic query\nEXECUTE IMMEDIATE query;\n</code></pre> <p>This code first calls <code>get_table_columns</code> to populate the <code>bigfunction_result</code> table. Then, it constructs a dynamic SQL query by iterating over the results and including only the INTEGER columns in the SELECT clause. Finally, it executes the generated query.  This approach allows you to adapt your queries to different table schemas without hardcoding column names.  Remember to replace <code>your_project</code>, <code>your_dataset</code>, <code>your_table</code>, and <code>your_region</code> with the appropriate values for your environment.</p> Need help or Found a bug? Get help using <code>get_table_columns</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_table_columns</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_transport_emissions/","title":"get_transport_emissions","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>public_services</li> </ul>"},{"location":"bigfunctions/get_transport_emissions/#get_transport_emissions","title":"get_transport_emissions","text":"<pre><code>get_transport_emissions(distance_km)\n</code></pre>"},{"location":"bigfunctions/get_transport_emissions/#description","title":"Description","text":"<p>Get the transport CO2 emissions given the <code>distance_km</code> by transport mode from impactco2.fr</p>"},{"location":"bigfunctions/get_transport_emissions/#usage","title":"Usage","text":"Call or Deploy <code>get_transport_emissions</code> ? Call <code>get_transport_emissions</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_transport_emissions</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_transport_emissions</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_transport_emissions</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_transport_emissions</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_transport_emissions\nbigfun deploy get_transport_emissions\n</code></pre>"},{"location":"bigfunctions/get_transport_emissions/#examples","title":"Examples","text":"<p>Get transport emissions for 200 km</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_transport_emissions(200)\n</code></pre> <pre><code>select bigfunctions.us.get_transport_emissions(200)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_transport_emissions(200)\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------------------------+\n| co2_emissions_by_transport_mode                                                                                                           |\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n  {\"id\": 2, \"name\": \"High-speed train\",\"value\":0.46},\n  {\"id\": 22,\"name\": \"Carpooling combustion (1 passenger)\",\"value\":19.2},\n  ...\n]\n |\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/get_transport_emissions/#use-cases","title":"Use cases","text":"<p>A logistics company uses BigQuery to store data about its deliveries.  Each record in the <code>deliveries</code> table includes the <code>distance_km</code> for each delivery.  The company wants to calculate the estimated CO2 emissions for each delivery, broken down by different transportation modes (e.g., truck, train, plane) to understand its environmental impact and explore potential optimizations.</p> <p>They can use the <code>get_transport_emissions</code> function within a query like this:</p> <pre><code>SELECT\n    delivery_id,\n    distance_km,\n    bigfunctions.eu.get_transport_emissions(distance_km) AS co2_emissions\n  FROM\n    `project.dataset.deliveries`;\n</code></pre> <p>This query adds a new column, <code>co2_emissions</code>, to the results.  This column contains an array of structs, where each struct represents a transportation mode and its associated CO2 emission for the given distance. The company can then further process this data:</p> <ul> <li>Aggregate emissions by transport mode:  Unnest the <code>co2_emissions</code> array and aggregate the total emissions for each transport mode across all deliveries.  This allows them to see which modes contribute most to their carbon footprint.</li> </ul> <pre><code>SELECT\n    transport.name,\n    SUM(transport.value) AS total_emissions\n  FROM\n    `project.dataset.deliveries`,\n    UNNEST(bigfunctions.eu.get_transport_emissions(distance_km)) AS transport\n  GROUP BY 1\n  ORDER BY\n    total_emissions DESC\n</code></pre> <ul> <li> <p>Compare emissions for different delivery routes: If they have multiple potential routes for a delivery, they can use this function to estimate the emissions for each route and choose the most environmentally friendly option.</p> </li> <li> <p>Scenario planning: The company could use this function to model the impact of switching to different transport modes for a portion of their deliveries.  For example, what would be the CO2 reduction if 20% of truck deliveries were switched to rail?</p> </li> <li> <p>Reporting and dashboards: Integrate the emission data into reports and dashboards to monitor progress towards sustainability goals.</p> </li> </ul> <p>By using the <code>get_transport_emissions</code> function directly within their BigQuery workflows, the logistics company can efficiently analyze their emissions data without needing to manage external APIs or data transfers.  This enables them to make data-driven decisions to optimize their operations for lower environmental impact.</p> Need help or Found a bug? Get help using <code>get_transport_emissions</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_transport_emissions</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_value/","title":"get_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/get_value/#get_value","title":"get_value","text":"<pre><code>get_value(key_value_items, search_key)\n</code></pre>"},{"location":"bigfunctions/get_value/#description","title":"Description","text":"<p>Return the first <code>value</code> with a key <code>search_key</code> from <code>key_value_items</code> (or return <code>null</code> if <code>search_key</code> does not exist in <code>key_value_items</code>).</p>"},{"location":"bigfunctions/get_value/#usage","title":"Usage","text":"Call or Deploy <code>get_value</code> ? Call <code>get_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_value\nbigfun deploy get_value\n</code></pre>"},{"location":"bigfunctions/get_value/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], a)\n</code></pre> <pre><code>select bigfunctions.us.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], a)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], a)\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 8     |\n+-------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], c)\n</code></pre> <pre><code>select bigfunctions.us.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], c)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], c)\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| null  |\n+-------+\n</code>\n</pre> <p>3. When there are multiple occurences of <code>search_key</code>, return the first found <code>value</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_value([struct('a' as key, 8 as value), struct('a' as key, 9 as value)], a)\n</code></pre> <pre><code>select bigfunctions.us.get_value([struct('a' as key, 8 as value), struct('a' as key, 9 as value)], a)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_value([struct('a' as key, 8 as value), struct('a' as key, 9 as value)], a)\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 8     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/get_value/#use-cases","title":"Use cases","text":"<p>This <code>get_value</code> function is useful for extracting values from arrays of key-value pairs (structs).  Here are a few use cases:</p> <p>1. Parameter Extraction: Imagine you have a table storing event data, where one column contains parameters as an array of key-value structs:</p> <pre><code>| event_id | parameters                                      |\n|----------|-------------------------------------------------|\n| 1        | [{'key': 'user_id', 'value': '123'}, {'key': 'event_type', 'value': 'purchase'}] |\n| 2        | [{'key': 'item_id', 'value': '456'}, {'key': 'user_id', 'value': '789'}] |\n</code></pre> <p>You could use <code>get_value</code> to extract the <code>user_id</code> for each event:</p> <pre><code>SELECT\n    event_id,\n    bigfunctions.YOUR_REGION.get_value(parameters, 'user_id') AS user_id\nFROM\n    your_table;\n</code></pre> <p>This would give you:</p> <pre><code>| event_id | user_id |\n|----------|---------|\n| 1        | 123     |\n| 2        | 789     |\n</code></pre> <p>2. Configuration Management:  Suppose you store configuration settings as key-value pairs in a table:</p> <pre><code>| setting_group | settings                                       |\n|---------------|-------------------------------------------------|\n| website       | [{'key': 'theme', 'value': 'dark'}, {'key': 'font_size', 'value': '16px'}] |\n| mobile_app    | [{'key': 'version', 'value': '1.2.3'}, {'key': 'platform', 'value': 'ios'}] |\n</code></pre> <p>You could retrieve specific settings using <code>get_value</code>:</p> <pre><code>SELECT\n    setting_group,\n    bigfunctions.YOUR_REGION.get_value(settings, 'theme') AS theme\nFROM\n    your_config_table\nWHERE setting_group = 'website';\n</code></pre> <p>3. Product Attributes:  E-commerce platforms often store product attributes as key-value pairs.  <code>get_value</code> can help extract these attributes:</p> <pre><code>| product_id | attributes                                     |\n|------------|-------------------------------------------------|\n| 1          | [{'key': 'color', 'value': 'red'}, {'key': 'size', 'value': 'L'}] |\n| 2          | [{'key': 'weight', 'value': '1kg'}, {'key': 'material', 'value': 'cotton'}] |\n</code></pre> <p>You can extract the color of product 1 with:</p> <pre><code>SELECT bigfunctions.YOUR_REGION.get_value(attributes, 'color') AS color\nFROM your_product_table\nWHERE product_id = 1;\n</code></pre> <p>These are just a few examples. Anytime you have data stored as an array of key-value pairs in BigQuery, <code>get_value</code> can be a convenient way to access the values associated with specific keys. Remember to replace <code>YOUR_REGION</code> with the appropriate BigQuery region for your data.</p> Need help or Found a bug? Get help using <code>get_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_view_history/","title":"get_view_history","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/get_view_history/#get_view_history","title":"get_view_history","text":"<pre><code>get_view_history(fully_qualified_view)\n</code></pre>"},{"location":"bigfunctions/get_view_history/#description","title":"Description","text":"<p>Get BigQuery View history</p>"},{"location":"bigfunctions/get_view_history/#usage","title":"Usage","text":"Call or Deploy <code>get_view_history</code> ? Call <code>get_view_history</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_view_history</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_view_history</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_view_history</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_view_history</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_view_history\nbigfun deploy get_view_history\n</code></pre>"},{"location":"bigfunctions/get_view_history/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.get_view_history(\"your_project.your_dataset.view_name\");\n</code></pre> <pre><code>call bigfunctions.us.get_view_history(\"your_project.your_dataset.view_name\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.get_view_history(\"your_project.your_dataset.view_name\");\n</code></pre>"},{"location":"bigfunctions/get_view_history/#use-cases","title":"Use cases","text":"<p>A use case for the <code>get_view_history</code> function is tracking changes and debugging issues with a view's definition.</p> <p>Imagine a complex view used in several dashboards and reports. Suddenly, the reports start showing unexpected results. Using <code>get_view_history</code>, you can quickly:</p> <ol> <li>Identify when the view definition changed: Retrieve the historical definitions of the view to pinpoint the exact time a modification was made that might have introduced the error.</li> <li>Compare different versions:  Analyze the differences between previous versions and the current definition to understand exactly what changed in the SQL query.  This helps in identifying the root cause of the issue.</li> <li>Revert to a previous version: If a problematic change is identified, having access to the historical definitions makes it easy to revert the view to a known good state while a fix is being developed.</li> <li>Audit view changes: Track who made changes and when, enhancing accountability and control over critical data assets. This is particularly important for regulatory compliance and data governance.</li> <li>Understand the evolution of a view: By examining the history, you can gain insights into how the view's logic has evolved over time, aiding in documentation and knowledge transfer.</li> </ol> <p>Example: Let's say your view <code>my_project.my_dataset.important_sales_view</code> is producing incorrect totals. You suspect a recent change to the view's SQL is responsible.  You could use <code>get_view_history</code> (assuming your project is in the <code>US</code> multi-region):</p> <pre><code>SELECT * FROM bigfunctions.us.get_view_history('my_project.my_dataset.important_sales_view');\n</code></pre> <p>This would return a table showing the different versions of the view's definition along with timestamps, allowing you to compare the SQL before and after the problem started occurring. This helps isolate the problematic change and restore a correct version quickly.</p> Need help or Found a bug? Get help using <code>get_view_history</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_view_history</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_webpage_data/","title":"get_webpage_data","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>web</li> </ul>"},{"location":"bigfunctions/get_webpage_data/#get_webpage_data","title":"get_webpage_data","text":"<pre><code>get_webpage_data(prompt, url)\n</code></pre>"},{"location":"bigfunctions/get_webpage_data/#description","title":"Description","text":"<p>Extract <code>data</code> from <code>url</code> using <code>prompt</code> (using scrapegraph-ai python library)</p>"},{"location":"bigfunctions/get_webpage_data/#usage","title":"Usage","text":"Call or Deploy <code>get_webpage_data</code> ? Call <code>get_webpage_data</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_webpage_data</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_webpage_data</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_webpage_data</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_webpage_data</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_webpage_data\nbigfun deploy get_webpage_data\n</code></pre> <p>Requirements</p> <p><code>get_webpage_data</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>gemini_api_key</code> Gemini Api Key doc"},{"location":"bigfunctions/get_webpage_data/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_webpage_data('''\n      Return the list of bigfunctions in the category \"get data\".\n\n      Result must be a dict with the name of the bigfunction as key and its description as value.\n      Do not include arguments in the name.\n      '''\n      , \"https://unytics.io/bigfunctions/bigfunctions/\")\n</code></pre> <pre><code>select bigfunctions.us.get_webpage_data('''\n      Return the list of bigfunctions in the category \"get data\".\n\n      Result must be a dict with the name of the bigfunction as key and its description as value.\n      Do not include arguments in the name.\n      '''\n      , \"https://unytics.io/bigfunctions/bigfunctions/\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_webpage_data('''\n      Return the list of bigfunctions in the category \"get data\".\n\n      Result must be a dict with the name of the bigfunction as key and its description as value.\n      Do not include arguments in the name.\n      '''\n      , \"https://unytics.io/bigfunctions/bigfunctions/\")\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| data                                                                                                                                                                                |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"exchange_rate\": \"Get `exchange_rate`\",\n  \"faker\": \"Generates fake data\",\n  \"get\": \"Request `url`\",\n  \"get_appstore_reviews\": \"GET Apple App Store Reviews of an app\",\n  ...\n}\n |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/get_webpage_data/#use-cases","title":"Use cases","text":"<p>The provided function <code>get_webpage_data(prompt, url)</code> allows you to extract specific data from a webpage using a natural language prompt.  Here are a few use cases:</p> <ul> <li>Competitive Analysis: You could extract pricing information from competitor websites.  For example:</li> </ul> <pre><code>SELECT bigfunctions.us.get_webpage_data(\n    'Extract the price of the \"Product X\" from the product page.',\n    'https://competitorwebsite.com/product-x'\n);\n</code></pre> <ul> <li>Market Research: Extract product descriptions and customer reviews from e-commerce sites to understand market trends and customer sentiment:</li> </ul> <pre><code>SELECT bigfunctions.us.get_webpage_data(\n    'Extract all customer reviews and ratings for \"Product Y\".',\n    'https://ecommercewebsite.com/product-y'\n);\n</code></pre> <ul> <li>Lead Generation: Extract contact information from business directories or websites:</li> </ul> <pre><code>SELECT bigfunctions.us.get_webpage_data(\n    'Extract the email address and phone number from the contact us page.',\n    'https://targetcompany.com/contact-us'\n);\n</code></pre> <ul> <li>Content Aggregation: Pull news headlines and summaries from various news websites to create a consolidated news feed:</li> </ul> <pre><code>SELECT bigfunctions.us.get_webpage_data(\n    'Extract the headline and summary of the top 3 news articles on the homepage.',\n    'https://newswebsite.com'\n);\n</code></pre> <ul> <li>Real Estate Data Analysis: Extract property details like price, square footage, and number of bedrooms from real estate listings:</li> </ul> <pre><code>SELECT bigfunctions.us.get_webpage_data(\n    'Extract the price, square footage, number of bedrooms, and address of the property.',\n    'https://realestatewebsite.com/property-listing-123'\n);\n</code></pre> <ul> <li> <p>Monitoring Website Changes: Track changes in product availability or pricing on a specific webpage by periodically calling the function with the same prompt and URL.</p> </li> <li> <p>Extracting Data from Tables within Web Pages: The function can be used to parse HTML tables and extract structured data. For instance, it can extract financial data from tables on a company's investor relations page.</p> </li> </ul> <p>The key advantage is the use of natural language prompts, making it easier to specify what data you need without needing to write complex web scraping code or understand the underlying HTML structure. However, the accuracy and reliability depend heavily on the clarity and specificity of the prompt and the complexity of the target website's structure.  It's essential to test and refine prompts for optimal results.</p> Need help or Found a bug? Get help using <code>get_webpage_data</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_webpage_data</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_webpage_metadata/","title":"get_webpage_metadata","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>web</li> </ul>"},{"location":"bigfunctions/get_webpage_metadata/#get_webpage_metadata","title":"get_webpage_metadata","text":"<pre><code>get_webpage_metadata(url)\n</code></pre>"},{"location":"bigfunctions/get_webpage_metadata/#description","title":"Description","text":"<p>Get webpage metadata (using metadata_parser python library)</p>"},{"location":"bigfunctions/get_webpage_metadata/#usage","title":"Usage","text":"Call or Deploy <code>get_webpage_metadata</code> ? Call <code>get_webpage_metadata</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_webpage_metadata</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_webpage_metadata</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_webpage_metadata</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_webpage_metadata</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_webpage_metadata\nbigfun deploy get_webpage_metadata\n</code></pre>"},{"location":"bigfunctions/get_webpage_metadata/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_webpage_metadata(\"https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763\")\n</code></pre> <pre><code>select bigfunctions.us.get_webpage_metadata(\"https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_webpage_metadata(\"https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763\")\n</code></pre> <pre>\n<code>+----------+\n| metadata |\n+----------+\n| {...}    |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/get_webpage_metadata/#use-cases","title":"Use cases","text":"<p>You could use this function in BigQuery to analyze a dataset of URLs and extract metadata from each URL.  Here are a few concrete use cases:</p> <ul> <li> <p>SEO Analysis:  Imagine you have a table of competitor websites. You could use <code>get_webpage_metadata</code> to extract title tags, descriptions, and other metadata to understand their SEO strategies and identify opportunities.  You could analyze trends in keywords used in titles and descriptions.</p> </li> <li> <p>Content Auditing:  For a large website, you might have a table of all your pages.  This function could help you audit your content by extracting metadata and looking for missing or inconsistent information, like missing title tags or descriptions that are too short.</p> </li> <li> <p>Social Media Analysis: If you have a table of URLs shared on social media, you could use this function to understand the type of content being shared.  Extracting titles and descriptions can give you insights into the topics and themes that resonate with your audience.</p> </li> <li> <p>Data Enrichment:  Suppose you have a table of news articles with only URLs. You can enrich this data by extracting metadata such as the publisher, publication date, and author, if available, using this function.</p> </li> <li> <p>Classifying Web Pages: Based on the extracted metadata like title and description, you can train a machine learning model to categorize web pages into different topics or industries.</p> </li> </ul> <p>Here's a simplified example in BigQuery (assuming your dataset is in the <code>us</code> region and your table is named <code>urls</code> with a column named <code>url</code>):</p> <pre><code>SELECT\n    url,\n    bigfunctions.us.get_webpage_metadata(url) AS metadata\nFROM\n    `your_project.your_dataset.urls`;\n</code></pre> <p>This query would add a new column called <code>metadata</code> to your table, containing the extracted metadata for each URL.  You could then further process this JSON metadata within BigQuery to extract specific fields.  For instance, to extract the title:</p> <pre><code>SELECT\n    url,\n    JSON_EXTRACT_SCALAR(bigfunctions.us.get_webpage_metadata(url), '$.title') AS title\nFROM\n    `your_project.your_dataset.urls`;\n</code></pre> Need help or Found a bug? Get help using <code>get_webpage_metadata</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_webpage_metadata</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/get_webpage_structured_data/","title":"get_webpage_structured_data","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>web</li> </ul>"},{"location":"bigfunctions/get_webpage_structured_data/#get_webpage_structured_data","title":"get_webpage_structured_data","text":"<pre><code>get_webpage_structured_data(url)\n</code></pre>"},{"location":"bigfunctions/get_webpage_structured_data/#description","title":"Description","text":"<p>Get webpage Structured Data that Google shows in search results.</p>"},{"location":"bigfunctions/get_webpage_structured_data/#usage","title":"Usage","text":"Call or Deploy <code>get_webpage_structured_data</code> ? Call <code>get_webpage_structured_data</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>get_webpage_structured_data</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>get_webpage_structured_data</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>get_webpage_structured_data</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>get_webpage_structured_data</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get get_webpage_structured_data\nbigfun deploy get_webpage_structured_data\n</code></pre>"},{"location":"bigfunctions/get_webpage_structured_data/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_webpage_structured_data(\"https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763\")\n</code></pre> <pre><code>select bigfunctions.us.get_webpage_structured_data(\"https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_webpage_structured_data(\"https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763\")\n</code></pre> <pre>\n<code>+-----------------+\n| structured_data |\n+-----------------+\n| {...}           |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/get_webpage_structured_data/#use-cases","title":"Use cases","text":"<p>A use case for the <code>get_webpage_structured_data</code> function is SEO analysis and monitoring.</p> <p>Imagine you have a database of competitor websites or a list of your own web pages. You could use this function within BigQuery to:</p> <ol> <li> <p>Extract structured data at scale: Periodically run a query that iterates through your list of URLs and calls <code>get_webpage_structured_data</code> for each one.  This allows you to collect the structured data for a large number of pages efficiently.</p> </li> <li> <p>Identify missing or incorrect structured data: Analyze the returned JSON for specific schema types (e.g., Product, Article, LocalBusiness) to ensure your competitors or your own pages have correctly implemented structured data markup. This helps identify opportunities to improve search engine visibility.</p> </li> <li> <p>Track changes in structured data: By running the function regularly, you can monitor changes in structured data implementations over time. This could indicate updates to content, changes in SEO strategy, or technical issues.</p> </li> <li> <p>Competitive analysis:  See what structured data your competitors are using.  This can inform your own SEO strategy.  For example, if competitors are using a specific schema type that you aren't, it might be worth investigating.</p> </li> <li> <p>Automated reporting: Build dashboards and reports in BigQuery to visualize structured data trends and identify areas for improvement.</p> </li> </ol> <p>Example Scenario:</p> <p>Let's say you want to check if your competitors are using the <code>Product</code> schema correctly on their product pages. You have a table called <code>competitor_products</code> with a column <code>product_url</code>. You can use the <code>get_webpage_structured_data</code> function in a query like this:</p> <pre><code>SELECT\n    competitor_products.product_url,\n    bigfunctions.us.get_webpage_structured_data(competitor_products.product_url) AS structured_data\nFROM\n    `your_project.your_dataset.competitor_products`;\n</code></pre> <p>This query will return the structured data for each product URL.  You can then further process the JSON within BigQuery to check for the presence and correctness of the <code>Product</code> schema, allowing you to identify competitors who are doing a better job with structured data and learn from their implementation.</p> Need help or Found a bug? Get help using <code>get_webpage_structured_data</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>get_webpage_structured_data</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/gregorian2hijri/","title":"gregorian2hijri","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_date</li> </ul>"},{"location":"bigfunctions/gregorian2hijri/#gregorian2hijri","title":"gregorian2hijri","text":"<pre><code>gregorian2hijri(gregorian_date)\n</code></pre>"},{"location":"bigfunctions/gregorian2hijri/#description","title":"Description","text":"<p>Convert Gregorian Date to Hijri Date (taken from here)</p>"},{"location":"bigfunctions/gregorian2hijri/#usage","title":"Usage","text":"Call or Deploy <code>gregorian2hijri</code> ? Call <code>gregorian2hijri</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>gregorian2hijri</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>gregorian2hijri</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>gregorian2hijri</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>gregorian2hijri</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get gregorian2hijri\nbigfun deploy gregorian2hijri\n</code></pre>"},{"location":"bigfunctions/gregorian2hijri/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.gregorian2hijri(date '2023-02-12')\n</code></pre> <pre><code>select bigfunctions.us.gregorian2hijri(date '2023-02-12')\n</code></pre> <pre><code>select bigfunctions.europe_west1.gregorian2hijri(date '2023-02-12')\n</code></pre> <pre>\n<code>+------------+\n| hijri_date |\n+------------+\n| 1444-7-20  |\n+------------+\n</code>\n</pre>"},{"location":"bigfunctions/gregorian2hijri/#use-cases","title":"Use cases","text":"<p>A use case for the <code>gregorian2hijri</code> function would be for any application or analysis that needs to represent dates in both the Gregorian and Hijri calendars.  Here are a few specific examples:</p> <ul> <li> <p>Event Scheduling and Reminders: An application scheduling events for a predominantly Muslim audience could use this function to display event dates in the Hijri calendar alongside the Gregorian date.  This would be particularly relevant for religious holidays or culturally significant dates.  Reminder systems could also utilize this function to send out reminders based on the Hijri date.</p> </li> <li> <p>Historical Data Analysis: Researchers studying historical events in regions where the Hijri calendar was prevalent could use this function to convert Gregorian dates in their datasets to Hijri dates. This allows for a more accurate understanding of the timing of events within the historical context.</p> </li> <li> <p>Financial Reporting: Businesses operating in regions using the Hijri calendar might need to generate reports based on both calendar systems. This function would facilitate the conversion of Gregorian transaction dates to Hijri dates for accurate financial reporting and analysis.</p> </li> <li> <p>Data Warehousing and ETL:  In a data warehouse setting, having a function like this available simplifies the process of converting Gregorian dates to Hijri dates during the Extract, Transform, Load (ETL) process. This allows for consistent date representation and facilitates analysis that requires both calendar systems.</p> </li> <li> <p>E-commerce and Localized Applications:  E-commerce platforms or applications catering to a global audience could use this function to display dates in the user's preferred calendar system.  This improves user experience and facilitates better understanding of delivery dates, promotional periods, etc., especially in regions where the Hijri calendar is commonly used.</p> </li> <li> <p>Genealogical Research: Individuals researching family history in regions using the Hijri calendar could use this function to convert Gregorian dates on birth certificates, marriage records, or other historical documents to Hijri dates, aiding in the accurate reconstruction of family timelines.</p> </li> </ul> <p>In essence, <code>gregorian2hijri</code> bridges the gap between the Gregorian and Hijri calendar systems within BigQuery, enabling a wider range of applications and analyses for data involving dates relevant to both calendars.</p> Need help or Found a bug? Get help using <code>gregorian2hijri</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>gregorian2hijri</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/h3/","title":"h3","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_geo_data</li> </ul>"},{"location":"bigfunctions/h3/#h3","title":"h3","text":"<pre><code>h3(function_name, arguments)\n</code></pre>"},{"location":"bigfunctions/h3/#description","title":"Description","text":"<p>Wrapper around Uber H3 (A Hexagonal Hierarchical Geospatial Indexing System).</p>"},{"location":"bigfunctions/h3/#usage","title":"Usage","text":"Call or Deploy <code>h3</code> ? Call <code>h3</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>h3</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>h3</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>h3</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>h3</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get h3\nbigfun deploy h3\n</code></pre>"},{"location":"bigfunctions/h3/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.h3(\"latLngToCell\", json '[37.3615593, -122.0553238, 7]')\n</code></pre> <pre><code>select bigfunctions.us.h3(\"latLngToCell\", json '[37.3615593, -122.0553238, 7]')\n</code></pre> <pre><code>select bigfunctions.europe_west1.h3(\"latLngToCell\", json '[37.3615593, -122.0553238, 7]')\n</code></pre> <pre>\n<code>+-------------------+\n| result            |\n+-------------------+\n| \"87283472bffffff\" |\n+-------------------+\n</code>\n</pre>"},{"location":"bigfunctions/h3/#use-cases","title":"Use cases","text":"<p>A use case for the <code>h3</code> BigQuery function would be analyzing ride-sharing data.  Imagine you have a table of ride-sharing trips with starting and ending GPS coordinates (latitude and longitude). You want to identify popular pickup and dropoff locations at different levels of granularity.</p> <p>Here's how you could use the <code>h3</code> function:</p> <ol> <li>Convert GPS coordinates to H3 indexes:  Use the <code>latLngToCell</code> function within <code>h3</code> to convert each ride's start and end coordinates into H3 indexes at a specific resolution.  The resolution controls the size of the hexagonal grid cells. A higher resolution (e.g., 10) means smaller, more precise cells, while a lower resolution (e.g., 6) means larger, more generalized cells.</li> </ol> <p><pre><code>SELECT\n    trip_id,\n    bigfunctions.&lt;your-region&gt;.h3('latLngToCell', JSON_ARRAY(start_lat, start_lng, 8)) AS start_h3,\n    bigfunctions.&lt;your-region&gt;.h3('latLngToCell', JSON_ARRAY(end_lat, end_lng, 8)) AS end_h3\nFROM\n    `your_project.your_dataset.rides_table`;\n</code></pre>    Replace <code>&lt;your-region&gt;</code> with the appropriate BigQuery region (e.g., <code>us</code>, <code>eu</code>, <code>us_central1</code>).</p> <ol> <li>Aggregate trips by H3 index: Now you can group the trips by their <code>start_h3</code> or <code>end_h3</code> indexes to count the number of pickups or dropoffs within each hexagonal grid cell.</li> </ol> <pre><code>SELECT\n    start_h3,\n    COUNT(*) AS pickup_count\nFROM (\n    SELECT\n        bigfunctions.&lt;your-region&gt;.h3('latLngToCell', JSON_ARRAY(start_lat, start_lng, 8)) AS start_h3\n    FROM\n        `your_project.your_dataset.rides_table`\n)\nGROUP BY\n    start_h3\nORDER BY\n    pickup_count DESC;\n</code></pre> <ol> <li>Visualize the results:  You can export the results to a visualization tool like GeoJSON.io or Kepler.gl.  Since H3 indexes represent hexagons, you can easily display them on a map to visualize the density of ride-sharing activity in different areas.  This allows you to identify hotspots, areas with high demand, or areas that might benefit from more drivers.</li> </ol> <p>By using different H3 resolutions, you can analyze ride-sharing patterns at different scales.  For example, a resolution of 8 might be suitable for identifying neighborhoods with high pickup activity, while a resolution of 6 could be used to analyze demand across larger districts or cities.  The <code>h3</code> function also provides other functionalities from the H3 library, such as finding neighboring cells (<code>kRing</code>), which can be useful for analyzing nearby areas or defining service zones.</p> Need help or Found a bug? Get help using <code>h3</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>h3</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/html2pdf/","title":"html2pdf","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>convert_data_format</li> </ul>"},{"location":"bigfunctions/html2pdf/#html2pdf","title":"html2pdf","text":"<pre><code>html2pdf(html)\n</code></pre>"},{"location":"bigfunctions/html2pdf/#description","title":"Description","text":"<p>Convert <code>html</code> to <code>pdf</code> encoded as a base64 string.</p> <p>This function is useful to combine with <code>send_mail</code> if you want to send a personnalized pdf to some people.</p> <p>To have a beautiful pdf, we advise you to get inspired by this invoice template.</p>"},{"location":"bigfunctions/html2pdf/#usage","title":"Usage","text":"Call or Deploy <code>html2pdf</code> ? Call <code>html2pdf</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>html2pdf</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>html2pdf</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>html2pdf</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>html2pdf</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get html2pdf\nbigfun deploy html2pdf\n</code></pre>"},{"location":"bigfunctions/html2pdf/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.html2pdf(\"\\u003ch1\\u003eLove It!\\u003c/h1\\u003e\")\n</code></pre> <pre><code>select bigfunctions.us.html2pdf(\"\\u003ch1\\u003eLove It!\\u003c/h1\\u003e\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.html2pdf(\"\\u003ch1\\u003eLove It!\\u003c/h1\\u003e\")\n</code></pre> <pre>\n<code>+------------------+\n| pdf_base64       |\n+------------------+\n| JVBERi0xLjQK.... |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/html2pdf/#use-cases","title":"Use cases","text":"<p>A use case for the <code>html2pdf</code> BigQuery function would be generating personalized PDF invoices or reports directly from BigQuery data.  Imagine you have a table with customer order information, including items purchased, quantities, prices, and customer details. You could use a query to format this data into an HTML invoice template, then use the <code>html2pdf</code> function to convert this HTML into a PDF for each customer.</p> <p>Here's a more concrete example:</p> <p>1. Data in BigQuery:</p> <pre><code>orders table:\n| order_id | customer_id | item | quantity | price | customer_name | customer_email |\n|---|---|---|---|---|---|---|\n| 1 | 123 | Widget A | 2 | 10 | John Doe | john.doe@email.com |\n| 1 | 123 | Widget B | 1 | 25 | John Doe | john.doe@email.com |\n| 2 | 456 | Widget C | 3 | 15 | Jane Smith | jane.smith@email.com |\n</code></pre> <p>2. BigQuery SQL with <code>html2pdf</code>:</p> <pre><code>SELECT\n    order_id,\n    customer_id,\n    bigfunctions.us.html2pdf(FORMAT(\"\"\"\n        &lt;!DOCTYPE html&gt;\n        &lt;html&gt;\n        &lt;head&gt;\n          &lt;title&gt;Invoice #%d&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n          &lt;h1&gt;Invoice #%d&lt;/h1&gt;\n          &lt;p&gt;Customer: %s&lt;/p&gt;\n          &lt;table&gt;\n            &lt;tr&gt;&lt;th&gt;Item&lt;/th&gt;&lt;th&gt;Quantity&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;\n            %s\n          &lt;/table&gt;\n          &lt;p&gt;Total: $%d&lt;/p&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n    \"\"\", order_id, order_id, customer_name, ARRAY_TO_STRING(\n        ARRAY_AGG(\n            FORMAT(\"\"\"&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;$%d&lt;/td&gt;&lt;/tr&gt;\"\"\", item, quantity, price)\n        ), ''\n    ), SUM(quantity * price))) AS invoice_pdf\nFROM\n    `your_project.your_dataset.orders`\nGROUP BY\n    order_id, customer_id, customer_name;\n</code></pre> <p>Explanation:</p> <ul> <li>The query groups order items by <code>order_id</code> and <code>customer_id</code>.</li> <li>Inside the <code>FORMAT</code> function, an HTML invoice template is created. Placeholders like <code>%d</code> and <code>%s</code> are used for dynamic data.</li> <li><code>ARRAY_AGG</code> and <code>ARRAY_TO_STRING</code> are used to create the table rows of items in the invoice.</li> <li><code>SUM(quantity * price)</code> calculates the total amount.</li> <li>Finally, <code>bigfunctions.us.html2pdf</code> converts the generated HTML string into a base64 encoded PDF.</li> </ul> <p>3. Result:</p> <p>The query will return a table with <code>order_id</code>, <code>customer_id</code>, and <code>invoice_pdf</code> (base64 encoded PDF) for each order.  You could then use another tool or process to decode the base64 strings and store or send the PDF invoices. This could be part of a scheduled job to automatically generate and email invoices to customers.</p> <p>Other Use Cases:</p> <ul> <li>Generating personalized reports (e.g., monthly performance reports for clients).</li> <li>Creating product catalogs with dynamic pricing and images.</li> <li>Generating tickets or certificates with unique codes.</li> <li>Creating dynamic presentations based on data.</li> </ul> <p>This function makes it much easier to automate the generation of personalized PDF documents directly from BigQuery, without needing to export data and use external PDF generation libraries.</p> Need help or Found a bug? Get help using <code>html2pdf</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>html2pdf</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ip2asn/","title":"ip2asn","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_ip</li> </ul>"},{"location":"bigfunctions/ip2asn/#ip2asn","title":"ip2asn","text":"<pre><code>ip2asn(ip)\n</code></pre>"},{"location":"bigfunctions/ip2asn/#description","title":"Description","text":"<p>Get <code>asn</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p>"},{"location":"bigfunctions/ip2asn/#usage","title":"Usage","text":"Call or Deploy <code>ip2asn</code> ? Call <code>ip2asn</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ip2asn</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ip2asn</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ip2asn</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ip2asn</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ip2asn\nbigfun deploy ip2asn\n</code></pre> <p>Requirements</p> <p><code>ip2asn</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>ipinfo_token</code> IP Info Token doc"},{"location":"bigfunctions/ip2asn/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2asn(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.us.ip2asn(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2asn(\"152.216.7.110\")\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------+\n| asn                                                                    |\n+------------------------------------------------------------------------+\n| {\"asn\":\"AS30313\",\"domain\":\"irs.gov\",\"name\":\"Internal Revenue Service\"} |\n+------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip2asn/#use-cases","title":"Use cases","text":"<p>You have a table of web server logs that includes the IP address of each client that made a request.  You want to analyze these logs to understand the geographic distribution of your users at a network level (Autonomous System Number or ASN).  ASNs represent blocks of IP addresses managed by a specific network operator (e.g., an internet service provider or a large organization).</p> <p>Here's how <code>ip2asn</code> could be used:</p> <pre><code>SELECT\n    request_time,\n    client_ip,\n    bigfunctions.us.ip2asn(client_ip) AS asn_info\nFROM\n    `your_project.your_dataset.web_server_logs`;\n</code></pre> <p>This query would add a new column, <code>asn_info</code>, to your log data.  This column would contain a JSON string with information about the ASN associated with the client IP address, including the ASN number (<code>asn</code>), domain (<code>domain</code>), and name (<code>name</code>) of the network.  You could then use this ASN information for various analytical purposes:</p> <ul> <li>Geographic analysis: By aggregating data based on ASN, you can identify which networks (and therefore, potentially which geographic regions) are generating the most traffic to your website.</li> <li>Network performance analysis: You might observe performance issues related to specific ASNs, which could indicate problems with a particular internet service provider.</li> <li>Security analysis: Analyzing traffic patterns by ASN can help detect unusual activity that might be indicative of malicious actors operating within a certain network.</li> <li>Marketing and sales:  Understanding the distribution of your users across different ASNs could inform targeted advertising campaigns.</li> </ul> <p>You could further process the JSON string to extract the individual fields:</p> <pre><code>SELECT\n    request_time,\n    client_ip,\n    JSON_EXTRACT_SCALAR(bigfunctions.us.ip2asn(client_ip), '$.asn') AS asn,\n    JSON_EXTRACT_SCALAR(bigfunctions.us.ip2asn(client_ip), '$.name') AS asn_name\nFROM\n    `your_project.your_dataset.web_server_logs`;\n</code></pre> <p>This revised query provides cleaner, separate columns for the ASN and its name, making it easier to use these values in further analysis, like grouping and filtering. Remember to select the correct BigQuery dataset location (e.g. <code>bigfunctions.eu</code> for EU region) to match your data's location.</p> Need help or Found a bug? Get help using <code>ip2asn</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ip2asn</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ip2continent/","title":"ip2continent","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_ip</li> </ul>"},{"location":"bigfunctions/ip2continent/#ip2continent","title":"ip2continent","text":"<pre><code>ip2continent(ip)\n</code></pre>"},{"location":"bigfunctions/ip2continent/#description","title":"Description","text":"<p>Get <code>continent_code</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p>"},{"location":"bigfunctions/ip2continent/#usage","title":"Usage","text":"Call or Deploy <code>ip2continent</code> ? Call <code>ip2continent</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ip2continent</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ip2continent</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ip2continent</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ip2continent</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ip2continent\nbigfun deploy ip2continent\n</code></pre> <p>Requirements</p> <p><code>ip2continent</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>ipinfo_token</code> IP Info Token doc"},{"location":"bigfunctions/ip2continent/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2continent(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.us.ip2continent(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2continent(\"152.216.7.110\")\n</code></pre> <pre>\n<code>+----------------+\n| continent_code |\n+----------------+\n| NA             |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip2continent/#use-cases","title":"Use cases","text":"<p>You have a table of website access logs, including the IP address of each visitor. You want to analyze traffic patterns by continent.  You can use the <code>ip2continent</code> function to add a continent code to each log entry:</p> <pre><code>#standardSQL\nSELECT\n    timestamp,\n    request_path,\n    user_agent,\n    ip_address,\n    bigfunctions.YOUR_REGION.ip2continent(ip_address) AS continent_code\nFROM\n    `your_project.your_dataset.your_access_logs_table`;\n</code></pre> <p>Replace <code>YOUR_REGION</code> with the BigQuery region where your <code>your_access_logs_table</code> resides (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>). This query will add a <code>continent_code</code> column to your results, allowing you to then group and aggregate your data by continent:</p> <pre><code>#standardSQL\nSELECT\n    bigfunctions.YOUR_REGION.ip2continent(ip_address) AS continent_code,\n    COUNT(*) AS access_count\nFROM\n    `your_project.your_dataset.your_access_logs_table`\nGROUP BY\n    continent_code\nORDER BY\n    access_count DESC;\n</code></pre> <p>This will give you a count of accesses from each continent. This is useful for understanding your user base geographically, targeting marketing campaigns, or optimizing content delivery.</p> Need help or Found a bug? Get help using <code>ip2continent</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ip2continent</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ip2continent_name/","title":"ip2continent_name","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_ip</li> </ul>"},{"location":"bigfunctions/ip2continent_name/#ip2continent_name","title":"ip2continent_name","text":"<pre><code>ip2continent_name(ip)\n</code></pre>"},{"location":"bigfunctions/ip2continent_name/#description","title":"Description","text":"<p>Get <code>continent</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p>"},{"location":"bigfunctions/ip2continent_name/#usage","title":"Usage","text":"Call or Deploy <code>ip2continent_name</code> ? Call <code>ip2continent_name</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ip2continent_name</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ip2continent_name</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ip2continent_name</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ip2continent_name</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ip2continent_name\nbigfun deploy ip2continent_name\n</code></pre> <p>Requirements</p> <p><code>ip2continent_name</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>ipinfo_token</code> IP Info Token doc"},{"location":"bigfunctions/ip2continent_name/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2continent_name(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.us.ip2continent_name(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2continent_name(\"152.216.7.110\")\n</code></pre> <pre>\n<code>+---------------+\n| continent     |\n+---------------+\n| North America |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip2continent_name/#use-cases","title":"Use cases","text":"<p>You have web server logs stored in BigQuery that contain the IP addresses of visitors.  You want to analyze traffic patterns by continent. You can use the <code>ip2continent_name</code> function to add a \"continent\" column to your log data:</p> <pre><code>#standardSQL\nSELECT\n    timestamp,\n    request,\n    userAgent,\n    clientIp,\n    bigfunctions.us.ip2continent_name(clientIp) AS continent  -- Assuming your data is in US region\n  FROM\n    `your_project.your_dataset.your_webserver_logs`;\n</code></pre> <p>This query adds a <code>continent</code> column derived from the <code>clientIp</code> column. You can then use this new column for aggregations and reporting:</p> <pre><code>#standardSQL\nSELECT\n    continent,\n    COUNT(*) AS visit_count\n  FROM (\n    SELECT\n        bigfunctions.us.ip2continent_name(clientIp) AS continent\n      FROM\n        `your_project.your_dataset.your_webserver_logs`\n  )\n  GROUP BY continent\n  ORDER BY visit_count DESC;\n</code></pre> <p>This would give you a breakdown of the number of visits from each continent.  Remember to replace  <code>your_project.your_dataset.your_webserver_logs</code> with the actual path to your table and select the appropriate BigQuery region for the function call (e.g., <code>bigfunctions.eu</code>, <code>bigfunctions.asia_northeast1</code>, etc.) based on your data location.</p> Need help or Found a bug? Get help using <code>ip2continent_name</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ip2continent_name</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ip2country/","title":"ip2country","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_ip</li> </ul>"},{"location":"bigfunctions/ip2country/#ip2country","title":"ip2country","text":"<pre><code>ip2country(ip)\n</code></pre>"},{"location":"bigfunctions/ip2country/#description","title":"Description","text":"<p>Get <code>country_code</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p>"},{"location":"bigfunctions/ip2country/#usage","title":"Usage","text":"Call or Deploy <code>ip2country</code> ? Call <code>ip2country</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ip2country</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ip2country</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ip2country</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ip2country</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ip2country\nbigfun deploy ip2country\n</code></pre> <p>Requirements</p> <p><code>ip2country</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>ipinfo_token</code> IP Info Token doc"},{"location":"bigfunctions/ip2country/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2country(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.us.ip2country(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2country(\"152.216.7.110\")\n</code></pre> <pre>\n<code>+--------------+\n| country_code |\n+--------------+\n| US           |\n+--------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip2country/#use-cases","title":"Use cases","text":"<p>You have a table of website access logs, and each record includes the IP address of the visitor. You want to analyze website traffic by country.  The <code>ip2country</code> function can be used to determine the country code associated with each IP address, allowing you to aggregate and analyze traffic patterns based on visitor location.</p> <pre><code>SELECT\n    bigfunctions.us.ip2country(client_ip) AS country_code,\n    COUNT(*) AS visit_count\nFROM\n    `your_project.your_dataset.website_logs`\nGROUP BY\n    country_code\nORDER BY\n    visit_count DESC;\n</code></pre> <p>This query uses the <code>ip2country</code> function to add a <code>country_code</code> column to the <code>website_logs</code> table. Then, it groups the data by <code>country_code</code> and counts the number of visits from each country, providing a summary of website traffic by country of origin. Remember to replace <code>your_project.your_dataset.website_logs</code> with the actual path to your website logs table and choose the correct BigFunctions dataset according to your region (e.g., <code>bigfunctions.eu</code>, <code>bigfunctions.asia_northeast1</code>).</p> Need help or Found a bug? Get help using <code>ip2country</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ip2country</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ip2country_name/","title":"ip2country_name","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_ip</li> </ul>"},{"location":"bigfunctions/ip2country_name/#ip2country_name","title":"ip2country_name","text":"<pre><code>ip2country_name(ip)\n</code></pre>"},{"location":"bigfunctions/ip2country_name/#description","title":"Description","text":"<p>Get <code>country_name</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p>"},{"location":"bigfunctions/ip2country_name/#usage","title":"Usage","text":"Call or Deploy <code>ip2country_name</code> ? Call <code>ip2country_name</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ip2country_name</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ip2country_name</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ip2country_name</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ip2country_name</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ip2country_name\nbigfun deploy ip2country_name\n</code></pre> <p>Requirements</p> <p><code>ip2country_name</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>ipinfo_token</code> IP Info Token doc"},{"location":"bigfunctions/ip2country_name/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2country_name(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.us.ip2country_name(\"152.216.7.110\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2country_name(\"152.216.7.110\")\n</code></pre> <pre>\n<code>+---------------+\n| country_name  |\n+---------------+\n| United States |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip2country_name/#use-cases","title":"Use cases","text":"<p>A use case for the <code>ip2country_name</code> function would be analyzing website traffic logs to understand the geographical distribution of visitors.</p> <p>Scenario: You have a table in BigQuery containing website access logs, including the IP address of each visitor. You want to determine the number of visitors from each country.</p> <p>Implementation:</p> <pre><code>SELECT\n    bigfunctions.&lt;your-region&gt;.ip2country_name(client_ip) AS country,\n    COUNT(*) AS visitor_count\nFROM\n    `your-project.your-dataset.website_logs`\nGROUP BY\n    country\nORDER BY\n    visitor_count DESC;\n</code></pre> <p>Replace <code>&lt;your-region&gt;</code> with the appropriate BigQuery region for your data (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>).  Replace  <code>your-project.your-dataset.website_logs</code> with the actual path to your website logs table.  The <code>client_ip</code> field should contain the IP address of the visitor.</p> <p>Result: This query will output a table showing the number of visitors from each country, ordered from highest to lowest.  This information can be used for various purposes, such as:</p> <ul> <li>Targeted marketing:  Tailoring marketing campaigns based on the countries with the most visitors.</li> <li>Content localization:  Prioritizing translation of website content into the languages spoken in the countries with the highest visitor numbers.</li> <li>Performance optimization:  Identifying countries with slow access times and investigating potential network issues.</li> <li>Security analysis:  Detecting suspicious activity from specific countries or regions.</li> </ul> <p>This is just one example.  The <code>ip2country_name</code> function can be useful in any scenario where you need to determine the country associated with an IP address, such as analyzing server logs, security event data, or e-commerce transactions.</p> Need help or Found a bug? Get help using <code>ip2country_name</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ip2country_name</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ip_range2ip_networks/","title":"ip_range2ip_networks","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_ip</li> </ul>"},{"location":"bigfunctions/ip_range2ip_networks/#ip_range2ip_networks","title":"ip_range2ip_networks","text":"<pre><code>ip_range2ip_networks(first_ip, last_ip)\n</code></pre>"},{"location":"bigfunctions/ip_range2ip_networks/#description","title":"Description","text":"<p>Convert an IP range into a json list of IP networks in CIDR notation (the list can have only one element)</p>"},{"location":"bigfunctions/ip_range2ip_networks/#usage","title":"Usage","text":"Call or Deploy <code>ip_range2ip_networks</code> ? Call <code>ip_range2ip_networks</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ip_range2ip_networks</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ip_range2ip_networks</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ip_range2ip_networks</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ip_range2ip_networks</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ip_range2ip_networks\nbigfun deploy ip_range2ip_networks\n</code></pre>"},{"location":"bigfunctions/ip_range2ip_networks/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip_range2ip_networks(\"1.0.0.0\", \"1.0.0.255\")\n</code></pre> <pre><code>select bigfunctions.us.ip_range2ip_networks(\"1.0.0.0\", \"1.0.0.255\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip_range2ip_networks(\"1.0.0.0\", \"1.0.0.255\")\n</code></pre> <pre>\n<code>+--------------+\n| ip_networks  |\n+--------------+\n| [1.0.0.0/24] |\n+--------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip_range2ip_networks(\"192.0.2.1\", \"192.0.2.15\")\n</code></pre> <pre><code>select bigfunctions.us.ip_range2ip_networks(\"192.0.2.1\", \"192.0.2.15\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip_range2ip_networks(\"192.0.2.1\", \"192.0.2.15\")\n</code></pre> <pre>\n<code>+----------------------------------------------------------+\n| ip_networks                                              |\n+----------------------------------------------------------+\n| [192.0.2.1/32, 192.0.2.2/31, 192.0.2.4/30, 192.0.2.8/29] |\n+----------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip_range2ip_networks/#use-cases","title":"Use cases","text":"<p>A security analyst wants to identify all traffic originating from a specific range of IP addresses.  They have logs containing source IP addresses and want to categorize these logs based on whether the source IP falls within a predefined range. The <code>ip_range2ip_networks</code> function can be used to convert the IP range into a list of CIDR blocks.  This list can then be used in a <code>WHERE</code> clause with the <code>IN</code> operator or a <code>JOIN</code> operation to filter or categorize the log data efficiently.</p> <p>Example Scenario:</p> <p>The security analyst wants to flag all traffic from the IP range 192.168.1.100 to 192.168.1.110.</p> <ol> <li>Convert the IP range to CIDR notation using the function:</li> </ol> <pre><code>SELECT bigfunctions.us.ip_range2ip_networks('192.168.1.100', '192.168.1.110');\n</code></pre> <p>This will return:</p> <pre><code>+---------------------------------------------------------------------------------+\n| ip_networks                                                                     |\n+---------------------------------------------------------------------------------+\n| [192.168.1.100/32, 192.168.1.102/31, 192.168.1.104/30, 192.168.1.108/30]       |\n+---------------------------------------------------------------------------------+\n</code></pre> <ol> <li>Use the result to filter the logs:</li> </ol> <p>Let's assume the logs are stored in a table named <code>traffic_logs</code> with a column <code>source_ip</code>.</p> <pre><code>SELECT *\nFROM traffic_logs\nWHERE source_ip IN (\n    SELECT ip\n    FROM UNNEST(bigfunctions.us.ip_range2ip_networks('192.168.1.100', '192.168.1.110')) AS ip\n);\n</code></pre> <p>This query effectively filters the <code>traffic_logs</code> table to only show entries where the <code>source_ip</code> falls within the specified IP range. This allows the analyst to easily isolate and analyze traffic from the range of interest.</p> <p>This use case demonstrates how <code>ip_range2ip_networks</code> simplifies working with IP ranges in BigQuery by converting them into a more manageable and query-friendly CIDR representation. This is especially useful when dealing with large datasets and complex filtering requirements.</p> Need help or Found a bug? Get help using <code>ip_range2ip_networks</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ip_range2ip_networks</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/is_email_valid/","title":"is_email_valid","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/is_email_valid/#is_email_valid","title":"is_email_valid","text":"<pre><code>is_email_valid(email)\n</code></pre>"},{"location":"bigfunctions/is_email_valid/#description","title":"Description","text":"<p>Return true if <code>email</code> is valid (inspired from this reddit answer)</p>"},{"location":"bigfunctions/is_email_valid/#usage","title":"Usage","text":"Call or Deploy <code>is_email_valid</code> ? Call <code>is_email_valid</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>is_email_valid</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>is_email_valid</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>is_email_valid</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>is_email_valid</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get is_email_valid\nbigfun deploy is_email_valid\n</code></pre>"},{"location":"bigfunctions/is_email_valid/#examples","title":"Examples","text":"<p>1. with a valid email</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_email_valid(\"paul.marcombes@unytics.io\")\n</code></pre> <pre><code>select bigfunctions.us.is_email_valid(\"paul.marcombes@unytics.io\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_email_valid(\"paul.marcombes@unytics.io\")\n</code></pre> <pre>\n<code>+----------------+\n| is_email_valid |\n+----------------+\n| true           |\n+----------------+\n</code>\n</pre> <p>2. with incorrect format</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_email_valid(\"paul/marcombes@example.com\")\n</code></pre> <pre><code>select bigfunctions.us.is_email_valid(\"paul/marcombes@example.com\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_email_valid(\"paul/marcombes@example.com\")\n</code></pre> <pre>\n<code>+----------------+\n| is_email_valid |\n+----------------+\n| false          |\n+----------------+\n</code>\n</pre> <p>3. with a domain not registrable</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_email_valid(\"paul.marcombes@example.con\")\n</code></pre> <pre><code>select bigfunctions.us.is_email_valid(\"paul.marcombes@example.con\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_email_valid(\"paul.marcombes@example.con\")\n</code></pre> <pre>\n<code>+----------------+\n| is_email_valid |\n+----------------+\n| false          |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/is_email_valid/#use-cases","title":"Use cases","text":"<p>A common use case for the <code>is_email_valid</code> function would be cleaning or validating customer data in a BigQuery table.</p> <p>Imagine you have a table of user information, including an email address column. You want to identify and potentially correct or remove invalid email addresses.</p> <p>Scenario:</p> <p>You have a table named <code>users</code> with columns like <code>user_id</code>, <code>name</code>, and <code>email</code>. You want to create a new table containing only users with valid email addresses.</p> <p>Query:</p> <pre><code>SELECT *\nFROM `your_project.your_dataset.users`\nWHERE bigfunctions.your_region.is_email_valid(email);\n</code></pre> <p>Replace <code>your_project</code>, <code>your_dataset</code>, and <code>your_region</code> with your actual project ID, dataset ID and BigQuery region respectively (like <code>bigfunctions.eu</code> if your dataset is in EU multi-region).</p> <p>This query uses the <code>is_email_valid</code> function to filter the <code>users</code> table, keeping only rows where the <code>email</code> column contains a valid email address according to the function's validation criteria.</p> <p>Other Use Cases:</p> <ul> <li>Data Quality Reporting:  Generate reports on the percentage of valid email addresses in your data. This helps track data quality and identify potential issues.</li> <li>Pre-processing for Marketing Campaigns: Ensure that your marketing emails are sent only to valid email addresses, reducing bounce rates and improving campaign effectiveness.</li> <li>Form Validation: Use the function as part of a data pipeline to validate email addresses submitted through online forms before storing them in your database.</li> <li>Lead Scoring: Assign higher scores to leads with valid email addresses, prioritizing them for sales outreach.</li> </ul> <p>By incorporating the <code>is_email_valid</code> function into your BigQuery workflows, you can improve the accuracy and reliability of your data, leading to better decision-making and more effective business processes.</p> Need help or Found a bug? Get help using <code>is_email_valid</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>is_email_valid</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/is_phone_number_valid/","title":"is_phone_number_valid","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/is_phone_number_valid/#is_phone_number_valid","title":"is_phone_number_valid","text":"<pre><code>is_phone_number_valid(phone_number, options)\n</code></pre>"},{"location":"bigfunctions/is_phone_number_valid/#description","title":"Description","text":"<p>Return if <code>phone_number</code> is valid using libphonenumber-js library.</p> <p>Argument <code>options</code> can be <code>null</code> or must be a json with the following keys: <code>defaultCountry</code>, <code>defaultCallingCode</code> and <code>extract</code> as described in the library documentation.</p>"},{"location":"bigfunctions/is_phone_number_valid/#usage","title":"Usage","text":"Call or Deploy <code>is_phone_number_valid</code> ? Call <code>is_phone_number_valid</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>is_phone_number_valid</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>is_phone_number_valid</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>is_phone_number_valid</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>is_phone_number_valid</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get is_phone_number_valid\nbigfun deploy is_phone_number_valid\n</code></pre>"},{"location":"bigfunctions/is_phone_number_valid/#examples","title":"Examples","text":"<p>1. Check an international <code>phone_number</code> (starting with <code>+</code>)</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid(\"+33123456789\", null)\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid(\"+33123456789\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid(\"+33123456789\", null)\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| true     |\n+----------+\n</code>\n</pre> <p>2. Check a national <code>phone_number</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid(\"0123456789\", json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid(\"0123456789\", json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid(\"0123456789\", json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| true     |\n+----------+\n</code>\n</pre> <p>3. If no phone number is found in <code>phone_number</code>, it returns false</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid(\"Hello!\", null)\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid(\"Hello!\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid(\"Hello!\", null)\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| false    |\n+----------+\n</code>\n</pre> <p>4. By default, if the given <code>phone_number</code> text contains a valid phone number among other text, it returns true.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid(\"Hello +33123456789 !\", null)\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid(\"Hello +33123456789 !\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid(\"Hello +33123456789 !\", null)\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| true     |\n+----------+\n</code>\n</pre> <p>5. To consider that <code>phone_number</code> cannot have additional text use <code>extract:  false</code> as option</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid(\"Hello +33123456789 !\", json '{\"extract\": false}')\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid(\"Hello +33123456789 !\", json '{\"extract\": false}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid(\"Hello +33123456789 !\", json '{\"extract\": false}')\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| false    |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/is_phone_number_valid/#use-cases","title":"Use cases","text":"<p>A common use case for the <code>is_phone_number_valid</code> function is cleaning and validating customer data. Imagine you have a BigQuery table containing customer information, including a phone number column.  This data might have been collected from various sources and could contain errors, inconsistencies, or improperly formatted numbers.</p> <p>Scenario: You want to identify valid phone numbers in your customer data to improve the accuracy of your marketing campaigns, reduce communication errors, and ensure data quality for analysis.</p> <p>Implementation using <code>is_phone_number_valid</code>:</p> <pre><code>#standardSQL\nCREATE OR REPLACE TABLE `your_project.your_dataset.cleaned_customer_data` AS\nSELECT *\nFROM `your_project.your_dataset.customer_data`\nWHERE bigfunctions.your_region.is_phone_number_valid(phone_number, json '{\"defaultCountry\": \"US\"}'); -- Replace \"US\" with the appropriate default country if needed.\n\n-- Alternatively, to handle various international numbers without a default country:\nCREATE OR REPLACE TABLE `your_project.your_dataset.cleaned_customer_data_international` AS\nSELECT *\nFROM `your_project.your_dataset.customer_data`\nWHERE bigfunctions.your_region.is_phone_number_valid(phone_number, NULL); --  Handles international numbers starting with \"+\"\n\n-- Or, to find potentially valid numbers embedded within other text:\nCREATE OR REPLACE TABLE `your_project.your_dataset.potentially_valid_numbers` AS\nSELECT *\nFROM `your_project.your_dataset.customer_data`\nWHERE bigfunctions.your_region.is_phone_number_valid(notes_field, NULL); -- Extract phone numbers from a text field like 'notes'\n</code></pre> <p>Explanation:</p> <ul> <li><code>your_project.your_dataset.customer_data</code>:  Your original table with customer information, including a <code>phone_number</code> column (and potentially other text fields that might contain phone numbers).</li> <li><code>bigfunctions.your_region.is_phone_number_valid(phone_number, ...)</code>: This calls the BigFunction, passing the <code>phone_number</code> column and optional parameters.<ul> <li>Using <code>json '{\"defaultCountry\": \"US\"}'</code> helps validate national numbers without the \"+\" prefix assuming they are from the US.</li> <li>Using <code>NULL</code> as the second argument allows validation of international numbers (starting with \"+\") and attempts to extract phone numbers embedded in other text. You can further refine this with the <code>extract</code> option in the JSON.</li> </ul> </li> <li><code>WHERE</code> clause: Filters the customer data, keeping only rows where the <code>is_phone_number_valid</code> function returns <code>true</code>.</li> </ul> <p>Benefits:</p> <ul> <li>Data Quality: Ensures your customer data contains only valid and consistently formatted phone numbers.</li> <li>Improved Communication: Reduces errors in SMS marketing, phone calls, and other communication efforts.</li> <li>Accurate Analysis: Provides reliable data for customer segmentation, targeting, and other analytical tasks.</li> <li>Cost Savings: Avoids wasted resources on trying to contact invalid or unreachable phone numbers.</li> </ul> <p>This use case demonstrates how <code>is_phone_number_valid</code> can be incorporated into a data cleaning workflow to maintain data integrity and improve the overall quality of your customer data in BigQuery.  Remember to replace <code>\"your_project\"</code>, <code>\"your_dataset\"</code>, <code>\"your_region\"</code>, and <code>\"customer_data\"</code> with your actual values.  And adjust the optional parameters of the <code>is_phone_number_valid</code> function as needed for your specific data and requirements.</p> Need help or Found a bug? Get help using <code>is_phone_number_valid</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>is_phone_number_valid</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/is_public_holiday/","title":"is_public_holiday","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_date</li> </ul>"},{"location":"bigfunctions/is_public_holiday/#is_public_holiday","title":"is_public_holiday","text":"<pre><code>is_public_holiday(date, country_code)\n</code></pre>"},{"location":"bigfunctions/is_public_holiday/#description","title":"Description","text":"<p>Return true if <code>date</code> corresponds to a public holiday in <code>country_code</code></p> <ul> <li>Always return <code>false</code> if date is not between year 1974 and year 2076.</li> <li><code>country_code</code> must be among <code>[AO, AR, AW, AU, AT, AZ, BD, BY, BE, BO, BW, BR, BG, BI, CA, CL, CN, CO, HR, CU, CW, CY, CZ, DK, DJ, DO, EG, EE, ET, FI, FR, GE, DE, GR, HN, HK, HU, IS, IN, IE, IL, IT, JM, JP, KZ, KE, KR, LV, LS, LT, LU, MG, MW, MY, MT, MX, MD, MA, MZ, NA, NL, NZ, NI, NG, MK, NO, PY, PE, PL, PT, RO, RU, SA, RS, SG, SK, SI, ZA, ES, SZ, SE, CH, TW, TN, TR, UA, AE, GB, US, UY, UZ, VE, VN, ZM, ZW]</code></li> <li>Holiday dates come from <code>python-holidays</code>.</li> </ul>"},{"location":"bigfunctions/is_public_holiday/#usage","title":"Usage","text":"Call or Deploy <code>is_public_holiday</code> ? Call <code>is_public_holiday</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>is_public_holiday</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>is_public_holiday</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>is_public_holiday</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>is_public_holiday</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get is_public_holiday\nbigfun deploy is_public_holiday\n</code></pre>"},{"location":"bigfunctions/is_public_holiday/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_public_holiday(date('2022-07-14'), \"FR\")\n</code></pre> <pre><code>select bigfunctions.us.is_public_holiday(date('2022-07-14'), \"FR\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_public_holiday(date('2022-07-14'), \"FR\")\n</code></pre> <pre>\n<code>+-------------------+\n| is_public_holiday |\n+-------------------+\n| true              |\n+-------------------+\n</code>\n</pre>"},{"location":"bigfunctions/is_public_holiday/#use-cases","title":"Use cases","text":"<p>A common use case for the <code>is_public_holiday</code> function is adjusting business metrics or forecasts based on public holiday occurrences.</p> <p>Scenario: An e-commerce company wants to analyze daily sales data and understand the impact of public holidays on sales performance.</p> <p>Implementation using <code>is_public_holiday</code>:</p> <pre><code>SELECT\n    order_date,\n    total_sales,\n    bigfunctions.YOUR_REGION.is_public_holiday(order_date, 'US') AS is_public_holiday_us -- Replace YOUR_REGION with your BigQuery region\n  FROM\n    `your_project.your_dataset.sales_data`\n  WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';\n</code></pre> <p>Explanation:</p> <ol> <li>The query retrieves <code>order_date</code> and <code>total_sales</code> from the <code>sales_data</code> table.</li> <li>It then uses the <code>is_public_holiday</code> function to determine whether each <code>order_date</code> falls on a public holiday in the US.  The region for bigfunctions should be replaced with your BigQuery region (e.g. <code>bigfunctions.us</code>, <code>bigfunctions.eu</code>).</li> <li>The result includes a new column <code>is_public_holiday_us</code> indicating whether each date is a public holiday (true/false).</li> </ol> <p>Further analysis:</p> <p>Having this information, the company can:</p> <ul> <li>Compare sales: Compare sales figures on public holidays versus regular days to quantify the impact.  They might see lower sales on some holidays (e.g., Christmas, when stores might be closed) and higher sales on others (e.g., Black Friday).</li> <li>Adjust forecasts:  Use the historical holiday data to improve sales forecasting accuracy by accounting for the expected impact of upcoming public holidays. For example, they might anticipate increased online sales in the week leading up to a holiday.</li> <li>Identify trends: Identify any specific product categories or customer segments that are particularly affected by public holidays.</li> <li>Optimize marketing campaigns: Plan and execute targeted marketing campaigns around public holidays, taking into account predicted sales fluctuations.</li> </ul> <p>This is just one example.  The <code>is_public_holiday</code> function can be useful in various other scenarios involving date analysis, such as:</p> <ul> <li>Supply chain management: Predicting potential delays due to public holidays in different countries.</li> <li>Human resources: Calculating employee working hours, considering public holidays.</li> <li>Financial analysis:  Understanding market behavior around public holidays.</li> </ul> <p>By integrating the <code>is_public_holiday</code> function into BigQuery queries, businesses can gain valuable insights and make more informed decisions based on a better understanding of the influence of public holidays on their operations.</p> Need help or Found a bug? Get help using <code>is_public_holiday</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>is_public_holiday</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/items2json/","title":"items2json","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/items2json/#items2json","title":"items2json","text":"<pre><code>items2json(key_value_items)\n</code></pre>"},{"location":"bigfunctions/items2json/#description","title":"Description","text":"<p>Returns <code>json</code> object from array of <code>key_value_items</code> which is a <code>array&lt;struct&lt;key string, value string&gt;&gt;</code>.</p>"},{"location":"bigfunctions/items2json/#usage","title":"Usage","text":"Call or Deploy <code>items2json</code> ? Call <code>items2json</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>items2json</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>items2json</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>items2json</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>items2json</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get items2json\nbigfun deploy items2json\n</code></pre>"},{"location":"bigfunctions/items2json/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.items2json([('a', 'foo'), ('b', 'bar')])\n</code></pre> <pre><code>select bigfunctions.us.items2json([('a', 'foo'), ('b', 'bar')])\n</code></pre> <pre><code>select bigfunctions.europe_west1.items2json([('a', 'foo'), ('b', 'bar')])\n</code></pre> <pre>\n<code>+--------------------------+\n| json                     |\n+--------------------------+\n| {\"a\": \"foo\", \"b\": \"bar\"} |\n+--------------------------+\n</code>\n</pre> <p>2. \u26a0\ufe0f Whatever the names of the struct fields: the first field is always considered as the key and the second as the value.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.items2json([struct('a' as value, 'foo' as key), struct('b' as one, 'bar' as two)])\n</code></pre> <pre><code>select bigfunctions.us.items2json([struct('a' as value, 'foo' as key), struct('b' as one, 'bar' as two)])\n</code></pre> <pre><code>select bigfunctions.europe_west1.items2json([struct('a' as value, 'foo' as key), struct('b' as one, 'bar' as two)])\n</code></pre> <pre>\n<code>+--------------------------+\n| json                     |\n+--------------------------+\n| {\"a\": \"foo\", \"b\": \"bar\"} |\n+--------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/items2json/#use-cases","title":"Use cases","text":"<p>Let's say you have a BigQuery table that stores product information, including a set of custom attributes for each product.  These attributes are stored as key-value pairs in an array.  You want to transform this array of key-value pairs into a JSON object for easier processing or export.</p> <p>Example Table:</p> <pre><code>CREATE OR REPLACE TABLE `your_project.your_dataset.products` (\n  product_id INT64,\n  product_name STRING,\n  attributes ARRAY&lt;STRUCT&lt;key STRING, value STRING&gt;&gt;\n);\n\nINSERT INTO `your_project.your_dataset.products` (product_id, product_name, attributes) VALUES\n(1, 'Product A', [('color', 'red'), ('size', 'large'), ('material', 'cotton')]),\n(2, 'Product B', [('color', 'blue'), ('weight', '10kg')]);\n</code></pre> <p>Using <code>items2json</code>:</p> <p>You can use the <code>items2json</code> function to convert the <code>attributes</code> array into a JSON object:</p> <pre><code>SELECT\n  product_id,\n  product_name,\n  bigfunctions.your_region.items2json(attributes) AS attributes_json\nFROM\n  `your_project.your_dataset.products`;\n</code></pre> <p>Result:</p> <pre><code>+------------+--------------+---------------------------------------------------+\n| product_id | product_name | attributes_json                                   |\n+------------+--------------+---------------------------------------------------+\n|          1 | Product A    | {\"color\": \"red\", \"size\": \"large\", \"material\": \"cotton\"} |\n|          2 | Product B    | {\"color\": \"blue\", \"weight\": \"10kg\"}                |\n+------------+--------------+---------------------------------------------------+\n</code></pre> <p>Now, the <code>attributes_json</code> column contains a JSON representation of the product attributes, making it easier to work with in downstream processes.  For instance, you could easily extract individual attribute values using JSON functions or export the data in a JSON format.</p> <p>Another use case could be dynamically constructing JSON payloads for API calls based on data stored in key-value pairs in BigQuery.  Or you might use it to simplify the representation of complex data structures within BigQuery for analysis or reporting purposes.</p> Need help or Found a bug? Get help using <code>items2json</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>items2json</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/json2excel/","title":"json2excel","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>convert_data_format</li> </ul>"},{"location":"bigfunctions/json2excel/#json2excel","title":"json2excel","text":"<pre><code>json2excel(data)\n</code></pre>"},{"location":"bigfunctions/json2excel/#description","title":"Description","text":"<p>Dump data to excel file encoded as a base64 string.</p> <p>This function is useful to combine with <code>send_mail</code> if you want to send an excel file to some people.</p>"},{"location":"bigfunctions/json2excel/#usage","title":"Usage","text":"Call or Deploy <code>json2excel</code> ? Call <code>json2excel</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>json2excel</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>json2excel</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>json2excel</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>json2excel</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get json2excel\nbigfun deploy json2excel\n</code></pre>"},{"location":"bigfunctions/json2excel/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.json2excel(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]')\n</code></pre> <pre><code>select bigfunctions.us.json2excel(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json2excel(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]')\n</code></pre> <pre>\n<code>+------------------+\n| excel_base64     |\n+------------------+\n| UEsDBBQAAAAAA... |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json2excel/#use-cases","title":"Use cases","text":"<p>A practical use case for the <code>json2excel</code> function would be generating and emailing a quick report of daily sales data.  Let's say you have a BigQuery table called <code>daily_sales</code> that gets updated every day with sales information.  You want to send a summary report as an Excel file to your sales team.</p> <p>Here's how you could use <code>json2excel</code> combined with a hypothetical <code>send_mail</code> function (assuming it exists and takes base64 encoded attachments):</p> <pre><code>#standardSQL\nCREATE TEMP FUNCTION FormatSalesForExcel(row STRUCT&lt;date DATE, product STRING, quantity INT64, revenue FLOAT64&gt;) AS (\n    TO_JSON_STRING(row)\n);\n\nWITH SalesData AS (\n    SELECT *\n    FROM `your_project.your_dataset.daily_sales`\n    WHERE date = CURRENT_DATE()\n),\nFormattedSales AS (\n    SELECT FormatSalesForExcel(t) AS json_row\n    FROM SalesData t\n),\nExcelFile AS (\n    SELECT bigfunctions.your_region.json2excel(\n        '[' || STRING_AGG(json_row) || ']'\n    ) AS excel_base64\n    FROM FormattedSales\n)\nSELECT bigfunctions.your_region.send_mail(\n    'sales_team@example.com',\n    'Daily Sales Report',\n    'Please find attached the daily sales report.',\n    'daily_sales_report.xlsx', # Filename\n    excel_base64\n)\nFROM ExcelFile;\n</code></pre> <p>Explanation:</p> <ol> <li>FormatSalesForExcel: This temporary function formats each row of the <code>daily_sales</code> table into a JSON string. This is necessary because <code>json2excel</code> expects a JSON array as input.</li> <li>SalesData:  This CTE selects the relevant sales data for today.</li> <li>FormattedSales: This CTE uses the <code>FormatSalesForExcel</code> function to convert each row into a JSON string.</li> <li>ExcelFile: This CTE uses <code>STRING_AGG</code> to combine all the JSON strings into a single JSON array string, enclosed in brackets <code>[]</code>. This array is then passed to the <code>json2excel</code> function, which returns the Excel file encoded as a base64 string.</li> <li>Final SELECT statement: This statement calls the hypothetical <code>send_mail</code> function, passing the email addresses, subject, body, desired filename, and the base64 encoded Excel data.</li> </ol> <p>This example demonstrates how to use <code>json2excel</code> to dynamically generate an Excel file from BigQuery data and then use it within a larger workflow, such as emailing reports.  You can adapt this pattern to create other kinds of reports, export data extracts in Excel format, or integrate with other systems that consume Excel files. Remember to replace <code>your_project</code>, <code>your_dataset</code>, and <code>your_region</code> with your actual values.</p> Need help or Found a bug? Get help using <code>json2excel</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>json2excel</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/json2xml/","title":"json2xml","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>convert_data_format</li> </ul>"},{"location":"bigfunctions/json2xml/#json2xml","title":"json2xml","text":"<pre><code>json2xml(json)\n</code></pre>"},{"location":"bigfunctions/json2xml/#description","title":"Description","text":"<p>Returns XML for given JSON string</p>"},{"location":"bigfunctions/json2xml/#usage","title":"Usage","text":"Call or Deploy <code>json2xml</code> ? Call <code>json2xml</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>json2xml</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>json2xml</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>json2xml</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>json2xml</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get json2xml\nbigfun deploy json2xml\n</code></pre>"},{"location":"bigfunctions/json2xml/#examples","title":"Examples","text":"<p>1. With valid JSON</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json2xml(\"{\\\"a\\\": {\\\"b\\\": \\\"foo\\\"}}\")\n</code></pre> <pre><code>select bigfunctions.us.json2xml(\"{\\\"a\\\": {\\\"b\\\": \\\"foo\\\"}}\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json2xml(\"{\\\"a\\\": {\\\"b\\\": \\\"foo\\\"}}\")\n</code></pre> <pre>\n<code>+-------------------+\n| xml               |\n+-------------------+\n| &lt;a&gt;&lt;b&gt;foo&lt;/b&gt;&lt;/a&gt; |\n+-------------------+\n</code>\n</pre> <p>2. With valid JSON and with one key that has empty string as a value</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json2xml(\"{\\\"a\\\": \\\"\\\"}\")\n</code></pre> <pre><code>select bigfunctions.us.json2xml(\"{\\\"a\\\": \\\"\\\"}\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json2xml(\"{\\\"a\\\": \\\"\\\"}\")\n</code></pre> <pre>\n<code>+---------+\n| xml     |\n+---------+\n| &lt;a&gt;&lt;/a&gt; |\n+---------+\n</code>\n</pre> <p>3. With invalid JSON</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json2xml(\"{\\\"a\\\": \")\n</code></pre> <pre><code>select bigfunctions.us.json2xml(\"{\\\"a\\\": \")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json2xml(\"{\\\"a\\\": \")\n</code></pre> <pre>\n<code>+------+\n| xml  |\n+------+\n| null |\n+------+\n</code>\n</pre>"},{"location":"bigfunctions/json2xml/#use-cases","title":"Use cases","text":"<p>A practical use case for the <code>json2xml</code> function is converting JSON data stored in BigQuery into an XML format for integration with systems that primarily use XML.</p> <p>Scenario:  You have product data stored in BigQuery in JSON format.  A legacy system or a third-party partner requires product data in XML format for processing or integration.</p> <p>Example:</p> <p>Imagine your BigQuery table <code>product_data</code> has a column <code>product_info</code> containing JSON data like this:</p> <pre><code>{\"product_id\": \"12345\", \"name\": \"Awesome Gadget\", \"price\": 99.99, \"description\": \"A really cool gadget.\"}\n</code></pre> <p>You can use the <code>json2xml</code> function to convert this JSON data to XML within your BigQuery query:</p> <pre><code>SELECT bigfunctions.us.json2xml(product_info) AS product_xml\nFROM `your_project.your_dataset.product_data`;\n</code></pre> <p>This query will produce XML output like this:</p> <pre><code>&lt;product_info&gt;&lt;product_id&gt;12345&lt;/product_id&gt;&lt;name&gt;Awesome Gadget&lt;/name&gt;&lt;price&gt;99.99&lt;/price&gt;&lt;description&gt;A really cool gadget.&lt;/description&gt;&lt;/product_info&gt;\n</code></pre> <p>You can then export this XML data from BigQuery for use in the target system.</p> <p>Other Use Cases:</p> <ul> <li>Data Transformation for API Integration:  Convert JSON responses from APIs to XML for consumption by services that expect XML.</li> <li>Generating XML Reports:  Transform JSON data into structured XML reports for specific business needs.</li> <li>Data Migration: Migrate data stored in JSON format to systems that use XML.</li> <li>Interoperability between Systems: Facilitate data exchange between systems that use different data formats (JSON and XML).</li> </ul> <p>By using <code>json2xml</code> directly within BigQuery, you avoid the need to export the JSON data and process it externally, simplifying the data transformation process and improving efficiency.</p> Need help or Found a bug? Get help using <code>json2xml</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>json2xml</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/json_column_schema/","title":"json_column_schema","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/json_column_schema/#json_column_schema","title":"json_column_schema","text":"<pre><code>json_column_schema(data)\n</code></pre>"},{"location":"bigfunctions/json_column_schema/#description","title":"Description","text":"<p>Returns the schema of a json column .</p> <ul> <li>The schema of the json column is the union of schemas of the json objects of each cell.</li> <li><code>schema</code> is a json object like <code>{path: type}</code> with</li> <li><code>path</code> the path of the nested field</li> <li><code>type</code> among (<code>string</code>, <code>numeric</code>, <code>bool</code>, <code>date</code>, <code>timestamp</code>, <code>array</code>)</li> </ul>"},{"location":"bigfunctions/json_column_schema/#usage","title":"Usage","text":"Call or Deploy <code>json_column_schema</code> ? Call <code>json_column_schema</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>json_column_schema</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>json_column_schema</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>json_column_schema</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>json_column_schema</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get json_column_schema\nbigfun deploy json_column_schema\n</code></pre>"},{"location":"bigfunctions/json_column_schema/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>with sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n      union all\n      select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n)\n\n\nselect bigfunctions.eu.json_column_schema(data)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n      union all\n      select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n)\n\n\nselect bigfunctions.us.json_column_schema(data)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n      union all\n      select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n)\n\n\nselect bigfunctions.europe_west1.json_column_schema(data)\nfrom sample_data\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------+\n| schema                                                                 |\n+------------------------------------------------------------------------+\n| {\"created_at\": \"date\", \"user.name\": \"string\", \"user.friends\": \"array\"} |\n+------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_column_schema/#use-cases","title":"Use cases","text":"<p>You have a BigQuery table containing a JSON column, and you want to understand the structure and data types within those JSON objects.  However, the JSON data isn't entirely consistent across all rows; some rows might have additional fields or different data types for the same field.  <code>json_column_schema</code> helps you discover all the possible fields and their respective types present in the entire column.</p> <p>Scenario: You're analyzing event data stored as JSON in BigQuery.  Each event might have slightly different properties.  For instance:</p> <pre><code>{\"event_type\": \"page_view\", \"url\": \"/home\", \"user_id\": 123}\n{\"event_type\": \"purchase\", \"item_id\": 456, \"user_id\": 456, \"value\": 10.99}\n{\"event_type\": \"sign_up\", \"user_id\": 789, \"referral_code\": \"ABC\"}\n</code></pre> <p>Use Case with <code>json_column_schema</code>:</p> <pre><code>WITH event_data AS (\n    SELECT JSON '{\"event_type\": \"page_view\", \"url\": \"/home\", \"user_id\": 123}' AS event_json\n    UNION ALL\n    SELECT JSON '{\"event_type\": \"purchase\", \"item_id\": 456, \"user_id\": 456, \"value\": 10.99}' AS event_json\n    UNION ALL\n    SELECT JSON '{\"event_type\": \"sign_up\", \"user_id\": 789, \"referral_code\": \"ABC\"}' AS event_json\n)\nSELECT bigfunctions.us.json_column_schema(event_json) AS schema\nFROM event_data;\n</code></pre> <p>Result:</p> <pre><code>{\"event_type\": \"string\", \"url\": \"string\", \"user_id\": \"numeric\", \"item_id\": \"numeric\", \"value\": \"numeric\", \"referral_code\": \"string\"}\n</code></pre> <p>Benefits:</p> <ul> <li>Schema Discovery: You automatically identify all potential fields and their most general types within the JSON column without manual inspection.</li> <li>Data Validation: You can use the generated schema to validate incoming data or build data quality checks.</li> <li>Downstream Processing:  Knowing the complete schema helps you design efficient queries and transformations for further analysis.  For example, you could use this information to create a materialized view with extracted JSON fields.</li> </ul> <p>This function is particularly useful for exploring and understanding semi-structured JSON data where the schema might not be strictly enforced or evolves over time.  It allows you to programmatically handle variations in JSON structure.</p> Need help or Found a bug? Get help using <code>json_column_schema</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>json_column_schema</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/json_items/","title":"json_items","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/json_items/#json_items","title":"json_items","text":"<pre><code>json_items(json_string)\n</code></pre>"},{"location":"bigfunctions/json_items/#description","title":"Description","text":"<p>Extract <code>key_value_items</code> from <code>json_string</code> which has only flat (no nested) key-values. Return <code>key_value_items</code> as <code>array&lt; struct&lt;key string, value string&gt; &gt;</code></p>"},{"location":"bigfunctions/json_items/#usage","title":"Usage","text":"Call or Deploy <code>json_items</code> ? Call <code>json_items</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>json_items</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>json_items</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>json_items</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>json_items</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get json_items\nbigfun deploy json_items\n</code></pre>"},{"location":"bigfunctions/json_items/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_items(\"{\\\"created_at\\\": \\\"2022-01-01\\\", \\\"user\\\": \\\"sidali\\\"}\")\n</code></pre> <pre><code>select bigfunctions.us.json_items(\"{\\\"created_at\\\": \\\"2022-01-01\\\", \\\"user\\\": \\\"sidali\\\"}\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_items(\"{\\\"created_at\\\": \\\"2022-01-01\\\", \\\"user\\\": \\\"sidali\\\"}\")\n</code></pre> <pre>\n<code>+-----------------------------------------------------------------------------------------------------+\n| key_value_items                                                                                     |\n+-----------------------------------------------------------------------------------------------------+\n| [\n|   struct(\"created_at\" as key, \"date\" as value),\n|   struct(\"user\" as key, \"name\" as value)\n| ]\n |\n+-----------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_items/#use-cases","title":"Use cases","text":"<p>You have a table in BigQuery containing a column with JSON strings representing product details. Each JSON string has a flat structure (no nested objects).  You want to extract the key-value pairs from these JSON strings and analyze them.</p> <p>Example Table:</p> <pre><code>products\n| product_id | details                                    |\n|------------|--------------------------------------------|\n| 1          | '{\"name\": \"Laptop\", \"price\": \"1200\", \"brand\": \"XYZ\"}' |\n| 2          | '{\"name\": \"Mouse\", \"price\": \"25\", \"brand\": \"ABC\"}'   |\n| 3          | '{\"name\": \"Keyboard\", \"price\": \"75\", \"brand\": \"XYZ\"}'|\n</code></pre> <p>Query using <code>json_items</code>:</p> <pre><code>SELECT\n    product_id,\n    item.key,\n    item.value\n  FROM\n    `your-project.your_dataset.products`,\n    UNNEST(bigfunctions.your-region.json_items(details)) AS item;\n</code></pre> <p>Result:</p> <pre><code>| product_id | key    | value |\n|------------|--------|-------|\n| 1          | name   | Laptop|\n| 1          | price  | 1200  |\n| 1          | brand  | XYZ   |\n| 2          | name   | Mouse |\n| 2          | price  | 25    |\n| 2          | brand  | ABC   |\n| 3          | name   | Keyboard |\n| 3          | price  | 75    |\n| 3          | brand  | XYZ   |\n</code></pre> <p>This allows you to easily query and analyze individual attributes of the products, such as finding all products of a certain brand or within a specific price range.  You've effectively transformed semi-structured JSON data into a relational format for easier analysis with standard SQL.  Remember to replace <code>your-project</code>, <code>your_dataset</code>, and <code>your-region</code> with your actual values.</p> Need help or Found a bug? Get help using <code>json_items</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>json_items</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/json_keys/","title":"json_keys","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/json_keys/#json_keys","title":"json_keys","text":"<pre><code>json_keys(json_string)\n</code></pre>"},{"location":"bigfunctions/json_keys/#description","title":"Description","text":"<p>Extract <code>keys</code> from <code>json_string</code> which has only flat (no nested) key-values. Return <code>keys</code> as an <code>array&lt;string&gt;</code></p>"},{"location":"bigfunctions/json_keys/#usage","title":"Usage","text":"Call or Deploy <code>json_keys</code> ? Call <code>json_keys</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>json_keys</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>json_keys</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>json_keys</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>json_keys</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get json_keys\nbigfun deploy json_keys\n</code></pre>"},{"location":"bigfunctions/json_keys/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_keys(\"{\\\"created_at\\\": \\\"2022-01-01\\\", \\\"user\\\": \\\"sidali\\\"}\")\n</code></pre> <pre><code>select bigfunctions.us.json_keys(\"{\\\"created_at\\\": \\\"2022-01-01\\\", \\\"user\\\": \\\"sidali\\\"}\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_keys(\"{\\\"created_at\\\": \\\"2022-01-01\\\", \\\"user\\\": \\\"sidali\\\"}\")\n</code></pre> <pre>\n<code>+------------------------+\n| keys                   |\n+------------------------+\n| ['created_at', 'user'] |\n+------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_keys/#use-cases","title":"Use cases","text":"<p>You have a BigQuery table containing a column with JSON strings representing product information. Each JSON string has a flat structure (no nested objects) with keys like \"product_name\", \"price\", \"category\", etc. You want to extract all the keys present in these JSON strings.</p> <p>Example Table:</p> <p>| product_info (STRING) | |---|---| | <code>{\"product_name\": \"Laptop\", \"price\": 1200, \"category\": \"electronics\"}</code> | | <code>{\"product_name\": \"T-shirt\", \"category\": \"clothing\", \"color\": \"blue\"}</code> | | <code>{\"price\": 25, \"product_name\": \"Book\", \"author\": \"Jane Doe\"}</code> |</p> <p>Query using <code>json_keys</code>:</p> <pre><code>SELECT bigfunctions.us.json_keys(product_info) AS keys\nFROM `your_project.your_dataset.your_table`;\n</code></pre> <p>Result:</p> <p>| keys (ARRAY) | |---|---| | <code>[\"product_name\", \"price\", \"category\"]</code> | | <code>[\"product_name\", \"category\", \"color\"]</code> | | <code>[\"price\", \"product_name\", \"author\"]</code> | <p>This allows you to dynamically determine the keys present in each JSON string without hardcoding them. You could then use this information for various purposes like:</p> <ul> <li>Schema validation: Verify that all expected keys are present in the JSON data.</li> <li>Data transformation:  Create new columns based on the extracted keys.</li> <li>Dynamic querying: Construct queries that access fields within the JSON based on the available keys.</li> <li>Data analysis: Analyze the frequency of different keys to understand the structure of your JSON data.</li> </ul> Need help or Found a bug? Get help using <code>json_keys</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>json_keys</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/json_merge/","title":"json_merge","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/json_merge/#json_merge","title":"json_merge","text":"<pre><code>json_merge(json_string1, json_string2)\n</code></pre>"},{"location":"bigfunctions/json_merge/#description","title":"Description","text":"<p>Merge <code>json_string1</code> and <code>json_string2</code></p>"},{"location":"bigfunctions/json_merge/#usage","title":"Usage","text":"Call or Deploy <code>json_merge</code> ? Call <code>json_merge</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>json_merge</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>json_merge</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>json_merge</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>json_merge</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get json_merge\nbigfun deploy json_merge\n</code></pre>"},{"location":"bigfunctions/json_merge/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_merge(\"{\\\"k1\\\": \\\"v1\\\"}\", \"{\\\"k2\\\": \\\"v2\\\"}\")\n</code></pre> <pre><code>select bigfunctions.us.json_merge(\"{\\\"k1\\\": \\\"v1\\\"}\", \"{\\\"k2\\\": \\\"v2\\\"}\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_merge(\"{\\\"k1\\\": \\\"v1\\\"}\", \"{\\\"k2\\\": \\\"v2\\\"}\")\n</code></pre> <pre>\n<code>+--------------------------+\n| merged_json              |\n+--------------------------+\n| {\"k1\": \"v1\", \"k2\": \"v2\"} |\n+--------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_merge/#use-cases","title":"Use cases","text":"<p>You have a table with customer data split into two JSON string columns, perhaps due to limitations in how the data was initially collected or stored. You want to combine these two JSON strings into a single, unified JSON object for easier querying and analysis.</p> <p>Example Scenario:</p> <p>Imagine a table named <code>customers</code> with columns <code>customer_info_1</code> and <code>customer_info_2</code> containing JSON strings:</p> <pre><code>| customer_id | customer_info_1        | customer_info_2           |\n|-------------|-------------------------|--------------------------|\n| 1           | '{\"name\": \"John Doe\", \"age\": 30}' | '{\"city\": \"New York\", \"country\": \"USA\"}' |\n| 2           | '{\"name\": \"Jane Smith\", \"age\": 25}' | '{\"city\": \"London\", \"country\": \"UK\"}'   |\n</code></pre> <p>Query using <code>json_merge</code>:</p> <pre><code>SELECT\n    customer_id,\n    bigfunctions.us.json_merge(customer_info_1, customer_info_2) AS merged_customer_info\nFROM\n    `your_project.your_dataset.customers`;\n</code></pre> <p>Result:</p> <pre><code>| customer_id | merged_customer_info                                           |\n|-------------|-----------------------------------------------------------------|\n| 1           | '{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}' |\n| 2           | '{\"name\": \"Jane Smith\", \"age\": 25, \"city\": \"London\", \"country\": \"UK\"}'   |\n</code></pre> <p>This now provides a single <code>merged_customer_info</code> column containing all customer data in a single JSON object, making it much easier to query using BigQuery's JSON functions.  For example, you could now easily find all customers in the UK with:</p> <pre><code>SELECT *\nFROM `your_project.your_dataset.customers`\nWHERE JSON_VALUE(merged_customer_info, '$.country') = 'UK';\n</code></pre> <p>This is just one example.  Other uses could include:</p> <ul> <li>Combining data from different APIs: If you're pulling data from multiple APIs that return JSON, <code>json_merge</code> can help combine the responses into a single object.</li> <li>Progressive profiling: You might gather user data in stages, storing each stage in a separate JSON string.  <code>json_merge</code> allows you to consolidate this data as it becomes available.</li> <li>Simplifying data storage: Instead of having multiple JSON columns, you can combine them into one, making your table schema cleaner and easier to manage.</li> </ul> <p>It's important to note how <code>json_merge</code> handles conflicts. If both JSON strings have the same key, the value from the second JSON string (<code>json_string2</code>) will overwrite the value from the first.  This behavior is important to consider when designing your data model.</p> Need help or Found a bug? Get help using <code>json_merge</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>json_merge</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/json_query/","title":"json_query","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/json_query/#json_query","title":"json_query","text":"<pre><code>json_query(json_string, query)\n</code></pre>"},{"location":"bigfunctions/json_query/#description","title":"Description","text":"<p>Extract data from <code>json_string</code> using advanced json querying offered by JMESPath.</p> <p>JMESPath Links:</p> <ul> <li>See JMESPath Tutorial for exhaustive <code>query</code> possibilities</li> <li>GitHub of jmespath.js</li> </ul>"},{"location":"bigfunctions/json_query/#usage","title":"Usage","text":"Call or Deploy <code>json_query</code> ? Call <code>json_query</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>json_query</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>json_query</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>json_query</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>json_query</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get json_query\nbigfun deploy json_query\n</code></pre>"},{"location":"bigfunctions/json_query/#examples","title":"Examples","text":"<p>1. Basic Query</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo\")\n</code></pre> <pre><code>select bigfunctions.us.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo\")\n</code></pre> <pre>\n<code>+----------------------------------+\n| result                           |\n+----------------------------------+\n| [{\"first\": \"a\"}, {\"first\": \"c\"}] |\n+----------------------------------+\n</code>\n</pre> <p>2. Getting array sub-items</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo[*].first\")\n</code></pre> <pre><code>select bigfunctions.us.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo[*].first\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo[*].first\")\n</code></pre> <pre>\n<code>+------------+\n| result     |\n+------------+\n| ['a', 'c'] |\n+------------+\n</code>\n</pre> <p>3. Slicing</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo[:1].first\")\n</code></pre> <pre><code>select bigfunctions.us.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo[:1].first\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo[:1].first\")\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| ['a']  |\n+--------+\n</code>\n</pre> <p>4. Projecting</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo[*].{name: first}\")\n</code></pre> <pre><code>select bigfunctions.us.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo[*].{name: first}\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_query(\"{\\\"foo\\\": [{\\\"first\\\": \\\"a\\\"}, {\\\"first\\\": \\\"c\\\"}]}\", \"foo[*].{name: first}\")\n</code></pre> <pre>\n<code>+--------------------------------+\n| result                         |\n+--------------------------------+\n| [{\"name\": \"a\"}, {\"name\": \"c\"}] |\n+--------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_query/#use-cases","title":"Use cases","text":"<p>Let's imagine you have a BigQuery table storing user activity logs, where each row contains a JSON string representing various actions a user took within a session.  The JSON structure might look like this:</p> <pre><code>{\n  \"userId\": \"12345\",\n  \"sessionId\": \"abcde\",\n  \"actions\": [\n    {\"type\": \"pageview\", \"url\": \"/home\"},\n    {\"type\": \"click\", \"element\": \"button1\"},\n    {\"type\": \"form_submit\", \"data\": {\"name\": \"John\", \"email\": \"john@example.com\"}},\n    {\"type\": \"pageview\", \"url\": \"/products\"},\n    {\"type\": \"click\", \"element\": \"addtocart\"}\n  ]\n}\n</code></pre> <p>Here are a few use cases for the <code>json_query</code> function with this data:</p> <ol> <li>Extracting all URLs visited during a session:</li> </ol> <pre><code>SELECT bigfunctions.YOUR_REGION.json_query(activity_json, 'actions[*].url') AS visited_urls\nFROM your_table\nWHERE userId = '12345' AND sessionId = 'abcde';\n</code></pre> <p>This query would return an array like <code>[\"/home\", \"/products\"]</code>.</p> <ol> <li>Finding all \"click\" actions and the elements clicked:</li> </ol> <pre><code>SELECT bigfunctions.YOUR_REGION.json_query(activity_json, 'actions[?type==`click`].element') AS clicked_elements\nFROM your_table\nWHERE userId = '12345' AND sessionId = 'abcde';\n</code></pre> <p>This would return <code>[\"button1\", \"addtocart\"]</code>.</p> <ol> <li>Getting the data submitted in a form:</li> </ol> <pre><code>SELECT bigfunctions.YOUR_REGION.json_query(activity_json, 'actions[?type==`form_submit`].data') AS form_data\nFROM your_table\nWHERE userId = '12345' AND sessionId = 'abcde';\n</code></pre> <p>This would return an array containing a single object: <code>[{\"name\": \"John\", \"email\": \"john@example.com\"}]</code>.  You could further refine this to get specific fields within the <code>data</code> object.</p> <ol> <li>Checking if a specific action type occurred:</li> </ol> <pre><code>SELECT bigfunctions.YOUR_REGION.json_query(activity_json, 'actions[?type==`purchase`]') IS NOT NULL AS purchased\nFROM your_table\nWHERE userId = '12345' AND sessionId = 'abcde';\n</code></pre> <p>This query returns <code>true</code> if a \"purchase\" action exists in the <code>actions</code> array and <code>false</code> otherwise.</p> <p>These examples demonstrate the flexibility of <code>json_query</code> for extracting and analyzing data from complex JSON structures within BigQuery.  The function's use of JMESPath allows for complex filtering and projections, simplifying tasks that would otherwise require more complicated SQL or User-Defined Functions (UDFs).</p> Need help or Found a bug? Get help using <code>json_query</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>json_query</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/json_schema/","title":"json_schema","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/json_schema/#json_schema","title":"json_schema","text":"<pre><code>json_schema(data)\n</code></pre>"},{"location":"bigfunctions/json_schema/#description","title":"Description","text":"<p>Returns the schema of <code>data</code> (with <code>data</code> a json object) as <code>[{path, type}]</code> with <code>path</code> the path of the nested field and <code>type</code> among (<code>string</code>, <code>numeric</code>, <code>bool</code>, <code>date</code>, <code>timestamp</code>)</p>"},{"location":"bigfunctions/json_schema/#usage","title":"Usage","text":"Call or Deploy <code>json_schema</code> ? Call <code>json_schema</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>json_schema</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>json_schema</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>json_schema</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>json_schema</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get json_schema\nbigfun deploy json_schema\n</code></pre>"},{"location":"bigfunctions/json_schema/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_schema({\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\", \"friends\": [\"Jack\", \"Peter\"]}})\n</code></pre> <pre><code>select bigfunctions.us.json_schema({\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\", \"friends\": [\"Jack\", \"Peter\"]}})\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_schema({\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\", \"friends\": [\"Jack\", \"Peter\"]}})\n</code></pre> <pre>\n<code>+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| schema                                                                                                                                                          |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n|   struct(\"created_at\" as path, \"date\" as type),\n|   struct(\"user.name\" as path, \"string\" as type),\n|   struct(\"user.friends\" as path, \"array\" as type)\n| ]\n |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_schema/#use-cases","title":"Use cases","text":"<p>A use case for the <code>json_schema</code> function is to dynamically determine the schema of JSON data stored in a BigQuery table without prior knowledge of its structure. This can be particularly helpful in situations like:</p> <ul> <li> <p>Data ingestion from diverse sources: Imagine receiving JSON data from various APIs or partners where the structure might not be consistent or documented thoroughly. <code>json_schema</code> can be used to automatically analyze a sample of the incoming data and infer its schema. This information can then be used to create or validate table schemas, ensuring proper data loading.</p> </li> <li> <p>Data exploration and analysis: When dealing with unfamiliar JSON data, <code>json_schema</code> helps quickly understand its structure and the types of information it contains. This is useful for exploratory data analysis and building queries without manually examining the JSON objects.</p> </li> <li> <p>Schema evolution tracking: By periodically applying <code>json_schema</code> to incoming data, you can detect changes in the JSON structure over time. This allows you to adapt your processing pipelines or table schemas as needed, ensuring compatibility and avoiding errors.</p> </li> <li> <p>Data validation: After inferring the schema, it can be used to validate subsequent JSON data against the expected structure. This can prevent malformed data from being ingested, ensuring data quality.</p> </li> <li> <p>Automated documentation: The output of <code>json_schema</code> can be used to generate documentation for the JSON data, simplifying communication and understanding among different teams or users.</p> </li> </ul> <p>Example Scenario:</p> <p>Let's say you have a BigQuery table containing a <code>raw_data</code> column storing JSON strings from different sources.  You can use the following query to get the schema of the JSON data in each row:</p> <pre><code>SELECT bigfunctions.us.json_schema(raw_data) AS inferred_schema\nFROM your_dataset.your_table;\n</code></pre> <p>This will return a table where each row contains the inferred schema of the corresponding JSON data in <code>raw_data</code>.  You can then further process this output to:</p> <ul> <li>Identify the common schema across different JSON data.</li> <li>Create a new table with the appropriate schema to store the extracted JSON data in a structured format.</li> <li>Flag rows with unexpected schemas for further investigation.</li> </ul> <p>By dynamically determining the schema of JSON data using <code>json_schema</code>, you can make your data ingestion, analysis, and validation processes more robust and efficient.</p> Need help or Found a bug? Get help using <code>json_schema</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>json_schema</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/json_values/","title":"json_values","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/json_values/#json_values","title":"json_values","text":"<pre><code>json_values(json_string)\n</code></pre>"},{"location":"bigfunctions/json_values/#description","title":"Description","text":"<p>Extract <code>values</code> from <code>json_string</code> which has only flat (no nested) key-values. Return <code>values</code> as an <code>array&lt;string&gt;</code></p>"},{"location":"bigfunctions/json_values/#usage","title":"Usage","text":"Call or Deploy <code>json_values</code> ? Call <code>json_values</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>json_values</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>json_values</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>json_values</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>json_values</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get json_values\nbigfun deploy json_values\n</code></pre>"},{"location":"bigfunctions/json_values/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_values(\"{\\\"created_at\\\": \\\"2022-01-01\\\", \\\"user\\\": \\\"sidali\\\"}\")\n</code></pre> <pre><code>select bigfunctions.us.json_values(\"{\\\"created_at\\\": \\\"2022-01-01\\\", \\\"user\\\": \\\"sidali\\\"}\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_values(\"{\\\"created_at\\\": \\\"2022-01-01\\\", \\\"user\\\": \\\"sidali\\\"}\")\n</code></pre> <pre>\n<code>+--------------------------+\n| values                   |\n+--------------------------+\n| ['2022-01-01', 'sidali'] |\n+--------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_values/#use-cases","title":"Use cases","text":"<p>You have a table in BigQuery that stores JSON strings representing user activity.  Each JSON string contains key-value pairs where the keys represent activity types and the values represent timestamps or user IDs.  You want to extract all the values from these JSON strings to analyze the different types of activities performed without needing to know the specific keys.</p> <p>Example Table:</p> UserID ActivityJSON 1 <code>{\"login\": \"2023-10-26 10:00:00\", \"purchase\": \"item123\"}</code> 2 <code>{\"logout\": \"2023-10-26 10:15:00\", \"view_product\": \"item456\"}</code> 3 <code>{\"login\": \"2023-10-26 10:30:00\", \"add_to_cart\": \"item789\"}</code> <p>Query using <code>json_values</code>:</p> <pre><code>SELECT\n    UserID,\n    bigfunctions.us.json_values(ActivityJSON) AS ActivityValues\nFROM\n    `your_project.your_dataset.your_table`;\n</code></pre> <p>Result:</p> UserID ActivityValues 1 <code>['2023-10-26 10:00:00', 'item123']</code> 2 <code>['2023-10-26 10:15:00', 'item456']</code> 3 <code>['2023-10-26 10:30:00', 'item789']</code> <p>Now you have an array of values for each user, which you can further process. For instance, you could unnest the array to analyze the frequency of different activity values or join it with another table based on these values.  The key benefit here is that you've extracted the relevant data without needing to explicitly parse the JSON based on individual keys.  This is particularly useful when the keys in the JSON strings can vary across different rows but the values themselves hold the information you're interested in.</p> Need help or Found a bug? Get help using <code>json_values</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>json_values</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/last_value/","title":"last_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/last_value/#last_value","title":"last_value","text":"<pre><code>last_value(arr)\n</code></pre>"},{"location":"bigfunctions/last_value/#description","title":"Description","text":"<p>Return last value of array (inspired from sql-snippets repo)</p>"},{"location":"bigfunctions/last_value/#usage","title":"Usage","text":"Call or Deploy <code>last_value</code> ? Call <code>last_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>last_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>last_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>last_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>last_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get last_value\nbigfun deploy last_value\n</code></pre>"},{"location":"bigfunctions/last_value/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.last_value([1, 2, 3])\n</code></pre> <pre><code>select bigfunctions.us.last_value([1, 2, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.last_value([1, 2, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 3     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/last_value/#use-cases","title":"Use cases","text":"<p>Imagine you have a table of customer orders, and each order has an array of timestamps representing different stages of the order fulfillment process (e.g., order placed, payment processed, shipped, delivered).  You want to find the last timestamp in each array, which would represent the time the order was completed (delivered in this example).</p> <pre><code>SELECT\n    order_id,\n    bigfunctions.us.last_value(fulfillment_timestamps) AS order_completion_timestamp\nFROM\n    your_project.your_dataset.your_order_table\n</code></pre> <p>This query would use the <code>last_value</code> function to extract the last timestamp from the <code>fulfillment_timestamps</code> array for each order, giving you the order completion time.</p> <p>Other use cases could include:</p> <ul> <li>Finding the latest status update:  If you have an array of status updates for a task or project, <code>last_value</code> can give you the most recent status.</li> <li>Getting the last element of a sequence:  If you have an array representing a sequence of events, <code>last_value</code> can retrieve the final event in the sequence.</li> <li>Extracting the latest value from sensor readings: If you have an array of sensor readings over time, <code>last_value</code> can retrieve the most recent reading.</li> </ul> <p>Essentially, anytime you need to efficiently extract the last element from an array within BigQuery, the <code>last_value</code> function provides a clean and easy solution.</p> Need help or Found a bug? Get help using <code>last_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>last_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/list_public_datasets/","title":"list_public_datasets","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>public_services</li> </ul>"},{"location":"bigfunctions/list_public_datasets/#list_public_datasets","title":"list_public_datasets","text":"<pre><code>list_public_datasets()\n</code></pre>"},{"location":"bigfunctions/list_public_datasets/#description","title":"Description","text":"<p>Returns list of BigQuery <code>public_datasets</code></p>"},{"location":"bigfunctions/list_public_datasets/#usage","title":"Usage","text":"Call or Deploy <code>list_public_datasets</code> ? Call <code>list_public_datasets</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>list_public_datasets</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>list_public_datasets</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>list_public_datasets</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>list_public_datasets</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get list_public_datasets\nbigfun deploy list_public_datasets\n</code></pre>"},{"location":"bigfunctions/list_public_datasets/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.list_public_datasets()\n</code></pre> <pre><code>select bigfunctions.us.list_public_datasets()\n</code></pre> <pre><code>select bigfunctions.europe_west1.list_public_datasets()\n</code></pre> <pre>\n<code>+---------------------------------------------------------------------------------------------------+\n| public_datasets                                                                                   |\n+---------------------------------------------------------------------------------------------------+\n| [\n  \"bigquery-public-data.america_health_rankings\",\n  \"bigquery-public-data.austin_311\",\n  ...\n]\n |\n+---------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/list_public_datasets/#use-cases","title":"Use cases","text":"<p>A use case for the <code>list_public_datasets</code> BigQuery function is to dynamically discover and explore the available public datasets in BigQuery.  This can be useful for several scenarios:</p> <ol> <li> <p>Data Discovery and Exploration: A data analyst or scientist might want to explore what public datasets are available for research or analysis without manually browsing the BigQuery UI or relying on outdated documentation. This function provides a quick and programmatic way to get a list of all public datasets.</p> </li> <li> <p>Automated Data Pipelines:  In an automated data pipeline, you could use this function to check for the existence of a specific public dataset before attempting to query it. This adds robustness to your pipeline, handling cases where a dataset might be temporarily unavailable or renamed.</p> </li> <li> <p>Building a Data Catalog: You can use the output of this function to populate a custom data catalog or metadata store. This allows you to maintain an internal index of available public datasets with additional metadata, such as descriptions or tags.</p> </li> <li> <p>Interactive Data Exploration Tools:  A web application or interactive notebook could use this function to present users with a list of available public datasets to choose from for analysis.</p> </li> <li> <p>Training and Education: In a training environment, this function can be used to quickly demonstrate the breadth of publicly available data in BigQuery, allowing students to explore different datasets.</p> </li> </ol> <p>Example Scenario:</p> <p>Let's say a data analyst wants to build a dashboard showing trends in cryptocurrency prices. They know there are several public datasets related to cryptocurrency, but they're not sure of the exact names or what data is available. They can use the <code>list_public_datasets</code> function to get a list of all public datasets. Then, they can filter that list (perhaps using a regular expression) to find datasets related to cryptocurrency and explore their schemas to determine which datasets are suitable for their dashboard.</p> <p>Code Example (Illustrative):</p> <pre><code>SELECT dataset_id\nFROM UNNEST(bigfunctions.us.list_public_datasets()) AS dataset_id\nWHERE REGEXP_CONTAINS(dataset_id, r'cryptocurrency');\n</code></pre> <p>This query would return all public datasets containing the term \"cryptocurrency\" in their ID, allowing the analyst to quickly identify relevant datasets.</p> Need help or Found a bug? Get help using <code>list_public_datasets</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>list_public_datasets</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/list_scheduled_queries/","title":"list_scheduled_queries","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/list_scheduled_queries/#list_scheduled_queries","title":"list_scheduled_queries","text":"<pre><code>list_scheduled_queries(project)\n</code></pre>"},{"location":"bigfunctions/list_scheduled_queries/#description","title":"Description","text":"<p>Returns<code>scheduled_queries</code> of project <code>project</code>.</p> <p>Result is a list of TransferConfig.</p>"},{"location":"bigfunctions/list_scheduled_queries/#usage","title":"Usage","text":"Call or Deploy <code>list_scheduled_queries</code> ? Call <code>list_scheduled_queries</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>list_scheduled_queries</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>list_scheduled_queries</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>list_scheduled_queries</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>list_scheduled_queries</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get list_scheduled_queries\nbigfun deploy list_scheduled_queries\n</code></pre>"},{"location":"bigfunctions/list_scheduled_queries/#examples","title":"Examples","text":"<p>If <code>project</code> is null, then the current project is used</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.list_scheduled_queries(\"None\")\n</code></pre> <pre><code>select bigfunctions.us.list_scheduled_queries(\"None\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.list_scheduled_queries(\"None\")\n</code></pre> <pre>\n<code>+---------------------------------------------------------------------------------------------------+\n| scheduled_queries                                                                                 |\n+---------------------------------------------------------------------------------------------------+\n| [\n  \"bigquery-public-data.america_health_rankings\",\n  \"bigquery-public-data.austin_311\",\n  ...\n]\n |\n+---------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/list_scheduled_queries/#use-cases","title":"Use cases","text":"<p>A use case for the <code>list_scheduled_queries</code> function would be for an administrator or developer who needs to gain an overview of all scheduled queries within a specific Google Cloud project.  Here are some more detailed scenarios:</p> <ul> <li> <p>Auditing and Governance: A data governance team could use this function to regularly check for any unauthorized or outdated scheduled queries.  They could then disable or modify them as needed, ensuring compliance with data policies.</p> </li> <li> <p>Monitoring and Performance Tuning: By listing all scheduled queries, a performance engineer can identify resource-intensive queries that might be impacting overall BigQuery performance. This allows for optimization efforts and better resource allocation.</p> </li> <li> <p>Documentation and Knowledge Sharing:  This function can be used to generate a list of existing scheduled queries for documentation purposes. This is useful for onboarding new team members or understanding the data pipelines within a project.</p> </li> <li> <p>Dependency Management: Before making changes to underlying datasets or tables, a developer could use <code>list_scheduled_queries</code> to identify any scheduled queries that depend on those resources. This helps prevent unintended consequences and ensures a smooth transition during updates.</p> </li> <li> <p>Troubleshooting and Debugging: When investigating issues with data freshness or unexpected results, knowing which scheduled queries are running and their configurations is crucial.  This function provides that information quickly and easily.</p> </li> <li> <p>Building Management Tools: You could integrate this function into a custom management tool or dashboard that provides a centralized view of all scheduled tasks within a project, including queries, data transfers, and other operations.</p> </li> </ul> <p>Example: Imagine a company that uses scheduled queries to generate daily reports. They could use <code>list_scheduled_queries</code> within a script to:</p> <ol> <li>Retrieve all scheduled queries.</li> <li>Filter the list based on specific criteria (e.g., queries that run on a specific dataset, or queries containing certain keywords).</li> <li>Generate alerts if any crucial scheduled queries are missing or disabled.</li> <li>Automatically enable or disable queries based on certain conditions.</li> </ol> <p>This allows for programmatic control and monitoring of scheduled queries, simplifying administration and improving reliability.</p> Need help or Found a bug? Get help using <code>list_scheduled_queries</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>list_scheduled_queries</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/load_duckdb_database/","title":"load_duckdb_database","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>web</li> </ul>"},{"location":"bigfunctions/load_duckdb_database/#load_duckdb_database","title":"load_duckdb_database","text":"<pre><code>load_duckdb_database(duckdb_file_url, destination_dataset)\n</code></pre>"},{"location":"bigfunctions/load_duckdb_database/#description","title":"Description","text":"<p>Download duckdb database into <code>destination_dataset</code></p> <p>This function extends <code>load_duckdb_database_into_temp_dataset</code> function.</p> <p>Each call:</p> <ol> <li>Creates a new temporary dataset only accessible to you in bigfunctions project.</li> <li>Downloads the tables of the duckdb database to this temporary dataset.</li> <li>Copies the table into <code>destination_dataset</code> before deleting the temporary dataset.</li> </ol>"},{"location":"bigfunctions/load_duckdb_database/#usage","title":"Usage","text":"Call or Deploy <code>load_duckdb_database</code> ? Call <code>load_duckdb_database</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>load_duckdb_database</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>load_duckdb_database</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>load_duckdb_database</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>load_duckdb_database</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get load_duckdb_database\nbigfun deploy load_duckdb_database\n</code></pre>"},{"location":"bigfunctions/load_duckdb_database/#examples","title":"Examples","text":"<p>load duckdb database used in evidence examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_duckdb_database(\"https://github.com/evidence-dev/sql-prophet/raw/refs/heads/main/sources/needful_things/needful_things.duckdb\", \"your_project.your_dataset\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_duckdb_database(\"https://github.com/evidence-dev/sql-prophet/raw/refs/heads/main/sources/needful_things/needful_things.duckdb\", \"your_project.your_dataset\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_duckdb_database(\"https://github.com/evidence-dev/sql-prophet/raw/refs/heads/main/sources/needful_things/needful_things.duckdb\", \"your_project.your_dataset\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+--------+\n+ status +\n+--------+\n+   ok   +\n+--------+\n\n</code>\n</pre> Need help or Found a bug? Get help using <code>load_duckdb_database</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>load_duckdb_database</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/load_file/","title":"load_file","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>web</li> </ul>"},{"location":"bigfunctions/load_file/#load_file","title":"load_file","text":"<pre><code>load_file(url, file_type, destination_table, options)\n</code></pre>"},{"location":"bigfunctions/load_file/#description","title":"Description","text":"<p>Download web file into <code>destination_table</code></p> <p></p> <p>This function extends <code>load_file_into_temp_dataset</code> function.</p> <p>Each call:</p> <ol> <li>Creates a new temporary dataset only accessible to you in bigfunctions project.</li> <li>Downloads the file data in a table within this temporary dataset.</li> <li>Copies the table into <code>destination_table</code> before deleting the temporary dataset.</li> </ol> <p>File Data is downloaded using ibis with DuckDB. Available <code>file_type</code> values are:</p> <ul> <li>csv : doc</li> <li>json : doc</li> <li>parquet : doc</li> <li>delta : doc</li> <li>geo : doc. (this uses GDAL under the hood and enable you to also read .xls, .xlsx, .shp ...)</li> </ul>"},{"location":"bigfunctions/load_file/#usage","title":"Usage","text":"Call or Deploy <code>load_file</code> ? Call <code>load_file</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>load_file</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>load_file</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>load_file</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>load_file</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get load_file\nbigfun deploy load_file\n</code></pre>"},{"location":"bigfunctions/load_file/#examples","title":"Examples","text":"<p>1. load random csv</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_file(\"https://raw.githubusercontent.com/AntoineGiraud/dbt_hypermarche/refs/heads/main/input/achats.csv\", \"csv\", \"your_project.your_dataset.random_sales\", null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_file(\"https://raw.githubusercontent.com/AntoineGiraud/dbt_hypermarche/refs/heads/main/input/achats.csv\", \"csv\", \"your_project.your_dataset.random_sales\", null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_file(\"https://raw.githubusercontent.com/AntoineGiraud/dbt_hypermarche/refs/heads/main/input/achats.csv\", \"csv\", \"your_project.your_dataset.random_sales\", null);\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+--------+\n+ status +\n+--------+\n+   ok   +\n+--------+\n\n</code>\n</pre> <p>2. load json - french departements</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_file(\"https://geo.api.gouv.fr/departements?fields=nom,code,codeRegion,region\", \"json\", \"your_project.your_dataset.dim_french_departements\", null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_file(\"https://geo.api.gouv.fr/departements?fields=nom,code,codeRegion,region\", \"json\", \"your_project.your_dataset.dim_french_departements\", null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_file(\"https://geo.api.gouv.fr/departements?fields=nom,code,codeRegion,region\", \"json\", \"your_project.your_dataset.dim_french_departements\", null);\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+--------+\n+ status +\n+--------+\n+   ok   +\n+--------+\n\n</code>\n</pre> <p>3. load json as string without records/struct inference (from DuckDB &amp; BigQuery) - (cf. issue #171)</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_file(\"https://geo.api.gouv.fr/departements?fields=nom,code,codeRegion,region\", \"json\", \"your_project.your_dataset.dim_french_departements\", \"{\\\"records\\\":false, \\\"columns\\\":{\\\"json\\\":\\\"string\\\"}}\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_file(\"https://geo.api.gouv.fr/departements?fields=nom,code,codeRegion,region\", \"json\", \"your_project.your_dataset.dim_french_departements\", \"{\\\"records\\\":false, \\\"columns\\\":{\\\"json\\\":\\\"string\\\"}}\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_file(\"https://geo.api.gouv.fr/departements?fields=nom,code,codeRegion,region\", \"json\", \"your_project.your_dataset.dim_french_departements\", \"{\\\"records\\\":false, \\\"columns\\\":{\\\"json\\\":\\\"string\\\"}}\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+--------+\n+ status +\n+--------+\n+   ok   +\n+--------+\n\n</code>\n</pre> <p>4. load parquet on Google Cloud Storage</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_file(\"gs://bike-sharing-history/toulouse/jcdecaux/2024/Feb.parquet\", \"parquet\", \"your_project.your_dataset.station_status\", null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_file(\"gs://bike-sharing-history/toulouse/jcdecaux/2024/Feb.parquet\", \"parquet\", \"your_project.your_dataset.station_status\", null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_file(\"gs://bike-sharing-history/toulouse/jcdecaux/2024/Feb.parquet\", \"parquet\", \"your_project.your_dataset.station_status\", null);\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+--------+\n+ status +\n+--------+\n+   ok   +\n+--------+\n\n</code>\n</pre> <p>5. load xls or xlsx</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_file(\"https://github.com/AntoineGiraud/dbt_hypermarche/raw/refs/heads/main/input/Hypermarche.xlsx\", \"geo\", \"your_project.your_dataset.hypermarche_retours\", \"{\\\"layer\\\":\\\"Retours\\\", \\\"open_options\\\": [\\\"HEADERS=FORCE\\\"]}\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_file(\"https://github.com/AntoineGiraud/dbt_hypermarche/raw/refs/heads/main/input/Hypermarche.xlsx\", \"geo\", \"your_project.your_dataset.hypermarche_retours\", \"{\\\"layer\\\":\\\"Retours\\\", \\\"open_options\\\": [\\\"HEADERS=FORCE\\\"]}\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_file(\"https://github.com/AntoineGiraud/dbt_hypermarche/raw/refs/heads/main/input/Hypermarche.xlsx\", \"geo\", \"your_project.your_dataset.hypermarche_retours\", \"{\\\"layer\\\":\\\"Retours\\\", \\\"open_options\\\": [\\\"HEADERS=FORCE\\\"]}\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+--------+\n+ status +\n+--------+\n+   ok   +\n+--------+\n\n</code>\n</pre> <p>6. load french tricky csv</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_file(\"https://www.data.gouv.fr/fr/datasets/r/323af5b8-7831-445b-9a46-d4da140b61b6\", \"csv\", \"your_project.your_dataset.dim_french_postalcodes\", \n      '''{\n        \"columns\": {\n            \"code_commune_insee\": \"VARCHAR\",\n            \"nom_commune_insee\": \"VARCHAR\",\n            \"code_postal\": \"VARCHAR\",\n            \"lb_acheminement\": \"VARCHAR\",\n            \"ligne_5\": \"VARCHAR\"\n        },\n        \"delim\": \";\",\n        \"skip\": 1\n      }'''\n      );\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_file(\"https://www.data.gouv.fr/fr/datasets/r/323af5b8-7831-445b-9a46-d4da140b61b6\", \"csv\", \"your_project.your_dataset.dim_french_postalcodes\", \n      '''{\n        \"columns\": {\n            \"code_commune_insee\": \"VARCHAR\",\n            \"nom_commune_insee\": \"VARCHAR\",\n            \"code_postal\": \"VARCHAR\",\n            \"lb_acheminement\": \"VARCHAR\",\n            \"ligne_5\": \"VARCHAR\"\n        },\n        \"delim\": \";\",\n        \"skip\": 1\n      }'''\n      );\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_file(\"https://www.data.gouv.fr/fr/datasets/r/323af5b8-7831-445b-9a46-d4da140b61b6\", \"csv\", \"your_project.your_dataset.dim_french_postalcodes\", \n      '''{\n        \"columns\": {\n            \"code_commune_insee\": \"VARCHAR\",\n            \"nom_commune_insee\": \"VARCHAR\",\n            \"code_postal\": \"VARCHAR\",\n            \"lb_acheminement\": \"VARCHAR\",\n            \"ligne_5\": \"VARCHAR\"\n        },\n        \"delim\": \";\",\n        \"skip\": 1\n      }'''\n      );\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+--------+\n+ status +\n+--------+\n+   ok   +\n+--------+\n\n</code>\n</pre>"},{"location":"bigfunctions/load_file/#use-cases","title":"Use cases","text":"<p>The <code>load_file</code> function is useful for quickly loading data from various web-based file formats directly into a BigQuery table.  Here's a breakdown of potential use cases categorized by data type and source:</p> <p>1. CSV Data:</p> <ul> <li>Public Datasets: Loading publicly available datasets in CSV format, like government data or research data.  Example: Loading census data or economic indicators from a government website.</li> <li>Web APIs:  Some APIs return data in CSV format.  This function can be used to directly ingest that data into BigQuery. Example:  A marketing API providing campaign performance data.</li> <li>GitHub/GitLab: Loading data directly from CSV files stored in repositories like GitHub or GitLab.  This is helpful for sharing data within teams or for reproducible research. Example: Loading a training dataset for a machine learning model.</li> </ul> <p>2. JSON Data:</p> <ul> <li>REST APIs: Many REST APIs return data in JSON format. <code>load_file</code> simplifies the process of ingesting this data into BigQuery without intermediate processing. Example: Loading product information from an e-commerce API.</li> <li>GeoJSON Data: Loading geospatial data in GeoJSON format. Example: Loading geographic boundaries of cities or countries.</li> <li>Configuration Files: Loading configuration data from JSON files hosted online.</li> </ul> <p>3. Parquet/Delta Lake Data:</p> <ul> <li>Data Lakes: Accessing and loading data directly from data lakes stored on cloud storage platforms like Google Cloud Storage. This is efficient for large datasets as Parquet and Delta Lake are optimized for analytical queries. Example:  Loading historical sales data from a data lake.</li> </ul> <p>4. Excel/Shapefiles (via 'geo' file_type):</p> <ul> <li>Legacy Data: Loading data from legacy systems that often store data in Excel or Shapefile formats. Example:  Loading customer data from an older CRM system.</li> <li>GIS Data: Loading geospatial data from shapefiles.  Example: Loading data on road networks or land parcels.</li> </ul> <p>5. General Web Files:</p> <ul> <li>Automated Data Ingestion: Regularly loading data from a web source as part of an automated data pipeline. Example:  Daily updates of stock prices.</li> <li>Ad-hoc Data Analysis: Quickly loading data from a web source for exploratory data analysis.  Example: Analyzing a competitor's publicly available product catalog.</li> </ul> <p>Key Advantages of using <code>load_file</code>:</p> <ul> <li>Simplicity:  Reduces the need for complex ETL pipelines for simple data loading tasks.</li> <li>Speed:  Directly loads data into BigQuery, bypassing intermediate steps.</li> <li>Flexibility: Supports various file formats and sources.</li> <li>Accessibility:  Makes web-based data easily accessible for analysis within BigQuery.</li> </ul> <p>Example Scenario:</p> <p>A marketing analyst needs to analyze the performance of their recent social media campaigns. The social media platform provides an API that returns campaign data in CSV format. Instead of manually downloading the CSV file, processing it, and then uploading it to BigQuery, the analyst can use the <code>load_file</code> function to directly load the data from the API endpoint into a BigQuery table, saving time and effort.</p> Need help or Found a bug? Get help using <code>load_file</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>load_file</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/load_google_trends/","title":"load_google_trends","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>public_services</li> </ul>"},{"location":"bigfunctions/load_google_trends/#load_google_trends","title":"load_google_trends","text":"<pre><code>load_google_trends(destination_table, keywords, start_month, geo, category, gprop)\n</code></pre>"},{"location":"bigfunctions/load_google_trends/#description","title":"Description","text":"<p>Load daily Google Trends (search volume) of <code>keywords</code> into <code>destination_table</code>.</p> How it works <p>This function will:</p> <ul> <li>download daily search volume for each <code>keyword</code> for each <code>month</code> which are not already in destination table. Search volumes of the current month are downloaded anyway even if already in destination table. The daily search volumes are normalized between <code>[0, 100]</code> for each <code>(keyword, month)</code>.</li> <li>download monthly search volume at once for all keywords altogether during the whole period. The downloaded volumes are then comparable for all keywords and the whole period.</li> <li>globally normalize the daily search volumes using the monthly search volumes to make them comparable.</li> </ul> <p>(This function calls <code>get_google_trends</code> function under the hood)</p> <p>Destination Table Schema</p> Column Description <code>date</code> day of the trend <code>keyword</code> keyword <code>search_volume</code> search volume (normalized) <code>_raw_search_volume</code> search volume at load time (before global normalization) <code>_raw_month_search_volume</code> search month volume at load time (before global normalization) <code>_load_date</code> date when the data was downloaded from google trends <p>Params</p> Param Description <code>destination_table</code> Fully qualified destination table (PROJECT.DATASET.TABLE) <code>keywords</code> Array of one to five search terms (a search term can be an expression) <code>start_month</code> First month (<code>YYYY-MM</code>) to load data from <code>geo</code> Two letter country abbreviation. For example United States is 'US'. Defaults to World. More detail available for States/Provinces by specifying additional abbreviations. For example: Alabama would be 'US-AL'. For example: England would be 'GB-ENG' <code>category</code> Category to narrow results. Find available categories by inspecting the url when manually using Google Trends. The category starts after cat= and ends before the next &amp; or view this wiki page containing all available categories. For example: \"https://www.google.com/trends/explore#q=pizza&amp;cat=71\". '71' is the category. Defaults to no category <code>gprop</code> What Google property to filter to. Example 'images'. Defaults to web searches. Can be images, news, youtube or froogle (for Google Shopping results) <p>You may need call this function several times a day</p> <p>Google Trends put some quotas to request their API. For this reason, this function may not return data for all months in one call. But if you schedule this function to be called several times a day, you will certainly have all the data.</p>"},{"location":"bigfunctions/load_google_trends/#usage","title":"Usage","text":"Call or Deploy <code>load_google_trends</code> ? Call <code>load_google_trends</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>load_google_trends</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>load_google_trends</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>load_google_trends</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>load_google_trends</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get load_google_trends\nbigfun deploy load_google_trends\n</code></pre>"},{"location":"bigfunctions/load_google_trends/#examples","title":"Examples","text":"<p>Download daily google trends comparing bigquery and snowflake</p> <p></p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_google_trends(\"your_project.dataset.table\", ['bigquery', 'snowflake'], \"2024-01\", null, null, null);\n</code></pre> <pre><code>call bigfunctions.us.load_google_trends(\"your_project.dataset.table\", ['bigquery', 'snowflake'], \"2024-01\", null, null, null);\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_google_trends(\"your_project.dataset.table\", ['bigquery', 'snowflake'], \"2024-01\", null, null, null);\n</code></pre> Need help or Found a bug? Get help using <code>load_google_trends</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>load_google_trends</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/load_pinterest_report/","title":"load_pinterest_report","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>saas</li> </ul>"},{"location":"bigfunctions/load_pinterest_report/#load_pinterest_report","title":"load_pinterest_report","text":"<pre><code>load_pinterest_report(destination_table, ad_account_id, report_template_id, client_id, client_secret, refresh_token)\n</code></pre>"},{"location":"bigfunctions/load_pinterest_report/#description","title":"Description","text":"<p>Download Daily Pinterest Custom Report into <code>destination_table</code>.</p> <p>At each run, the function will always load data of the last 28 days. It will also backfill missing data up to one year.</p> <p>To get the needed <code>client_id</code>, <code>client_secret</code> and <code>refresh_token</code> from Pinterest, read their documentation here and then there.</p> <p>If you need help in getting those, you can get help on BigFunctions Slack.</p>"},{"location":"bigfunctions/load_pinterest_report/#usage","title":"Usage","text":"Call or Deploy <code>load_pinterest_report</code> ? Call <code>load_pinterest_report</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>load_pinterest_report</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>load_pinterest_report</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>load_pinterest_report</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>load_pinterest_report</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get load_pinterest_report\nbigfun deploy load_pinterest_report\n</code></pre> Keep the secrets safe! <p>Do NOT write secrets in plain text in your SQL queries!</p> <p>Otherwise, anyone with access to your BigQuery logs can read and use them.</p> <p>Instead, generate an encrypted version that you can safely share:</p> <p> Encrypt Secret </p> <ol> <li>Enter a secret value below along with the emails of the users who are authorized to use it (separated by commas).</li> <li>Click on <code>Encrypt Secret</code>.</li> <li>The browser (no server is called) will generate an encrypted version and copy it in the clipboard</li> <li>Paste the encrypted secret into the arguments of your function exactly like if you passed the plain text version.</li> <li>The bigfunction will decrypt it and check that the calling user is authorized.</li> </ol> More on secret encryption <p>Technically, this encryption system uses the same encryption mechanism used to transfer data over the internet. It uses a pair of a public and private keys.</p> <p>The public key (contained in this web page) is used to encrypt a text. The corresponding private key is the only one who is able to decrypt the text. The private key is stored in a secret manager and is only accessible to this function. Thus, this function (and this function only) can decrypt it.</p> <p>Moreover, the function will check that the caller of the function belong to the list of <code>authorized users</code> that you gave at encryption time.</p> <p>Thanks to this:</p> <ul> <li>Nobody but this function will be able to decrypt it.</li> <li>Nobody but <code>authorized users</code> can use the encrypted version in a function.</li> <li>No function but the function <code>load_pinterest_report</code> can decrypt it.</li> </ul>"},{"location":"bigfunctions/load_pinterest_report/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_pinterest_report(\"your_project.dataset.table\", 12345, 678910, \"123445666\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\", \"ENCRYPTED_SECRET(sqdksdoxlkwcmll;d;smgre)\");\n</code></pre> <pre><code>call bigfunctions.us.load_pinterest_report(\"your_project.dataset.table\", 12345, 678910, \"123445666\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\", \"ENCRYPTED_SECRET(sqdksdoxlkwcmll;d;smgre)\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_pinterest_report(\"your_project.dataset.table\", 12345, 678910, \"123445666\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\", \"ENCRYPTED_SECRET(sqdksdoxlkwcmll;d;smgre)\");\n</code></pre> Need help or Found a bug? Get help using <code>load_pinterest_report</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>load_pinterest_report</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/load_pinterest_report_into_temp_dataset/","title":"load_pinterest_report_into_temp_dataset","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>saas</li> </ul>"},{"location":"bigfunctions/load_pinterest_report_into_temp_dataset/#load_pinterest_report_into_temp_dataset","title":"load_pinterest_report_into_temp_dataset","text":"<pre><code>load_pinterest_report_into_temp_dataset(ad_account_id, report_template_id, client_id, client_secret, refresh_token, start_date, end_date, granularity)\n</code></pre>"},{"location":"bigfunctions/load_pinterest_report_into_temp_dataset/#description","title":"Description","text":"<p>Download Pinterest Custom Report into <code>destination_table</code> inside a temporary dataset.</p> <p>To get the needed <code>client_id</code>, <code>client_secret</code> and <code>refresh_token</code> from Pinterest, read their documentation here and then there.</p> <p>If you need help in getting those, you can get help on BigFunctions Slack.</p> More on temporary datasets <p>Each call to this function creates a new temporary dataset which:</p> <ul> <li>belongs to bigfunctions project.</li> <li>contains the extracted data,</li> <li>is accessible only to you (who calls the function) and the function. You are owner of the dataset which means that you can read or delete it.</li> <li>has a limited period of life. Default expiration time is set to 1h so that every table created will be automatically deleted after 1h. Empty datasets are periodically removed.</li> <li>has a random name</li> </ul>"},{"location":"bigfunctions/load_pinterest_report_into_temp_dataset/#usage","title":"Usage","text":"Call or Deploy <code>load_pinterest_report_into_temp_dataset</code> ? Call <code>load_pinterest_report_into_temp_dataset</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>load_pinterest_report_into_temp_dataset</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>load_pinterest_report_into_temp_dataset</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>load_pinterest_report_into_temp_dataset</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>load_pinterest_report_into_temp_dataset</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get load_pinterest_report_into_temp_dataset\nbigfun deploy load_pinterest_report_into_temp_dataset\n</code></pre> Keep the secrets safe! <p>Do NOT write secrets in plain text in your SQL queries!</p> <p>Otherwise, anyone with access to your BigQuery logs can read and use them.</p> <p>Instead, generate an encrypted version that you can safely share:</p> <p> Encrypt Secret </p> <ol> <li>Enter a secret value below along with the emails of the users who are authorized to use it (separated by commas).</li> <li>Click on <code>Encrypt Secret</code>.</li> <li>The browser (no server is called) will generate an encrypted version and copy it in the clipboard</li> <li>Paste the encrypted secret into the arguments of your function exactly like if you passed the plain text version.</li> <li>The bigfunction will decrypt it and check that the calling user is authorized.</li> </ol> More on secret encryption <p>Technically, this encryption system uses the same encryption mechanism used to transfer data over the internet. It uses a pair of a public and private keys.</p> <p>The public key (contained in this web page) is used to encrypt a text. The corresponding private key is the only one who is able to decrypt the text. The private key is stored in a secret manager and is only accessible to this function. Thus, this function (and this function only) can decrypt it.</p> <p>Moreover, the function will check that the caller of the function belong to the list of <code>authorized users</code> that you gave at encryption time.</p> <p>Thanks to this:</p> <ul> <li>Nobody but this function will be able to decrypt it.</li> <li>Nobody but <code>authorized users</code> can use the encrypted version in a function.</li> <li>No function but the function <code>load_pinterest_report_into_temp_dataset</code> can decrypt it.</li> </ul>"},{"location":"bigfunctions/load_pinterest_report_into_temp_dataset/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.load_pinterest_report_into_temp_dataset(12345, 678910, \"123445666\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\", \"ENCRYPTED_SECRET(sqdksdoxlkwcmll;d;smgre)\", current_date - 14, current_date - 1, \"DAY\")\n</code></pre> <pre><code>select bigfunctions.us.load_pinterest_report_into_temp_dataset(12345, 678910, \"123445666\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\", \"ENCRYPTED_SECRET(sqdksdoxlkwcmll;d;smgre)\", current_date - 14, current_date - 1, \"DAY\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.load_pinterest_report_into_temp_dataset(12345, 678910, \"123445666\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\", \"ENCRYPTED_SECRET(sqdksdoxlkwcmll;d;smgre)\", current_date - 14, current_date - 1, \"DAY\")\n</code></pre> <pre>\n<code>+------------------------------------------------------------------+\n| destination_table                                                |\n+------------------------------------------------------------------+\n| bigfunctions.temp_6bdb75ca_7f72_4f1f_b46a_6ca59f7f66ac.file_data |\n+------------------------------------------------------------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>load_pinterest_report_into_temp_dataset</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>load_pinterest_report_into_temp_dataset</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/load_saas_data/","title":"load_saas_data","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>saas</li> </ul>"},{"location":"bigfunctions/load_saas_data/#load_saas_data","title":"load_saas_data","text":"<pre><code>load_saas_data(source, source_config, streams, destination_dataset)\n</code></pre>"},{"location":"bigfunctions/load_saas_data/#description","title":"Description","text":"<p>Load SAAS data from 250+ sources using the Python Connectors of Airbyte using Airbye Serverless.</p> <ul> <li>The function creates a temporary dataset (only accessible to you) in <code>bigfunctions</code> project.</li> <li>It extracts data from <code>source</code> using <code>source_config</code> (source configuration in yaml format expected by Airbyte Serverless) into:</li> <li>One table per <code>stream</code> (a stream is like a resource type),</li> <li>A table for logs: <code>_airbyte_logs</code></li> <li>A table for states: <code>_airbyte_states</code> (to track where it stopped and enable incremental extraction).</li> <li>The data in then moved from the temporary dataset to be appended in <code>destination_dataset</code>.</li> <li>The temporary dataset is then deleted.</li> <li>If you call this function several times, the function starts by getting the latest state from <code>destination_dataset._airbyte_states</code> table to only extract and load new data.</li> </ul>"},{"location":"bigfunctions/load_saas_data/#usage","title":"Usage","text":"Call or Deploy <code>load_saas_data</code> ? Call <code>load_saas_data</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>load_saas_data</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>load_saas_data</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>load_saas_data</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>load_saas_data</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get load_saas_data\nbigfun deploy load_saas_data\n</code></pre> Keep the secrets safe! <p>Do NOT write secrets in plain text in your SQL queries!</p> <p>Otherwise, anyone with access to your BigQuery logs can read and use them.</p> <p>Instead, generate an encrypted version that you can safely share:</p> <p> Encrypt Secret </p> <ol> <li>Enter a secret value below along with the emails of the users who are authorized to use it (separated by commas).</li> <li>Click on <code>Encrypt Secret</code>.</li> <li>The browser (no server is called) will generate an encrypted version and copy it in the clipboard</li> <li>Paste the encrypted secret into the arguments of your function exactly like if you passed the plain text version.</li> <li>The bigfunction will decrypt it and check that the calling user is authorized.</li> </ol> More on secret encryption <p>Technically, this encryption system uses the same encryption mechanism used to transfer data over the internet. It uses a pair of a public and private keys.</p> <p>The public key (contained in this web page) is used to encrypt a text. The corresponding private key is the only one who is able to decrypt the text. The private key is stored in a secret manager and is only accessible to this function. Thus, this function (and this function only) can decrypt it.</p> <p>Moreover, the function will check that the caller of the function belong to the list of <code>authorized users</code> that you gave at encryption time.</p> <p>Thanks to this:</p> <ul> <li>Nobody but this function will be able to decrypt it.</li> <li>Nobody but <code>authorized users</code> can use the encrypted version in a function.</li> <li>No function but the function <code>load_saas_data</code> can decrypt it.</li> </ul>"},{"location":"bigfunctions/load_saas_data/#examples","title":"Examples","text":"<p>1. Show valid sources for <code>source</code> argument by setting <code>source</code> to <code>null</code></p> <p>You can then copy one of these sources for <code>source</code> argument.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_saas_data(null, null, null, null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_saas_data(null, null, null, null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_saas_data(null, null, null, null);\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+----------------------------------------+\n|                 result                 |\n+----------------------------------------+\n| # AVAILABLE SOURCES                    |\n|                                        |\n| airbyte-source-activecampaign==0.1.10  |\n| airbyte-source-adjust==0.1.11          |\n| airbyte-source-aha==0.3.10             |\n| ...                                    |\n+----------------------------------------+\n\n</code>\n</pre> <p>2. Show <code>source_config</code> sample at expected format by setting <code>source_config</code> to <code>null</code>.</p> <p>You can then copy the result, modify it and provide it as <code>source_config</code> argument.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_saas_data(\"airbyte-source-file==0.5.13\", null, null, null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_saas_data(\"airbyte-source-file==0.5.13\", null, null, null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_saas_data(\"airbyte-source-file==0.5.13\", null, null, null);\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+----------------------------------------------------+\n|                 result                             |\n+----------------------------------------------------+\n| # SOURCE CONFIG\n|\n| dataset_name: # REQUIRED | string | The Name of... |\n| format: \"csv\" # REQUIRED | string | The Format ... |\n| reader_options: # OPTIONAL | string | This shou... |\n| url: # REQUIRED | string | The URL path to acce... |\n| provider:                                          |\n|   ## -------- Pick one valid structure among th... |\n|   storage: \"HTTPS\" # REQUIRED | string             |\n|   user_agent: # OPTIONAL | boolean | Add User-A... |\n| ...                                                |\n+----------------------------------------------------+\n\n</code>\n</pre> <p>3. Provide <code>source_config</code> with secrets encrypted:</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_saas_data(\"airbyte-source-zendesk-support==2.6.10\", '''\n      credentials:\n        access_token: ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\n      '''\n      , null, null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_saas_data(\"airbyte-source-zendesk-support==2.6.10\", '''\n      credentials:\n        access_token: ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\n      '''\n      , null, null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_saas_data(\"airbyte-source-zendesk-support==2.6.10\", '''\n      credentials:\n        access_token: ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\n      '''\n      , null, null);\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n...\n</code>\n</pre> <p>4. Show available streams by setting <code>streams</code> argument to <code>null</code>.</p> <p>You can then copy one or several of these streams (separate them with commas) for <code>streams</code> argument.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_saas_data(\"airbyte-source-file==0.5.13\", '''\n      dataset_name: \"my_stream\"\n      format: \"csv\"\n      url: https://raw.githubusercontent.com/MobilityData/gbfs/refs/heads/master/systems.csv\n      provider:\n        storage: \"HTTPS\"\n      '''\n      , null, null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_saas_data(\"airbyte-source-file==0.5.13\", '''\n      dataset_name: \"my_stream\"\n      format: \"csv\"\n      url: https://raw.githubusercontent.com/MobilityData/gbfs/refs/heads/master/systems.csv\n      provider:\n        storage: \"HTTPS\"\n      '''\n      , null, null);\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_saas_data(\"airbyte-source-file==0.5.13\", '''\n      dataset_name: \"my_stream\"\n      format: \"csv\"\n      url: https://raw.githubusercontent.com/MobilityData/gbfs/refs/heads/master/systems.csv\n      provider:\n        storage: \"HTTPS\"\n      '''\n      , null, null);\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+----------------------------------------+\n|                 result                 |\n+----------------------------------------+\n| # AVAILABLE STREAMS                    |\n|                                        |\n| my_stream                              |\n+----------------------------------------+\n\n</code>\n</pre> <p>5. Extract and load <code>my_stream</code> into <code>your_project.your_dataset</code>.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.load_saas_data(\"airbyte-source-file==0.5.13\", '''\n      dataset_name: \"my_stream\"\n      format: \"csv\"\n      url: https://raw.githubusercontent.com/MobilityData/gbfs/refs/heads/master/systems.csv\n      provider:\n        storage: \"HTTPS\"\n      '''\n      , \"my_stream\", \"your_project.your_dataset\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.load_saas_data(\"airbyte-source-file==0.5.13\", '''\n      dataset_name: \"my_stream\"\n      format: \"csv\"\n      url: https://raw.githubusercontent.com/MobilityData/gbfs/refs/heads/master/systems.csv\n      provider:\n        storage: \"HTTPS\"\n      '''\n      , \"my_stream\", \"your_project.your_dataset\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.load_saas_data(\"airbyte-source-file==0.5.13\", '''\n      dataset_name: \"my_stream\"\n      format: \"csv\"\n      url: https://raw.githubusercontent.com/MobilityData/gbfs/refs/heads/master/systems.csv\n      provider:\n        storage: \"HTTPS\"\n      '''\n      , \"my_stream\", \"your_project.your_dataset\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+----------------------------------------+\n|                 result                 |\n+----------------------------------------+\n| ok                                     |\n+----------------------------------------+\n\n</code>\n</pre> Need help or Found a bug? Get help using <code>load_saas_data</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>load_saas_data</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/markdown2html/","title":"markdown2html","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>convert_data_format</li> </ul>"},{"location":"bigfunctions/markdown2html/#markdown2html","title":"markdown2html","text":"<pre><code>markdown2html(markdown)\n</code></pre>"},{"location":"bigfunctions/markdown2html/#description","title":"Description","text":"<p>Convert <code>markdown</code> to <code>html</code></p>"},{"location":"bigfunctions/markdown2html/#usage","title":"Usage","text":"Call or Deploy <code>markdown2html</code> ? Call <code>markdown2html</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>markdown2html</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>markdown2html</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>markdown2html</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>markdown2html</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get markdown2html\nbigfun deploy markdown2html\n</code></pre>"},{"location":"bigfunctions/markdown2html/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.markdown2html(\"# Title\")\n</code></pre> <pre><code>select bigfunctions.us.markdown2html(\"# Title\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.markdown2html(\"# Title\")\n</code></pre> <pre>\n<code>+----------------+\n| html           |\n+----------------+\n| &lt;h1&gt;Title&lt;/h1&gt; |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/markdown2html/#use-cases","title":"Use cases","text":"<p>The <code>markdown2html</code> function is useful anytime you need to convert text formatted in Markdown to HTML within BigQuery. Here are a few use cases:</p> <ul> <li> <p>Generating HTML reports directly from BigQuery:  Imagine you have data in BigQuery that you want to present in a formatted report. You can use <code>markdown2html</code> to create the HTML structure of the report dynamically, including headings, lists, tables, and formatted text, all within your SQL query. The output can then be visualized directly in the BigQuery console (using the bookmarklet method described in the documentation) or exported for use in other applications.</p> </li> <li> <p>Email formatting: Suppose you are using BigQuery to generate email content.  You can store email templates in Markdown format within a BigQuery table. Then, using <code>markdown2html</code>, convert the Markdown to HTML within your query and send the formatted HTML as the body of the email.</p> </li> <li> <p>Dynamic content creation for web applications: If your web application integrates with BigQuery, you might store content in Markdown format in BigQuery. Using <code>markdown2html</code>, you can query the content and convert it to HTML on the fly, reducing the need to store and manage HTML directly. This allows for easier content updates and a more streamlined workflow.</p> </li> <li> <p>Data documentation: You could use Markdown to document your BigQuery datasets and tables. Using <code>markdown2html</code> within a query, you can dynamically generate HTML documentation pages based on the Markdown content, making it easier for users to understand the data.</p> </li> <li> <p>Enriching data exports:  If you're exporting data from BigQuery for use in another system that requires HTML formatting, you can use <code>markdown2html</code> to transform any Markdown fields into HTML before export.</p> </li> </ul> <p>In essence, <code>markdown2html</code> bridges the gap between the simplicity of Markdown for writing and editing text, and the richness of HTML for presentation, all within the BigQuery environment.</p> Need help or Found a bug? Get help using <code>markdown2html</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>markdown2html</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/max_value/","title":"max_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/max_value/#max_value","title":"max_value","text":"<pre><code>max_value(arr)\n</code></pre>"},{"location":"bigfunctions/max_value/#description","title":"Description","text":"<p>Return max value of array (inspired from sql-snippets repo)</p>"},{"location":"bigfunctions/max_value/#usage","title":"Usage","text":"Call or Deploy <code>max_value</code> ? Call <code>max_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>max_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>max_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>max_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>max_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get max_value\nbigfun deploy max_value\n</code></pre>"},{"location":"bigfunctions/max_value/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.max_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.max_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.max_value([1, 4, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 4     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/max_value/#use-cases","title":"Use cases","text":"<p>You have a table of products, and each product has a list of prices at different stores.  You want to find the highest price for each product.</p> <pre><code>WITH Products AS (\n    SELECT\n        'Product A' AS product_name,\n        [10.99, 12.50, 11.75] AS prices\n    UNION ALL SELECT\n        'Product B' AS product_name,\n        [5.00, 5.50, 4.99] AS prices\n    UNION ALL SELECT\n        'Product C' AS product_name,\n        [20.00, 19.50, 21.25] AS prices\n)\nSELECT\n    product_name,\n    bigfunctions.us.max_value(prices) AS max_price\nFROM Products;\n</code></pre> <p>This query uses the <code>max_value</code> function to find the highest price within the <code>prices</code> array for each product. The result will be:</p> <pre><code>+-------------+-----------+\n| product_name | max_price |\n+-------------+-----------+\n| Product A    | 12.5      |\n| Product B    | 5.5       |\n| Product C    | 21.25     |\n+-------------+-----------+\n</code></pre> <p>This shows how <code>max_value</code> can be practically used to extract the maximum value from an array of numbers within a larger dataset.  This could be useful for things like pricing analysis, finding peak values in time series data (if stored as arrays), or determining the maximum score in a game played multiple times.</p> Need help or Found a bug? Get help using <code>max_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>max_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/median_value/","title":"median_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/median_value/#median_value","title":"median_value","text":"<pre><code>median_value(arr)\n</code></pre>"},{"location":"bigfunctions/median_value/#description","title":"Description","text":"<p>Return median value of array (inspired from sql-snippets repo)</p>"},{"location":"bigfunctions/median_value/#usage","title":"Usage","text":"Call or Deploy <code>median_value</code> ? Call <code>median_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>median_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>median_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>median_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>median_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get median_value\nbigfun deploy median_value\n</code></pre>"},{"location":"bigfunctions/median_value/#examples","title":"Examples","text":"<p>1. When array length is odd</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.median_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.median_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.median_value([1, 4, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 3     |\n+-------+\n</code>\n</pre> <p>2. When array length is even</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.median_value([1, 4, 3, 2])\n</code></pre> <pre><code>select bigfunctions.us.median_value([1, 4, 3, 2])\n</code></pre> <pre><code>select bigfunctions.europe_west1.median_value([1, 4, 3, 2])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 2.5   |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/median_value/#use-cases","title":"Use cases","text":"<p>You have a table of users, and each user has a list of scores they've achieved in a game. You want to find the median score for each user.</p> <pre><code>WITH UserScores AS (\n    SELECT 'UserA' AS user_id, [85, 92, 78, 95, 88] AS scores UNION ALL\n    SELECT 'UserB' AS user_id, [70, 75, 68, 72, 77] AS scores UNION ALL\n    SELECT 'UserC' AS user_id, [90, 95, 88, 92] AS scores\n)\n\nSELECT user_id, bigfunctions.us.median_value(scores) AS median_score\nFROM UserScores;\n</code></pre> <p>This query uses the <code>median_value</code> function to calculate the median score from the <code>scores</code> array for each user.  It will return a table like this:</p> user_id median_score UserA 88 UserB 75 UserC 91 <p>This is a practical use case where you need to find a representative central value for a set of numbers associated with each row in a table. Other potential use cases include:</p> <ul> <li>Sales Analysis: Finding the median sales amount per customer.</li> <li>Financial Modeling: Calculating the median value of a portfolio of investments.</li> <li>Sensor Data Analysis: Determining the median value of readings from a sensor over a period of time.</li> <li>Performance Monitoring: Calculating the median latency of API calls.</li> </ul> <p>In essence, anytime you have an array of numeric data associated with individual records, and you need to find a typical or central value that is robust to outliers, the <code>median_value</code> function becomes very useful.</p> Need help or Found a bug? Get help using <code>median_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>median_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/min_max_scaler/","title":"min_max_scaler","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/min_max_scaler/#min_max_scaler","title":"min_max_scaler","text":"<pre><code>min_max_scaler(arr)\n</code></pre>"},{"location":"bigfunctions/min_max_scaler/#description","title":"Description","text":"<p>Performs min-max scaling on an array. It takes an array of numbers as input and returns an array of values scaled between 0 and 1.</p>"},{"location":"bigfunctions/min_max_scaler/#usage","title":"Usage","text":"Call or Deploy <code>min_max_scaler</code> ? Call <code>min_max_scaler</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>min_max_scaler</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>min_max_scaler</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>min_max_scaler</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>min_max_scaler</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get min_max_scaler\nbigfun deploy min_max_scaler\n</code></pre>"},{"location":"bigfunctions/min_max_scaler/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.min_max_scaler([1, 2, 3, 4, 5])\n</code></pre> <pre><code>select bigfunctions.us.min_max_scaler([1, 2, 3, 4, 5])\n</code></pre> <pre><code>select bigfunctions.europe_west1.min_max_scaler([1, 2, 3, 4, 5])\n</code></pre> <pre>\n<code>+-------------------------+\n| scaled_array            |\n+-------------------------+\n| [0, 0.25, 0.5, 0.75, 1] |\n+-------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/min_max_scaler/#use-cases","title":"Use cases","text":"<p>Let's say you have a table of product prices and you want to compare their relative affordability. The prices range from $10 to $1000, but you need them on a normalized scale between 0 and 1 for a machine learning model or visualization.  Here's how <code>min_max_scaler</code> can be used:</p> <pre><code>WITH ProductPrices AS (\n    SELECT 'Product A' AS product, 10 AS price\n    UNION ALL SELECT 'Product B' AS product, 50 AS price\n    UNION ALL SELECT 'Product C' AS product, 200 AS price\n    UNION ALL SELECT 'Product D' AS product, 1000 AS price\n),\nMinMaxScaledPrices AS (\n  SELECT\n      product,\n      bigfunctions.us.min_max_scaler(ARRAY_AGG(price) OVER ()) AS scaled_prices\n  FROM ProductPrices\n)\nSELECT\n    product,\n    scaled_price\nFROM MinMaxScaledPrices, UNARRAY(scaled_prices) AS scaled_price;\n</code></pre> <p>This query first collects all prices into an array using <code>ARRAY_AGG</code>.  Then, <code>min_max_scaler</code> normalizes these prices within the array.  Finally, the <code>UNARRAY</code> function expands the resulting array so you get each product and its scaled price on separate rows.</p> <p>This results in a table like this (the exact values might vary slightly due to floating-point precision):</p> product scaled_price Product A 0 Product B 0.04 Product C 0.19 Product D 1 <p>Now \"Product A\", with the lowest price, has a scaled price of 0, and \"Product D\", with the highest price, has a scaled price of 1.  The other products have scaled prices in between, reflecting their relative affordability.</p> <p>Another use case would be normalizing features in a machine learning preprocessing step directly within BigQuery before exporting the data for training.  This can simplify your data pipeline.</p> Need help or Found a bug? Get help using <code>min_max_scaler</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>min_max_scaler</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/min_value/","title":"min_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/min_value/#min_value","title":"min_value","text":"<pre><code>min_value(arr)\n</code></pre>"},{"location":"bigfunctions/min_value/#description","title":"Description","text":"<p>Return min value of array (inspired from sql-snippets repo)</p>"},{"location":"bigfunctions/min_value/#usage","title":"Usage","text":"Call or Deploy <code>min_value</code> ? Call <code>min_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>min_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>min_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>min_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>min_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get min_value\nbigfun deploy min_value\n</code></pre>"},{"location":"bigfunctions/min_value/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.min_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.min_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.min_value([1, 4, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 1     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/min_value/#use-cases","title":"Use cases","text":"<p>You have a table of products, and each product has an array of prices representing its price history. You want to find the lowest price ever recorded for each product.</p> <pre><code>WITH Products AS (\n    SELECT\n        'Product A' AS product_name,\n        [10, 12, 8, 15, 9] AS prices\n    UNION ALL\n    SELECT\n        'Product B' AS product_name,\n        [20, 18, 18, 19, 21] AS prices\n    UNION ALL\n    SELECT\n        'Product C' AS product_name,\n        [5, 7, 5, 6, 4] AS prices\n)\nSELECT\n    product_name,\n    bigfunctions.us.min_value(prices) AS min_price\nFROM Products;\n</code></pre> <p>This query would utilize the <code>min_value</code> function to efficiently determine the minimum value within the <code>prices</code> array for each product, effectively identifying the historical lowest price.  You would replace <code>bigfunctions.us</code> with the appropriate dataset for your region.</p> Need help or Found a bug? Get help using <code>min_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>min_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/ngram_frequency_similarity/","title":"ngram_frequency_similarity","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/ngram_frequency_similarity/#ngram_frequency_similarity","title":"ngram_frequency_similarity","text":"<pre><code>ngram_frequency_similarity(string1, string2, n)\n</code></pre>"},{"location":"bigfunctions/ngram_frequency_similarity/#description","title":"Description","text":"<p>Calculates n-gram similarity between two strings</p> <p>The n-gram comparison algorithm is a method used to measure the similarity between two strings by analyzing their subsequence of n consecutive characters, called n-grams. The process of the n-gram comparison algorithm involves the following steps:</p> <ol> <li>N-gram Extraction: Divide each input string into overlapping sequences of n characters.</li> <li>Counting N-grams: Count the occurrences of each unique n-gram in both strings.</li> <li>Calculating Similarity: Compare the n-gram counts between the two strings and compute a similarity score. The similarity score is here calculated with cosine similarity.</li> </ol> <p>The above description is taken from Yassine EL KHAL article</p> <p>Example of n-gram: the sentence <code>Lorem ipsum dolor sit amet</code> gives the following 4-grams <code>['LORE', 'OREM', 'REM ', 'EM I', 'M IP', ' IPS', 'IPSU', ...]</code></p> <p>Returned similarity score is between 0 and 1, 1 meaning that the strings are the most similar.</p>"},{"location":"bigfunctions/ngram_frequency_similarity/#usage","title":"Usage","text":"Call or Deploy <code>ngram_frequency_similarity</code> ? Call <code>ngram_frequency_similarity</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>ngram_frequency_similarity</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>ngram_frequency_similarity</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>ngram_frequency_similarity</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>ngram_frequency_similarity</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get ngram_frequency_similarity\nbigfun deploy ngram_frequency_similarity\n</code></pre>"},{"location":"bigfunctions/ngram_frequency_similarity/#examples","title":"Examples","text":"<p>1. Calculate n-gram frequency similarity between two simple strings with n=2</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ngram_frequency_similarity(\"hello world\", \"world hello\", 2)\n</code></pre> <pre><code>select bigfunctions.us.ngram_frequency_similarity(\"hello world\", \"world hello\", 2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.ngram_frequency_similarity(\"hello world\", \"world hello\", 2)\n</code></pre> <pre>\n<code>+------------+\n| similarity |\n+------------+\n| 0.8        |\n+------------+\n</code>\n</pre> <p>2. Calculate n-gram frequency similarity between two phrases with n=3</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ngram_frequency_similarity(\"The quick brown fox\", \"The quick brown dog\", 3)\n</code></pre> <pre><code>select bigfunctions.us.ngram_frequency_similarity(\"The quick brown fox\", \"The quick brown dog\", 3)\n</code></pre> <pre><code>select bigfunctions.europe_west1.ngram_frequency_similarity(\"The quick brown fox\", \"The quick brown dog\", 3)\n</code></pre> <pre>\n<code>+------------+\n| similarity |\n+------------+\n| 0.82       |\n+------------+\n</code>\n</pre> <p>3. Calculate n-gram frequency similarity between two sentences with n=4</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ngram_frequency_similarity(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\", \"Lorem ipsum dolor sit amet, consectetur adipiscing.\", 4)\n</code></pre> <pre><code>select bigfunctions.us.ngram_frequency_similarity(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\", \"Lorem ipsum dolor sit amet, consectetur adipiscing.\", 4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.ngram_frequency_similarity(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\", \"Lorem ipsum dolor sit amet, consectetur adipiscing.\", 4)\n</code></pre> <pre>\n<code>+------------+\n| similarity |\n+------------+\n| 0.93       |\n+------------+\n</code>\n</pre>"},{"location":"bigfunctions/ngram_frequency_similarity/#use-cases","title":"Use cases","text":"<p>This <code>ngram_frequency_similarity</code> function is useful for several text analysis and data matching tasks where you want to determine how similar two strings are based on the sequences of characters they contain. Here are a few use cases:</p> <p>1. Plagiarism Detection:  Compare student submissions or documents to identify potential plagiarism by calculating the n-gram similarity. A high similarity score could indicate copied content.</p> <p>2. Duplicate Detection: Identify duplicate records in a database, even if they have slight variations in wording or spelling. For example, finding near-identical product descriptions or customer addresses.</p> <p>3. Fuzzy Matching:  Match records that are not exactly the same but are similar enough to be considered a potential match.  This is useful in situations where data entry errors or variations in naming conventions might exist. Examples include:     * Matching customer names from different sources.     * Matching product names across different retailers.     * Finding similar articles or news stories.</p> <p>4. Recommendation Systems: Suggest related products or content based on the similarity of their descriptions or titles.  If two products have a high n-gram similarity, they might be relevant to the same customer.</p> <p>5. Spell Checking/Auto-Correction:  Suggest possible corrections for misspelled words by finding words with high n-gram similarity to the incorrect input.</p> <p>6. Information Retrieval:  Improve search relevance by identifying documents that are semantically similar to a search query, even if the exact words are not present.</p> <p>7. Text Classification: Group similar texts together based on their n-gram profiles.  This could be used to categorize documents, emails, or social media posts.</p> <p>Example Scenario (Fuzzy Matching):</p> <p>Imagine an e-commerce site that wants to prevent duplicate product listings.  A seller might try to list a \"Samsung Galaxy S23\" slightly differently, like \"Samsung Galaxy S23 Smartphone\" or \"New Samsung Galaxy S23\". By using <code>ngram_frequency_similarity</code> with an appropriate <code>n</code> value, the system can detect these near-duplicates and flag them for review, even though the strings aren't identical. This prevents redundant listings and ensures data quality.</p> Need help or Found a bug? Get help using <code>ngram_frequency_similarity</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>ngram_frequency_similarity</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/nps/","title":"nps","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_numeric</li> </ul>"},{"location":"bigfunctions/nps/#nps","title":"nps","text":"<pre><code>nps(rating)\n</code></pre>"},{"location":"bigfunctions/nps/#description","title":"Description","text":"<p>Returns the NPS (Net Promoter Score) of <code>rating</code> (which represents customer satisfaction between 0 and 10):</p> <pre><code>NPS = \"% promoters\" - \"% detractors\"\n</code></pre> <p>where:</p> <ul> <li><code>\"% promoters\" = 100 * countif(rating &gt;= 9) / count(*)</code></li> <li><code>\"% detractors\" = 100 * countif(rating &lt;= 6) / count(*)</code></li> </ul>"},{"location":"bigfunctions/nps/#usage","title":"Usage","text":"Call or Deploy <code>nps</code> ? Call <code>nps</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>nps</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>nps</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>nps</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>nps</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get nps\nbigfun deploy nps\n</code></pre>"},{"location":"bigfunctions/nps/#examples","title":"Examples","text":"<p>NPS = 25 &lt;-- 50 % (promoters) - 25 % (detractors)</p> EUUSeurope-west1 <pre><code>with sample_data as (\n\n  select 9 as rating\n      union all\n      select 10 as rating\n      union all\n      select 6 as rating\n      union all\n      select 8 as rating\n\n)\n\n\nselect bigfunctions.eu.nps(rating)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select 9 as rating\n      union all\n      select 10 as rating\n      union all\n      select 6 as rating\n      union all\n      select 8 as rating\n\n)\n\n\nselect bigfunctions.us.nps(rating)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select 9 as rating\n      union all\n      select 10 as rating\n      union all\n      select 6 as rating\n      union all\n      select 8 as rating\n\n)\n\n\nselect bigfunctions.europe_west1.nps(rating)\nfrom sample_data\n</code></pre> <pre>\n<code>+-----+\n| nps |\n+-----+\n| 25  |\n+-----+\n</code>\n</pre> Need help or Found a bug? Get help using <code>nps</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>nps</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/parse_date/","title":"parse_date","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_date</li> </ul>"},{"location":"bigfunctions/parse_date/#parse_date","title":"parse_date","text":"<pre><code>parse_date(date_string)\n</code></pre>"},{"location":"bigfunctions/parse_date/#description","title":"Description","text":"<p>Parse date with automatic format detection (inspired from Sebabrata BigQuery tutorial)</p>"},{"location":"bigfunctions/parse_date/#usage","title":"Usage","text":"Call or Deploy <code>parse_date</code> ? Call <code>parse_date</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>parse_date</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>parse_date</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>parse_date</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>parse_date</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get parse_date\nbigfun deploy parse_date\n</code></pre>"},{"location":"bigfunctions/parse_date/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date(\"2021-01-20 \")\n</code></pre> <pre><code>select bigfunctions.us.parse_date(\"2021-01-20 \")\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date(\"2021-01-20 \")\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date(\"2021-1-20 \")\n</code></pre> <pre><code>select bigfunctions.us.parse_date(\"2021-1-20 \")\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date(\"2021-1-20 \")\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date(\"2021/01/20 \")\n</code></pre> <pre><code>select bigfunctions.us.parse_date(\"2021/01/20 \")\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date(\"2021/01/20 \")\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date(\"2021/1/20 \")\n</code></pre> <pre><code>select bigfunctions.us.parse_date(\"2021/1/20 \")\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date(\"2021/1/20 \")\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date(\"01/20/21\")\n</code></pre> <pre><code>select bigfunctions.us.parse_date(\"01/20/21\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date(\"01/20/21\")\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date(\"1/20/21\")\n</code></pre> <pre><code>select bigfunctions.us.parse_date(\"1/20/21\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date(\"1/20/21\")\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date(\"Wed Jan 20 21:47:00 2021\")\n</code></pre> <pre><code>select bigfunctions.us.parse_date(\"Wed Jan 20 21:47:00 2021\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date(\"Wed Jan 20 21:47:00 2021\")\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre>"},{"location":"bigfunctions/parse_date/#use-cases","title":"Use cases","text":"<p>You have a table containing date strings in various formats, and you need to standardize them into a consistent DATE type in BigQuery for analysis.  The <code>parse_date</code> function can automatically detect and convert these different formats.</p> <p>Scenario:</p> <p>You're analyzing customer orders, and the <code>order_date</code> column contains date values, but they were entered using different formats due to various data sources or input methods:</p> order_id order_date 1 2023-10-26 2 10/27/2023 3 Oct 28, 2023 4 28/10/23 5 Fri Oct 29 08:00:00 2023 <p>Query using <code>parse_date</code>:</p> <pre><code>SELECT\n    order_id,\n    bigfunctions.us.parse_date(order_date) AS standardized_order_date\nFROM\n    your_project.your_dataset.your_table;\n</code></pre> <p>(Replace <code>bigfunctions.us</code> with the appropriate dataset for your region.)</p> <p>Result:</p> order_id standardized_order_date 1 2023-10-26 2 2023-10-27 3 2023-10-28 4 2023-10-28 5 2023-10-29 <p>Now all your dates are in a standard <code>DATE</code> format, allowing you to perform date-based calculations, filtering, and aggregations consistently without having to manually handle the different formats. For example, you could then easily query for all orders placed in October:</p> <pre><code>SELECT\n    *\nFROM\n    your_project.your_dataset.your_table\nWHERE\n    standardized_order_date BETWEEN '2023-10-01' AND '2023-10-31';\n</code></pre> Need help or Found a bug? Get help using <code>parse_date</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>parse_date</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/parse_url/","title":"parse_url","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/parse_url/#parse_url","title":"parse_url","text":"<pre><code>parse_url(url)\n</code></pre>"},{"location":"bigfunctions/parse_url/#description","title":"Description","text":"<p>Return <code>url</code> parts (inspired from sql-snippets repo)</p>"},{"location":"bigfunctions/parse_url/#usage","title":"Usage","text":"Call or Deploy <code>parse_url</code> ? Call <code>parse_url</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>parse_url</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>parse_url</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>parse_url</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>parse_url</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get parse_url\nbigfun deploy parse_url\n</code></pre>"},{"location":"bigfunctions/parse_url/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_url(\"https://www.yoursite.com/pricing/details?myparam1=123\\u0026myparam2=abc#newsfeed\")\n</code></pre> <pre><code>select bigfunctions.us.parse_url(\"https://www.yoursite.com/pricing/details?myparam1=123\\u0026myparam2=abc#newsfeed\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_url(\"https://www.yoursite.com/pricing/details?myparam1=123\\u0026myparam2=abc#newsfeed\")\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------+\n| url_parts                                                                                                                                            |\n+------------------------------------------------------------------------------------------------------------------------------------------------------+\n| struct&lt;'www.yoursite.com' as host, 'pricing/details' as path, 'myparam1=123&amp;myparam2=abc#newsfeed' as query, 'newsfeed' as ref, 'https' as protocol&gt; |\n+------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/parse_url/#use-cases","title":"Use cases","text":"<p>You could use the <code>parse_url</code> function to analyze website traffic logs stored in BigQuery.  Imagine you have a table with a column named <code>request_url</code> containing full URLs of pages visited. You want to understand which parts of your website are most popular, which campaigns (identified through URL parameters) are driving traffic, or which sections are accessed most frequently by users from specific referring domains.</p> <p>Here's a practical example:</p> <pre><code>SELECT\n    parsed_url.host,\n    parsed_url.path,\n    REGEXP_EXTRACT(parsed_url.query, r'utm_campaign=([^&amp;]*)') AS utm_campaign,\n    REGEXP_EXTRACT(parsed_url.ref, r'//([^/]*)') AS referring_domain,\n    COUNT(*) AS page_views\n  FROM\n    `your_project.your_dataset.your_table`,\n    UNNEST([bigfunctions.your_region.parse_url(request_url)]) AS parsed_url\n  GROUP BY 1, 2, 3, 4\n  ORDER BY page_views DESC;\n</code></pre> <p>Explanation:</p> <ol> <li><code>your_project.your_dataset.your_table</code>: Replace this with the actual location of your website traffic log table in BigQuery.</li> <li><code>bigfunctions.your_region.parse_url(request_url)</code>: This calls the <code>parse_url</code> function (make sure to replace <code>your_region</code> with your BigQuery region) on the <code>request_url</code> column, breaking it down into its components.  The result is an array containing a struct.</li> <li><code>UNNEST(...) AS parsed_url</code>:  This unnests the resulting array so that you can access individual fields of the URL parts struct.</li> <li><code>parsed_url.host</code>, <code>parsed_url.path</code>, etc.:  These access the individual components of the URL, like host, path, query string, and referring domain.</li> <li><code>REGEXP_EXTRACT(...)</code>: These functions extract specific parameters from the query string and referring domain. In this example, it's extracting the <code>utm_campaign</code> parameter (often used for tracking marketing campaigns) and the main domain from the referrer.  You can adapt these regular expressions to extract other parameters you're interested in.</li> <li><code>COUNT(*) AS page_views</code>: This counts the number of times each combination of host, path, campaign, and referring domain appears, representing the number of page views.</li> <li><code>GROUP BY 1, 2, 3, 4</code>: This groups the results by the extracted fields.</li> <li><code>ORDER BY page_views DESC</code>: This sorts the results to show the most viewed pages first.</li> </ol> <p>This query gives you valuable insights into user behavior on your website, allowing you to identify popular content, track marketing campaign effectiveness, and understand referral traffic patterns.  You could further refine this by adding filters based on date ranges, user segments, or other criteria relevant to your analysis.</p> Need help or Found a bug? Get help using <code>parse_url</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>parse_url</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/parse_user_agent/","title":"parse_user_agent","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/parse_user_agent/#parse_user_agent","title":"parse_user_agent","text":"<pre><code>parse_user_agent(user_agent_string)\n</code></pre>"},{"location":"bigfunctions/parse_user_agent/#description","title":"Description","text":"<p>Parses User Agent strings into several components</p>"},{"location":"bigfunctions/parse_user_agent/#usage","title":"Usage","text":"Call or Deploy <code>parse_user_agent</code> ? Call <code>parse_user_agent</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>parse_user_agent</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>parse_user_agent</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>parse_user_agent</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>parse_user_agent</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get parse_user_agent\nbigfun deploy parse_user_agent\n</code></pre>"},{"location":"bigfunctions/parse_user_agent/#examples","title":"Examples","text":"<p>Mobile User Agent</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_user_agent(\"Mozilla/5.0 (Linux; Android 12; SM-S906N Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.119 Mobile Safari/537.36\")\n</code></pre> <pre><code>select bigfunctions.us.parse_user_agent(\"Mozilla/5.0 (Linux; Android 12; SM-S906N Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.119 Mobile Safari/537.36\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_user_agent(\"Mozilla/5.0 (Linux; Android 12; SM-S906N Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.119 Mobile Safari/537.36\")\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| parsed_user_agent                                                                                                                                                                                                                                                                                           |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| STRUCT&lt;STRUCT&lt;'Chrome WebView' as name, '80.0.3987.119' as version, '80' as major&gt; as browser, STRUCT&lt;'Blink' as name, '80.0.3987.119' as version&gt; as engine, STRUCT&lt;'Android' as name, '12' as version&gt; as os, STRUCT&lt;'Samsung' as vendor, 'SM-S906N' as model, 'mobile' as type&gt; as device, null as arch&gt; |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/parse_user_agent/#use-cases","title":"Use cases","text":"<p>A website analytics team could use the <code>parse_user_agent</code> function to analyze website traffic and user behavior.  Here's a breakdown of how they might use it:</p> <p>Scenario: The team wants to understand which browsers are most popular among their users, identify trends in mobile device usage, and optimize the website experience for different operating systems.  They have a BigQuery table containing website access logs, including a column with user agent strings.</p> <p>Use Case with BigQuery SQL:</p> <p><pre><code>SELECT\n    parsed_user_agent.browser.name AS browser_name,\n    parsed_user_agent.browser.version AS browser_version,\n    parsed_user_agent.os.name AS os_name,\n    parsed_user_agent.os.version AS os_version,\n    parsed_user_agent.device.model AS device_model,\n    parsed_user_agent.device.type AS device_type,\n    COUNT(*) AS access_count\n  FROM\n    `your_project.your_dataset.website_access_logs`,\n    UNTABLE(bigfunctions.your_region.parse_user_agent(user_agent) AS parsed_user_agent)\n  GROUP BY 1, 2, 3, 4, 5, 6\n  ORDER BY access_count DESC;\n</code></pre> (Replace <code>your_project.your_dataset.website_access_logs</code> and <code>your_region</code> with your actual values.)</p> <p>Benefits:</p> <ul> <li> <p>Browser Statistics:  By aggregating results by <code>browser_name</code> and <code>browser_version</code>, the team can determine the market share of different browsers accessing their website. This helps in prioritizing browser compatibility testing and ensuring a consistent user experience.</p> </li> <li> <p>Mobile Device Insights: Grouping by <code>device_model</code> and <code>device_type</code> reveals which mobile devices are commonly used to visit the site. This information is valuable for responsive design and mobile optimization efforts.</p> </li> <li> <p>Operating System Analysis: Analyzing data based on <code>os_name</code> and <code>os_version</code> allows the team to identify potential compatibility issues or optimize the website for specific operating systems.</p> </li> <li> <p>Targeted Improvements:  By understanding the breakdown of user agents, the team can make data-driven decisions about website improvements.  For example, if a significant portion of users are on older versions of a specific browser, they might choose to display a message encouraging them to update for better performance and security.</p> </li> <li> <p>Troubleshooting: If there's a sudden spike in errors from a specific browser or device, the parsed user agent data helps pinpoint the problem quickly.</p> </li> </ul> <p>This use case demonstrates how the <code>parse_user_agent</code> function empowers the analytics team to gain valuable insights from raw user agent data within BigQuery, leading to informed decisions about website development and optimization.</p> Need help or Found a bug? Get help using <code>parse_user_agent</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>parse_user_agent</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/percentile_value/","title":"percentile_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/percentile_value/#percentile_value","title":"percentile_value","text":"<pre><code>percentile_value(arr, percentile)\n</code></pre>"},{"location":"bigfunctions/percentile_value/#description","title":"Description","text":"<p>Returns percentile of an array with percentile a float in range [0, 1].</p> <p>Algorithm to calculate percentile is based on R. J. Hyndman and Y. Fan, \"Sample quantiles in statistical packages,\" The American Statistician, 50(4), pp. 361-365, 1996</p>"},{"location":"bigfunctions/percentile_value/#usage","title":"Usage","text":"Call or Deploy <code>percentile_value</code> ? Call <code>percentile_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>percentile_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>percentile_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>percentile_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>percentile_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get percentile_value\nbigfun deploy percentile_value\n</code></pre>"},{"location":"bigfunctions/percentile_value/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3], 0.74)\n</code></pre> <pre><code>select bigfunctions.us.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3], 0.74)\n</code></pre> <pre><code>select bigfunctions.europe_west1.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3], 0.74)\n</code></pre> <pre>\n<code>+------------------+\n| percentile_value |\n+------------------+\n| 13.8             |\n+------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 0.9)\n</code></pre> <pre><code>select bigfunctions.us.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 0.9)\n</code></pre> <pre><code>select bigfunctions.europe_west1.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 0.9)\n</code></pre> <pre>\n<code>+------------------+\n| percentile_value |\n+------------------+\n| 15.9             |\n+------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 2)\n</code></pre> <pre><code>select bigfunctions.us.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 2)\n</code></pre> <pre>\n<code>+------------------+\n| percentile_value |\n+------------------+\n| null             |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/percentile_value/#use-cases","title":"Use cases","text":"<p>Let's illustrate a use case for the <code>percentile_value</code> BigQuery function.</p> <p>Scenario: You have a table storing website session durations (in seconds) for different users. You want to analyze user engagement and identify the 95th percentile of session durations. This will help you understand how long highly engaged users typically spend on your site.</p> <p>Table Schema:</p> <pre><code>CREATE OR REPLACE TABLE `your_project.your_dataset.session_durations` (\n  user_id INT64,\n  session_duration INT64\n);\n\nINSERT INTO `your_project.your_dataset.session_durations` (user_id, session_duration) VALUES\n(1, 120), (2, 300), (3, 60), (4, 1800), (5, 45), (6, 900), (7, 240), (8, 30), (9, 600), (10, 150);\n</code></pre> <p>Query using <code>percentile_value</code>:</p> <pre><code>SELECT\n    bigfunctions.us.percentile_value(ARRAY_AGG(session_duration), 0.95) AS p95_session_duration\n  FROM\n    `your_project.your_dataset.session_durations`;\n</code></pre> <p>Explanation:</p> <ol> <li><code>ARRAY_AGG(session_duration)</code>: This aggregates all session durations into an array.</li> <li><code>bigfunctions.us.percentile_value(..., 0.95)</code>: This calculates the 95th percentile value from the array of session durations.  Remember to replace <code>us</code> with your BigQuery region if different.</li> <li><code>AS p95_session_duration</code>: This aliases the result for clarity.</li> </ol> <p>Result:</p> <p>The query will return a single value representing the 95th percentile of session durations. This value indicates that 95% of sessions are shorter than or equal to this duration. Let's say the result is 1500 seconds.  This tells you that highly engaged users tend to have sessions lasting around 1500 seconds or less.</p> <p>Benefits of using <code>percentile_value</code>:</p> <ul> <li>Simplified calculation:  Instead of manually implementing percentile logic, you can use this function directly.</li> <li>Efficiency:  BigQuery functions are generally optimized for performance.</li> <li>Flexibility: You can easily change the percentile value (e.g., to calculate the median (50th percentile) or other percentiles) by adjusting the second argument.</li> </ul> <p>This is a simple example.  You can apply this function to any scenario where you need to calculate percentiles from an array of values within BigQuery, such as:</p> <ul> <li>E-commerce: Analyzing product prices, order values, or customer spending.</li> <li>Gaming: Analyzing player scores, playtime, or in-game purchases.</li> <li>Finance: Analyzing stock prices, transaction amounts, or customer balances.</li> <li>Healthcare: Analyzing patient wait times, treatment costs, or lengths of stay.</li> </ul> <p>By using <code>percentile_value</code>, you can gain valuable insights into the distribution of your data and identify important thresholds or outliers.</p> Need help or Found a bug? Get help using <code>percentile_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>percentile_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/phone_number_info/","title":"phone_number_info","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/phone_number_info/#phone_number_info","title":"phone_number_info","text":"<pre><code>phone_number_info(phone_number, options)\n</code></pre>"},{"location":"bigfunctions/phone_number_info/#description","title":"Description","text":"<p>Get <code>phone_number</code> info such as:</p> <ul> <li><code>country</code>,</li> <li><code>isValid</code>,</li> <li>etc</li> </ul> <p>using libphonenumber-js library.</p> <p>Argument <code>options</code> can be <code>null</code> or must be a json with the following keys: <code>defaultCountry</code>, <code>defaultCallingCode</code> and <code>extract</code> as described in the library documentation.</p>"},{"location":"bigfunctions/phone_number_info/#usage","title":"Usage","text":"Call or Deploy <code>phone_number_info</code> ? Call <code>phone_number_info</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>phone_number_info</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>phone_number_info</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>phone_number_info</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>phone_number_info</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get phone_number_info\nbigfun deploy phone_number_info\n</code></pre>"},{"location":"bigfunctions/phone_number_info/#examples","title":"Examples","text":"<p>1. Get info about an international <code>phone_number</code> (starting with <code>+</code>)</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info(\"+33123456789\", null)\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info(\"+33123456789\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info(\"+33123456789\", null)\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                                                                                       |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": true,\n  \"isValid\": true,\n  \"parseError\": null,\n  \"country\": \"FR\",\n  \"countryCallingCode\": \"33\",\n  \"formattedInternational\": \"+33 1 23 45 67 89\",\n  \"formattedNational\": \"01 23 45 67 89\",\n  \"isNonGeographic\": false,\n  \"nationalNumber\": \"123456789\",\n  \"number\": \"+33123456789\",\n  \"possibleCountries\": [\"FR\"],\n  \"type\": \"FIXED_LINE\",\n  \"uri\": \"tel:+33123456789\"\n}\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>2. Get info about a national <code>phone_number</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info(\"0123456789\", json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info(\"0123456789\", json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info(\"0123456789\", json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                                                                                       |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": true,\n  \"isValid\": true,\n  \"parseError\": null,\n  \"country\": \"FR\",\n  \"countryCallingCode\": \"33\",\n  \"formattedInternational\": \"+33 1 23 45 67 89\",\n  \"formattedNational\": \"01 23 45 67 89\",\n  \"isNonGeographic\": false,\n  \"nationalNumber\": \"123456789\",\n  \"number\": \"+33123456789\",\n  \"possibleCountries\": [\"FR\"],\n  \"type\": \"FIXED_LINE\",\n  \"uri\": \"tel:+33123456789\"\n}\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>3. If no phone number is found in <code>phone_number</code> argument, a reason in given in <code>parseError</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info(\"Hello!\", null)\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info(\"Hello!\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info(\"Hello!\", null)\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                               |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": false,\n  \"isValid\": false,\n  \"parseError\": \"NOT_A_NUMBER\",\n  \"country\": null,\n  \"countryCallingCode\": null,\n  \"formattedInternational\": null,\n  \"formattedNational\": null,\n  \"isNonGeographic\": null,\n  \"nationalNumber\": null,\n  \"number\": null,\n  \"possibleCountries\": null,\n  \"type\": null,\n  \"uri\": null,\n}\n |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>4. By default, if the given <code>phone_number</code> text contains a phone number among other text, it will be extracted.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info(\"Hello +33123456789 !\", null)\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info(\"Hello +33123456789 !\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info(\"Hello +33123456789 !\", null)\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                                                                                       |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": true,\n  \"isValid\": true,\n  \"parseError\": null,\n  \"country\": \"FR\",\n  \"countryCallingCode\": \"33\",\n  \"formattedInternational\": \"+33 1 23 45 67 89\",\n  \"formattedNational\": \"01 23 45 67 89\",\n  \"isNonGeographic\": false,\n  \"nationalNumber\": \"123456789\",\n  \"number\": \"+33123456789\",\n  \"possibleCountries\": [\"FR\"],\n  \"type\": \"FIXED_LINE\",\n  \"uri\": \"tel:+33123456789\"\n}\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>5. To consider that <code>phone_number</code> cannot have additional text use <code>extract:  false</code> as option</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info(\"Hello +33123456789 !\", json '{\"extract\": false}')\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info(\"Hello +33123456789 !\", json '{\"extract\": false}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info(\"Hello +33123456789 !\", json '{\"extract\": false}')\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                               |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": false,\n  \"isValid\": false,\n  \"parseError\": \"NOT_A_NUMBER\",\n  \"country\": null,\n  \"countryCallingCode\": null,\n  \"formattedInternational\": null,\n  \"formattedNational\": null,\n  \"isNonGeographic\": null,\n  \"nationalNumber\": null,\n  \"number\": null,\n  \"possibleCountries\": null,\n  \"type\": null,\n  \"uri\": null,\n}\n |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/phone_number_info/#use-cases","title":"Use cases","text":"<p>A customer service department stores customer phone numbers in a BigQuery table.  They want to clean up the data and enrich it with location information. The <code>phone_number_info</code> function can be used to accomplish this.</p> <p>Use Case Scenario:</p> <p>The table <code>customer_data</code> contains a column <code>phone</code> with various formats of phone numbers, including some with extra characters or missing country codes.</p> <p>Example BigQuery SQL:</p> <pre><code>SELECT\n    phone,\n    bigfunctions.us.phone_number_info(phone, JSON '{\"defaultCountry\": \"US\"}') AS phone_info\nFROM\n    `project_id.dataset_id.customer_data`;\n</code></pre> <p>Explanation:</p> <ol> <li> <p><code>bigfunctions.us.phone_number_info(phone, JSON '{\"defaultCountry\": \"US\"}')</code>: This calls the <code>phone_number_info</code> function.</p> <ul> <li>We're using the <code>us</code> dataset because our project is in the US multi-region.  Choose the appropriate regional or multi-regional dataset for your project's location.</li> <li><code>phone</code> is the column containing the phone number string.</li> <li><code>JSON '{\"defaultCountry\": \"US\"}'</code> provides the optional <code>defaultCountry</code> parameter. This is important for correctly interpreting phone numbers that don't start with a \"+\" and country code.  It assumes any number without a \"+\" is a US number.  You would change this to match the expected default country for your data.</li> </ul> </li> <li> <p><code>AS phone_info</code>: This assigns the output of the function to a new column named <code>phone_info</code>. The output is a JSON structure.</p> </li> </ol> <p>Benefits:</p> <ul> <li>Standardization:  The function parses and standardizes the phone numbers into a consistent international format (<code>number</code> field in the JSON output), even if the original data was messy.</li> <li>Validation: The <code>isValid</code> field in the JSON output indicates whether the phone number is valid according to international standards. This allows for identifying and correcting invalid numbers.</li> <li>Enrichment: The function provides additional information like <code>country</code> and <code>type</code> (e.g., mobile, fixed line). This data can be used for segmentation, analytics, and reporting.</li> <li>Data Cleaning:  You can use the output to filter out invalid numbers:</li> </ul> <pre><code>SELECT\n    phone\nFROM\n    `project_id.dataset_id.customer_data`,\n    UNNEST(bigfunctions.us.phone_number_info(phone, JSON '{\"defaultCountry\": \"US\"}')) AS phone_info\nWHERE phone_info.isValid = TRUE;\n</code></pre> <p>This example demonstrates how to use the <code>phone_number_info</code> function to clean, validate, and standardize phone number data in BigQuery, enabling better data quality and more insightful analysis.  Remember to adjust the dataset and <code>defaultCountry</code> parameter based on your project's location and the characteristics of your data.</p> Need help or Found a bug? Get help using <code>phone_number_info</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>phone_number_info</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/post/","title":"post","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>export</li> </ul>"},{"location":"bigfunctions/post/#post","title":"post","text":"<pre><code>post(url, data, headers)\n</code></pre>"},{"location":"bigfunctions/post/#description","title":"Description","text":"<p>POST <code>data</code> to <code>url</code>. <code>response</code> is a json formatted as <code>{status_code, content}</code></p>"},{"location":"bigfunctions/post/#usage","title":"Usage","text":"Call or Deploy <code>post</code> ? Call <code>post</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>post</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>post</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>post</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>post</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get post\nbigfun deploy post\n</code></pre> Keep the secrets safe! <p>Do NOT write secrets in plain text in your SQL queries!</p> <p>Otherwise, anyone with access to your BigQuery logs can read and use them.</p> <p>Instead, generate an encrypted version that you can safely share:</p> <p> Encrypt Secret </p> <ol> <li>Enter a secret value below along with the emails of the users who are authorized to use it (separated by commas).</li> <li>Click on <code>Encrypt Secret</code>.</li> <li>The browser (no server is called) will generate an encrypted version and copy it in the clipboard</li> <li>Paste the encrypted secret into the arguments of your function exactly like if you passed the plain text version.</li> <li>The bigfunction will decrypt it and check that the calling user is authorized.</li> </ol> More on secret encryption <p>Technically, this encryption system uses the same encryption mechanism used to transfer data over the internet. It uses a pair of a public and private keys.</p> <p>The public key (contained in this web page) is used to encrypt a text. The corresponding private key is the only one who is able to decrypt the text. The private key is stored in a secret manager and is only accessible to this function. Thus, this function (and this function only) can decrypt it.</p> <p>Moreover, the function will check that the caller of the function belong to the list of <code>authorized users</code> that you gave at encryption time.</p> <p>Thanks to this:</p> <ul> <li>Nobody but this function will be able to decrypt it.</li> <li>Nobody but <code>authorized users</code> can use the encrypted version in a function.</li> <li>No function but the function <code>post</code> can decrypt it.</li> </ul>"},{"location":"bigfunctions/post/#examples","title":"Examples","text":"<p>Without headers</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.post(\"https://httpbin.org/post\", json '{\"hello\": \"world\"}', null)\n</code></pre> <pre><code>select bigfunctions.us.post(\"https://httpbin.org/post\", json '{\"hello\": \"world\"}', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.post(\"https://httpbin.org/post\", json '{\"hello\": \"world\"}', null)\n</code></pre> <pre>\n<code>+-----------------------------------------------+\n| response                                      |\n+-----------------------------------------------+\n| {\n  \"content\": {...},\n  \"status_code\": 200\n}\n |\n+-----------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/post/#use-cases","title":"Use cases","text":"<p>This <code>post</code> BigQuery function could be used in several scenarios:</p> <p>1. Sending Data to a Webhook:</p> <p>Imagine you have a BigQuery table that tracks user sign-ups. You could use the <code>post</code> function to send real-time notifications to a Slack channel or other messaging platform via a webhook every time a new user registers.  The <code>data</code> parameter would contain the user information you want to send in the notification.</p> <pre><code>SELECT bigfunctions.us.post('YOUR_WEBHOOK_URL', TO_JSON_STRING(new_users), NULL)\nFROM project.dataset.new_users;\n</code></pre> <p>2. Interacting with an API:</p> <p>You could use <code>post</code> to interact with REST APIs from within BigQuery.  For example, you might want to enrich your data with information from a third-party service. After performing some transformations on your data in BigQuery, you could use the <code>post</code> function to send the transformed data to the API endpoint, receive the response, and then process it further within BigQuery.</p> <pre><code>SELECT bigfunctions.us.post('https://api.example.com/data', TO_JSON_STRING(t), NULL)\nFROM (\n  SELECT user_id, SUM(order_value) as total_spent\n  FROM project.dataset.orders\n  GROUP BY user_id\n) AS t;\n</code></pre> <p>3. Triggering Actions in External Systems:</p> <p>Suppose you have a BigQuery table that monitors key performance indicators (KPIs). If a KPI falls below a certain threshold, you could use the <code>post</code> function to trigger an action in an external system. This could be anything from sending an alert email to initiating a process in a workflow automation tool.</p> <pre><code>SELECT bigfunctions.us.post('https://api.example.com/alert', TO_JSON_STRING(t), NULL)\nFROM (\n  SELECT *\n  FROM project.dataset.kpis\n  WHERE kpi_value &lt; threshold\n) AS t;\n</code></pre> <p>4. Sending Data to a Real-time Dashboard:</p> <p>If you are using a real-time dashboarding tool, you could use the <code>post</code> function to send data updates directly from BigQuery. This would allow you to keep your dashboards up-to-date with the latest information without needing to build complex data pipelines.</p> <pre><code>SELECT bigfunctions.us.post('https://api.dashboard.com/update', TO_JSON_STRING(t), NULL)\nFROM (\n  SELECT COUNT(*) AS active_users\n  FROM project.dataset.users\n  WHERE last_seen &gt; TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR)\n) AS t;\n</code></pre> <p>Key Considerations:</p> <ul> <li>Data Format: The <code>data</code> parameter must be a valid JSON string. You can use the <code>TO_JSON_STRING</code> function in BigQuery to convert your data into the required format.</li> <li>Headers: The <code>headers</code> parameter allows you to set custom HTTP headers for your request. This can be useful for authentication or setting content types.  Pass <code>NULL</code> if no headers are needed.</li> <li>Error Handling: You should implement proper error handling to ensure that your queries are resilient to network issues or API errors. Check the <code>status_code</code> in the response to determine if the request was successful.</li> <li>Rate Limiting: Be mindful of rate limits imposed by the API you are interacting with. You might need to implement retry mechanisms or introduce delays to avoid exceeding these limits.</li> <li>Security: If you are sending sensitive data, ensure that the connection to the API is secure (HTTPS) and consider using appropriate authentication methods.</li> </ul> <p>By leveraging the <code>post</code> function, you can extend the functionality of BigQuery and seamlessly integrate it with other systems and services. This opens up a wide range of possibilities for automating tasks, enriching data, and building more dynamic data-driven applications.</p> Need help or Found a bug? Get help using <code>post</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>post</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/precision_recall_auc/","title":"precision_recall_auc","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>machine_learning</li> </ul>"},{"location":"bigfunctions/precision_recall_auc/#precision_recall_auc","title":"precision_recall_auc","text":"<pre><code>precision_recall_auc(predictions)\n</code></pre>"},{"location":"bigfunctions/precision_recall_auc/#description","title":"Description","text":"<p>Returns the Area Under the Precision Recall Curve (a.k.a. AUC PR) given a set of predicted scores and ground truth labels using the trapezoidal rule</p>"},{"location":"bigfunctions/precision_recall_auc/#usage","title":"Usage","text":"Call or Deploy <code>precision_recall_auc</code> ? Call <code>precision_recall_auc</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>precision_recall_auc</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>precision_recall_auc</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>precision_recall_auc</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>precision_recall_auc</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get precision_recall_auc\nbigfun deploy precision_recall_auc\n</code></pre>"},{"location":"bigfunctions/precision_recall_auc/#examples","title":"Examples","text":"<p>1. Random classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+--------+\n| auc_pr |\n+--------+\n| 0.5    |\n+--------+\n</code>\n</pre> <p>2. Good classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+--------+\n| auc_pr |\n+--------+\n| 1.0    |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/precision_recall_auc/#use-cases","title":"Use cases","text":"<p>You're evaluating a machine learning model designed to predict customer churn for a telecommunications company.  You have a dataset with customer features and a label indicating whether they churned (1) or not (0).  Your model outputs a churn probability score for each customer.</p> <p>Here's how you would use the <code>precision_recall_auc</code> function in BigQuery to evaluate your model:</p> <pre><code>SELECT bigfunctions.YOUR_REGION.precision_recall_auc(\n    (\n        SELECT\n            ARRAY_AGG(\n                STRUCT(\n                    predicted_churn_probability AS predicted_score,\n                    churned AS label\n                )\n            )\n        FROM\n            `your_project.your_dataset.customer_churn_predictions`\n    )\n) AS auc_pr;\n</code></pre> <p>Explanation:</p> <ol> <li> <p><code>your_project.your_dataset.customer_churn_predictions</code>:  Replace this with the actual location of your BigQuery table containing the predictions. This table should have at least two columns:</p> <ul> <li><code>predicted_churn_probability</code>:  The predicted probability of churn (a floating-point number between 0 and 1).</li> <li><code>churned</code>: The ground truth label (1 for churn, 0 for no churn).</li> </ul> </li> <li> <p><code>ARRAY_AGG(STRUCT(...))</code>: This constructs an array of structs, where each struct contains the predicted score and the true label for a single customer. This is the required input format for the <code>precision_recall_auc</code> function.</p> </li> <li> <p><code>bigfunctions.YOUR_REGION.precision_recall_auc</code>: Replace <code>YOUR_REGION</code> with the appropriate BigQuery region where your data resides (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>). This function calculates the area under the precision-recall curve.</p> </li> <li> <p><code>AS auc_pr</code>: This assigns the resulting AUC-PR value to a column named <code>auc_pr</code>.</p> </li> </ol> <p>Why use AUC-PR in this case?</p> <p>Churn prediction is often an imbalanced classification problem, meaning there are significantly more non-churners than churners.  AUC-PR is a better metric than AUC-ROC for imbalanced datasets because it focuses on the positive class (churners in this case).  A higher AUC-PR indicates a better model at identifying churners, even if they are a small portion of the overall customer base.</p> <p>By calculating the AUC-PR, you get a single number summarizing your model's performance, making it easier to compare different models or track the performance of a single model over time.</p> Need help or Found a bug? Get help using <code>precision_recall_auc</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>precision_recall_auc</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/precision_recall_curve/","title":"precision_recall_curve","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>machine_learning</li> </ul>"},{"location":"bigfunctions/precision_recall_curve/#precision_recall_curve","title":"precision_recall_curve","text":"<pre><code>precision_recall_curve(predictions)\n</code></pre>"},{"location":"bigfunctions/precision_recall_curve/#description","title":"Description","text":"<p>Returns the Precision-Recall Curve (as a table) given <code>predictions</code>, an array  of <code>(predicted_score, ground_truth_label)</code></p>"},{"location":"bigfunctions/precision_recall_curve/#usage","title":"Usage","text":"Call or Deploy <code>precision_recall_curve</code> ? Call <code>precision_recall_curve</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>precision_recall_curve</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>precision_recall_curve</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>precision_recall_curve</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>precision_recall_curve</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get precision_recall_curve\nbigfun deploy precision_recall_curve\n</code></pre>"},{"location":"bigfunctions/precision_recall_curve/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select * from bigfunctions.eu.precision_recall_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre><code>select * from bigfunctions.us.precision_recall_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre><code>select * from bigfunctions.europe_west1.precision_recall_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre>\n<code>\n+-----------+---------+\n| precision |  recall |\n+-----------+---------+\n|    0.5    |   1.0   |\n|    0.667  |   1.0   |\n|    0.5    |   0.5   |\n|    1.0    |   0.5   |\n|    1.0    |   0     |\n+-----------+---------+\n\n</code>\n</pre>"},{"location":"bigfunctions/precision_recall_curve/#use-cases","title":"Use cases","text":"<p>You're evaluating a binary classification model (e.g., spam detection, fraud detection, disease diagnosis) and want to understand its performance across different thresholds.  The <code>precision_recall_curve</code> function helps you analyze the trade-off between precision and recall.</p> <p>Use Case: Optimizing a Fraud Detection Model</p> <p>Imagine you've trained a model to predict fraudulent transactions.  Each transaction is assigned a score between 0 and 1, representing the model's confidence that the transaction is fraudulent.  You need to choose a threshold above which you flag a transaction as fraudulent.  A higher threshold means higher precision (fewer false positives\u2014legitimate transactions flagged as fraud) but lower recall (more false negatives\u2014fraudulent transactions missed).</p> <p>Here's how <code>precision_recall_curve</code> helps:</p> <ol> <li> <p>Data Preparation: You have a dataset with the predicted scores from your model and the ground truth labels (whether the transaction was actually fraudulent).  This data is formatted as an array of structs, where each struct contains the <code>predicted_score</code> (float64) and the <code>ground_truth_label</code> (bool).</p> </li> <li> <p>Calling the Function: You use the <code>precision_recall_curve</code> function in your BigQuery query, passing in the array of structs:</p> </li> </ol> <pre><code>SELECT *\nFROM bigfunctions.your_region.precision_recall_curve(\n    ARRAY[\n        (0.1, false), -- Low score, not fraud\n        (0.4, false), -- Low score, not fraud\n        (0.35, true), -- Moderate score, fraud\n        (0.8, true), -- High score, fraud\n        (0.95, false), -- Very high score, surprisingly not fraud (potential outlier?)\n        (0.6, true), --  Moderate-high score, fraud\n        (0.2, false) -- Low score, not fraud\n    ]\n);\n</code></pre> <ol> <li> <p>Interpreting the Results: The function returns a table with <code>precision</code> and <code>recall</code> columns. Each row represents a different threshold, and the values show the precision and recall achieved at that threshold.  By examining this curve:</p> </li> <li> <p>Visualization: You can plot the precision-recall curve (precision on the y-axis, recall on the x-axis) to visualize the trade-off.</p> </li> <li>Threshold Selection: You can identify the optimal threshold based on your specific business requirements.  For fraud detection, you might prioritize high recall (catching most fraudulent transactions even if it means more false positives that you can investigate manually) or balance precision and recall based on the costs associated with each type of error.</li> <li>Model Evaluation:  The overall shape of the curve tells you about the performance of your model. A curve closer to the top-right corner indicates a better-performing model. You can compare the precision-recall curves of different models to choose the best one.</li> <li>Identifying Issues: The example shows a case where a very high score (0.95) was associated with a non-fraudulent transaction.  This could be a sign of an issue with your model or a data anomaly worth investigating. The precision-recall curve, combined with an understanding of your data, helps pinpoint such scenarios.</li> </ol> <p>In essence, the <code>precision_recall_curve</code> function provides a powerful tool for evaluating and fine-tuning your binary classification models, enabling you to make informed decisions about selecting the best operating point based on the desired balance between precision and recall.</p> Need help or Found a bug? Get help using <code>precision_recall_curve</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>precision_recall_curve</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/prophet/","title":"prophet","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>machine_learning</li> </ul>"},{"location":"bigfunctions/prophet/#prophet","title":"prophet","text":"<pre><code>prophet(records, periods, kwargs)\n</code></pre>"},{"location":"bigfunctions/prophet/#description","title":"Description","text":"<p>Return Time Series Forecast as json using prophet python library.</p> <p>Parameters of this function are passed as is to prophet python function and python function result is returned as is.</p> <p>(Inspired from this Felipe Hoffa medium's post)</p>"},{"location":"bigfunctions/prophet/#usage","title":"Usage","text":"Call or Deploy <code>prophet</code> ? Call <code>prophet</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>prophet</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>prophet</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>prophet</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>prophet</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get prophet\nbigfun deploy prophet\n</code></pre>"},{"location":"bigfunctions/prophet/#examples","title":"Examples","text":"<p>1. Using a table with columns named <code>ds</code> and <code>y</code> for date and value respectively</p> EUUSeurope-west1 <pre><code>with sample_data as (\n\n  select date('2022-01-01') as ds, 1 as y,\n      union all\n      select date('2022-01-02') as ds, 2 as y,\n\n)\n\n\nselect bigfunctions.eu.prophet(to_json(array_agg(sample_data)), 3, null)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select date('2022-01-01') as ds, 1 as y,\n      union all\n      select date('2022-01-02') as ds, 2 as y,\n\n)\n\n\nselect bigfunctions.us.prophet(to_json(array_agg(sample_data)), 3, null)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select date('2022-01-01') as ds, 1 as y,\n      union all\n      select date('2022-01-02') as ds, 2 as y,\n\n)\n\n\nselect bigfunctions.europe_west1.prophet(to_json(array_agg(sample_data)), 3, null)\nfrom sample_data\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| forecasted_records                                                                                                                                                             |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n  {\"ds\": \"2022-01-03\", \"yhat\": 3, \"yhat_upper\": 3, ...},\n  {\"ds\": \"2022-01-04\", \"yhat\": 4, \"yhat_upper\": 4, ...},\n  {\"ds\": \"2022-01-05\", \"yhat\": 5, \"yhat_upper\": 5, ...}\n]\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>2. Using a table with columns to rename to <code>ds</code> and <code>y</code></p> EUUSeurope-west1 <pre><code>with sample_data as (\n\n  select date('2022-01-01') as date, 1 as value,\n      union all\n      select date('2022-01-02') as date, 2 as value,\n\n)\n\n\nselect bigfunctions.eu.prophet(to_json(array_agg(struct(date as ds, value as y))), 3, null)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select date('2022-01-01') as date, 1 as value,\n      union all\n      select date('2022-01-02') as date, 2 as value,\n\n)\n\n\nselect bigfunctions.us.prophet(to_json(array_agg(struct(date as ds, value as y))), 3, null)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select date('2022-01-01') as date, 1 as value,\n      union all\n      select date('2022-01-02') as date, 2 as value,\n\n)\n\n\nselect bigfunctions.europe_west1.prophet(to_json(array_agg(struct(date as ds, value as y))), 3, null)\nfrom sample_data\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| forecasted_records                                                                                                                                                             |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n  {\"ds\": \"2022-01-03\", \"yhat\": 3, \"yhat_upper\": 3, ...},\n  {\"ds\": \"2022-01-04\", \"yhat\": 4, \"yhat_upper\": 4, ...},\n  {\"ds\": \"2022-01-05\", \"yhat\": 5, \"yhat_upper\": 5, ...}\n]\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/prophet/#use-cases","title":"Use cases","text":"<p>A use case for this <code>prophet</code> BigQuery function would be forecasting future sales based on historical sales data. Imagine you have a table in BigQuery called <code>sales_data</code> with two columns: <code>date</code> (DATE) and <code>sales</code> (INTEGER).  You want to predict sales for the next 7 days.</p> <pre><code>SELECT bigfunctions.&lt;your-region&gt;.prophet(\n    (\n        SELECT\n            JSON_ARRAY(CAST(date AS STRING), sales)\n        FROM\n            `your-project.your_dataset.sales_data`\n        ORDER BY\n            date\n    ),\n    7\n) AS forecasted_sales;\n</code></pre> <p>Replace <code>&lt;your-region&gt;</code> with the appropriate BigQuery region for your dataset (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>). This query will:</p> <ol> <li> <p>Prepare the input data: The subquery selects the date and sales data from your <code>sales_data</code> table, converts the date to a string, and uses <code>JSON_ARRAY</code> to create an array of [date, sales] pairs for each row. This is the format expected by the <code>prophet</code> function. The data is ordered by date, which is crucial for time series forecasting.</p> </li> <li> <p>Call the prophet function: The <code>prophet</code> function is called with the JSON array of historical data and the number of periods (7 days) to forecast.</p> </li> <li> <p>Return the forecast:  The function returns a JSON array containing the forecasted sales for the next 7 days in the same [date, sales] format.  The result is aliased as <code>forecasted_sales</code>.</p> </li> </ol> <p>You can then use the forecasted sales data for inventory planning, resource allocation, and other business decisions.</p> <p>More advanced example with custom seasonality:</p> <p>You can also pass additional parameters to the underlying Prophet model using the <code>kwargs</code> argument. For example, to add a weekly seasonality:</p> <pre><code>SELECT bigfunctions.&lt;your-region&gt;.prophet(\n    (\n        SELECT\n            JSON_ARRAY(CAST(date AS STRING), sales)\n        FROM\n            `your-project.your_dataset.sales_data`\n        ORDER BY\n            date\n    ),\n    7,\n    STRUCT(JSON'{\"weekly_seasonality\": true}' as kwargs)\n) AS forecasted_sales_with_weekly_seasonality;\n</code></pre> <p>This allows you to customize the model to better fit your specific data and business needs, such as accounting for daily, weekly, or yearly seasonality. Refer to the Prophet documentation for a complete list of available parameters.</p> <p>This example demonstrates how the <code>prophet</code> BigQuery function can be used for practical time series forecasting directly within BigQuery, simplifying the process and leveraging the power of Prophet without needing external libraries or tools.</p> Need help or Found a bug? Get help using <code>prophet</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>prophet</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/prophet_table/","title":"prophet_table","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>machine_learning</li> </ul>"},{"location":"bigfunctions/prophet_table/#prophet_table","title":"prophet_table","text":"<pre><code>prophet_table(records, periods, kwargs)\n</code></pre>"},{"location":"bigfunctions/prophet_table/#description","title":"Description","text":"<p>Return Time Series Forecast as table using prophet python library.</p> <p>Parameters of this function are passed as is to prophet python function and python function result is returned as is.</p> <p>(Inspired from this Felipe Hoffa medium's post)</p>"},{"location":"bigfunctions/prophet_table/#usage","title":"Usage","text":"Call or Deploy <code>prophet_table</code> ? Call <code>prophet_table</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>prophet_table</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>prophet_table</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>prophet_table</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>prophet_table</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get prophet_table\nbigfun deploy prophet_table\n</code></pre>"},{"location":"bigfunctions/prophet_table/#examples","title":"Examples","text":"<p>1. Using a table with columns named <code>ds</code> and <code>y</code> for date and value respectively</p> EUUSeurope-west1 <pre><code>with sample_data as (\n\n  select date('2022-01-01') as ds, 1 as y,\n      union all\n      select date('2022-01-02') as ds, 2 as y,\n\n)\n\n\nselect * from bigfunctions.eu.prophet_table(\n      to_json((\n        select array_agg(sample_data)\n        from sample_data\n      ))\n      , 3, null)\n</code></pre> <pre><code>with sample_data as (\n\n  select date('2022-01-01') as ds, 1 as y,\n      union all\n      select date('2022-01-02') as ds, 2 as y,\n\n)\n\n\nselect * from bigfunctions.us.prophet_table(\n      to_json((\n        select array_agg(sample_data)\n        from sample_data\n      ))\n      , 3, null)\n</code></pre> <pre><code>with sample_data as (\n\n  select date('2022-01-01') as ds, 1 as y,\n      union all\n      select date('2022-01-02') as ds, 2 as y,\n\n)\n\n\nselect * from bigfunctions.europe_west1.prophet_table(\n      to_json((\n        select array_agg(sample_data)\n        from sample_data\n      ))\n      , 3, null)\n</code></pre> <pre>\n<code>\n| -------------------------------------|\n|    date    | yhat | yhat_lower | ... |\n| -------------------------------------|\n| 2022-01-03 |  3   |     3      | ... |\n| 2022-01-04 |  4   |     4      | ... |\n| 2022-01-05 |  5   |     5      | ... |\n| -------------------------------------|\n\n</code>\n</pre> <p>2. Using a table with columns to rename to <code>ds</code> and <code>y</code></p> EUUSeurope-west1 <pre><code>with sample_data as (\n\n  select date('2022-01-01') as date, 1 as value,\n      union all\n      select date('2022-01-02') as date, 2 as value,\n\n)\n\n\nselect * from bigfunctions.eu.prophet_table(\n      to_json((\n        select array_agg(struct(date as ds, value as y))\n        from sample_data\n      ))\n      , 3, null)\n</code></pre> <pre><code>with sample_data as (\n\n  select date('2022-01-01') as date, 1 as value,\n      union all\n      select date('2022-01-02') as date, 2 as value,\n\n)\n\n\nselect * from bigfunctions.us.prophet_table(\n      to_json((\n        select array_agg(struct(date as ds, value as y))\n        from sample_data\n      ))\n      , 3, null)\n</code></pre> <pre><code>with sample_data as (\n\n  select date('2022-01-01') as date, 1 as value,\n      union all\n      select date('2022-01-02') as date, 2 as value,\n\n)\n\n\nselect * from bigfunctions.europe_west1.prophet_table(\n      to_json((\n        select array_agg(struct(date as ds, value as y))\n        from sample_data\n      ))\n      , 3, null)\n</code></pre> <pre>\n<code>\n| -------------------------------------|\n|    date    | yhat | yhat_lower | ... |\n| -------------------------------------|\n| 2022-01-03 |  3   |     3      | ... |\n| 2022-01-04 |  4   |     4      | ... |\n| 2022-01-05 |  5   |     5      | ... |\n| -------------------------------------|\n\n</code>\n</pre> Need help or Found a bug? Get help using <code>prophet_table</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>prophet_table</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/quantize_into_bins/","title":"quantize_into_bins","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_numeric</li> </ul>"},{"location":"bigfunctions/quantize_into_bins/#quantize_into_bins","title":"quantize_into_bins","text":"<pre><code>quantize_into_bins(value, bin_bounds)\n</code></pre>"},{"location":"bigfunctions/quantize_into_bins/#description","title":"Description","text":"<p>Get the <code>bin_range</code> in which belongs <code>value</code> with bins defined by their <code>bin_bounds</code>.</p>"},{"location":"bigfunctions/quantize_into_bins/#usage","title":"Usage","text":"Call or Deploy <code>quantize_into_bins</code> ? Call <code>quantize_into_bins</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>quantize_into_bins</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>quantize_into_bins</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>quantize_into_bins</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>quantize_into_bins</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get quantize_into_bins\nbigfun deploy quantize_into_bins\n</code></pre>"},{"location":"bigfunctions/quantize_into_bins/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins(-4, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins(-4, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins(-4, [0, 1, 5, 10])\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| ]-\u221e, 0[   |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins(3, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins(3, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins(3, [0, 1, 5, 10])\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| [1, 5[    |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins(9, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins(9, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins(9, [0, 1, 5, 10])\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| [5, 10]   |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins(130, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins(130, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins(130, [0, 1, 5, 10])\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| ]10, +\u221e[  |\n+-----------+\n</code>\n</pre>"},{"location":"bigfunctions/quantize_into_bins/#use-cases","title":"Use cases","text":"<p>You could use this function to categorize website session durations into bins for analysis.  Let's say you have a table of website session data with a <code>session_duration_seconds</code> column. You want to group these sessions into duration categories like \"Short (0-30s)\", \"Medium (31-60s)\", \"Long (61-180s)\", and \"Very Long (181s+)\".</p> <pre><code>SELECT\n    user_id,\n    bigfunctions.us.quantize_into_bins(session_duration_seconds, [0, 30, 60, 180]) AS session_duration_category\n  FROM\n    `your_project.your_dataset.your_session_table`\n</code></pre> <p>This query would add a <code>session_duration_category</code> column to your results.  For a session lasting 20 seconds, the category would be \"]\u2212\u221e, 0[\", since the lower bound isn't inclusive. For 45 seconds it would be \"[30, 60[\", for 150 seconds it would be \"[60, 180]\", and for 200 seconds it would be \"]180, +\u221e[\". You can then use this new category for aggregation and reporting, such as:</p> <pre><code>SELECT\n    session_duration_category,\n    COUNT(*) AS num_sessions,\n    AVG(pages_viewed) AS avg_pages_viewed\n  FROM (\n    SELECT\n        user_id,\n        bigfunctions.us.quantize_into_bins(session_duration_seconds, [0, 30, 60, 180]) AS session_duration_category,\n        pages_viewed\n      FROM\n        `your_project.your_dataset.your_session_table`\n  )\n  GROUP BY 1\n  ORDER BY 1\n</code></pre> <p>This would give you a summary table showing the number of sessions and average pages viewed for each session duration category.  This allows you to analyze user behavior based on how long they spend on your website.</p> <p>Other use cases include:</p> <ul> <li>Customer Segmentation by Purchase Value: Categorize customers based on their total spending into different tiers (e.g., low, medium, high spenders).</li> <li>Lead Scoring: Assign leads to different score ranges based on factors like engagement and demographics.</li> <li>Performance Analysis: Group employees into performance categories based on metrics like sales or customer satisfaction scores.</li> <li>Data Visualization: Create histograms or other visualizations where data needs to be binned for clarity.  The output of <code>quantize_into_bins</code> can be used directly for grouping in chart creation.</li> <li>Data Preprocessing for Machine Learning: Binning continuous variables can be a useful preprocessing step for certain machine learning models.</li> </ul> <p>Remember to replace <code>bigfunctions.us</code> with the appropriate dataset for your BigQuery region.</p> Need help or Found a bug? Get help using <code>quantize_into_bins</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>quantize_into_bins</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/quantize_into_bins_with_labels/","title":"quantize_into_bins_with_labels","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_numeric</li> </ul>"},{"location":"bigfunctions/quantize_into_bins_with_labels/#quantize_into_bins_with_labels","title":"quantize_into_bins_with_labels","text":"<pre><code>quantize_into_bins_with_labels(value, bin_bounds, labels)\n</code></pre>"},{"location":"bigfunctions/quantize_into_bins_with_labels/#description","title":"Description","text":"<p>Get the <code>label</code> of the bin in which belongs <code>value</code></p>"},{"location":"bigfunctions/quantize_into_bins_with_labels/#usage","title":"Usage","text":"Call or Deploy <code>quantize_into_bins_with_labels</code> ? Call <code>quantize_into_bins_with_labels</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>quantize_into_bins_with_labels</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>quantize_into_bins_with_labels</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>quantize_into_bins_with_labels</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>quantize_into_bins_with_labels</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get quantize_into_bins_with_labels\nbigfun deploy quantize_into_bins_with_labels\n</code></pre>"},{"location":"bigfunctions/quantize_into_bins_with_labels/#examples","title":"Examples","text":"<p>1. <code>55</code> is between <code>50</code> and <code>60</code> so it is in second bin. --&gt; Function returns <code>Wait for result exam</code> label.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins_with_labels(55, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins_with_labels(55, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins_with_labels(55, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre>\n<code>+----------------------+\n| label                |\n+----------------------+\n| Wait for result exam |\n+----------------------+\n</code>\n</pre> <p>2. Lower bounds are inclusive. <code>50</code> is then also in second bin. --&gt; Function returns <code>Wait for result exam</code> label.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins_with_labels(50, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins_with_labels(50, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins_with_labels(50, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre>\n<code>+----------------------+\n| label                |\n+----------------------+\n| Wait for result exam |\n+----------------------+\n</code>\n</pre> <p>3. <code>-10</code> is below the lowest bound --&gt; Function returns <code>UNDEFINED_INF</code>. (It returns <code>UNDEFINED_SUP</code> is above the upper bound).</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre>\n<code>+---------------+\n| label         |\n+---------------+\n| UNDEFINED_INF |\n+---------------+\n</code>\n</pre> <p>4. You can also pass <code>n + 1</code> labels instead of <code>n - 1</code> labels (when <code>n</code> is the number of bounds). In that case, values below the first bound will have this first label (instead of <code>UNDEFINED_INF</code>). <code>-10</code> will then give <code>Lower than very bad!</code>.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Lower than very bad!', 'Fail', 'Wait for result exam', 'Pass', 'Pass with mention', 'Genius!'])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Lower than very bad!', 'Fail', 'Wait for result exam', 'Pass', 'Pass with mention', 'Genius!'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Lower than very bad!', 'Fail', 'Wait for result exam', 'Pass', 'Pass with mention', 'Genius!'])\n</code></pre> <pre>\n<code>+---------------------+\n| label               |\n+---------------------+\n| Lower than very bad |\n+---------------------+\n</code>\n</pre>"},{"location":"bigfunctions/quantize_into_bins_with_labels/#use-cases","title":"Use cases","text":"<p>A common use case for the <code>quantize_into_bins_with_labels</code> function is assigning letter grades to students based on their numerical scores.</p> <p>Imagine a grading system where:</p> <ul> <li>0-50:  Fail</li> <li>50-60: Wait for result exam</li> <li>60-90: Pass</li> <li>90-100: Pass with mention</li> </ul> <p>You have a table of student scores:</p> <pre><code>CREATE TEMP TABLE StudentScores AS\nSELECT 'Alice' AS student, 75 AS score UNION ALL\nSELECT 'Bob', 55 AS score UNION ALL\nSELECT 'Charlie', 92 AS score UNION ALL\nSELECT 'David', 45 AS score UNION ALL\nSELECT 'Eve', 105 AS score;\n</code></pre> <p>You can use the <code>quantize_into_bins_with_labels</code> function to assign letter grades:</p> <pre><code>SELECT\n    student,\n    score,\n    bigfunctions.us.quantize_into_bins_with_labels(score, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention']) AS grade\nFROM\n    StudentScores;\n</code></pre> <p>This will return:</p> <pre><code>+---------+------+----------------------+\n| student | score | grade                |\n+---------+------+----------------------+\n| Alice   |   75 | Pass                 |\n| Bob     |   55 | Wait for result exam |\n| Charlie |   92 | Pass with mention    |\n| David   |   45 | Fail                 |\n| Eve     |  105 | UNDEFINED_SUP        |\n+---------+------+----------------------+\n</code></pre> <p>This clearly shows which grade each student receives based on their score.  The <code>UNDEFINED_SUP</code> for Eve indicates her score is above the defined range.  You could handle this by adding another bin (e.g., 100-110: Exceptional) or by using an n+1 label approach as shown in the documentation example 4.  For example:</p> <pre><code>SELECT\n    student,\n    score,\n    bigfunctions.us.quantize_into_bins_with_labels(score, [0, 50, 60, 90, 100], ['Lower than very bad!', 'Fail', 'Wait for result exam', 'Pass', 'Pass with mention', 'Genius!']) AS grade\nFROM\n    StudentScores;\n</code></pre> <p>Other use cases could include:</p> <ul> <li>Categorizing customer spending: Assign labels like \"Low Spender,\" \"Medium Spender,\" \"High Spender\" based on purchase amounts.</li> <li>Classifying product sales:  Group products into \"Low Sales,\" \"Moderate Sales,\" \"High Sales\" categories based on units sold.</li> <li>Defining age groups:  Assign age ranges to individuals like \"Child,\" \"Teenager,\" \"Adult,\" \"Senior.\"</li> <li>Bucketing sensor data: Categorize sensor readings into different levels (e.g., \"Low,\" \"Medium,\" \"High\") for easier analysis and alerts.</li> </ul> <p>Essentially, anytime you need to categorize continuous numeric data into discrete labeled bins, <code>quantize_into_bins_with_labels</code> can be helpful.</p> Need help or Found a bug? Get help using <code>quantize_into_bins_with_labels</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>quantize_into_bins_with_labels</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/quantize_into_fixed_width_bins/","title":"quantize_into_fixed_width_bins","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_numeric</li> </ul>"},{"location":"bigfunctions/quantize_into_fixed_width_bins/#quantize_into_fixed_width_bins","title":"quantize_into_fixed_width_bins","text":"<pre><code>quantize_into_fixed_width_bins(value, min_bound, max_bound, nb_bins)\n</code></pre>"},{"location":"bigfunctions/quantize_into_fixed_width_bins/#description","title":"Description","text":"<p>Get the <code>bin_range</code> in which belongs <code>value</code> with bins defined so that there are <code>nb_bins</code> bins of same width between <code>min_bound</code> and <code>max_bound</code> plus a bin <code>]-\u221e, min_bound[</code> and a bin <code>]max_bound, +\u221e[</code></p>"},{"location":"bigfunctions/quantize_into_fixed_width_bins/#usage","title":"Usage","text":"Call or Deploy <code>quantize_into_fixed_width_bins</code> ? Call <code>quantize_into_fixed_width_bins</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>quantize_into_fixed_width_bins</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>quantize_into_fixed_width_bins</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>quantize_into_fixed_width_bins</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>quantize_into_fixed_width_bins</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get quantize_into_fixed_width_bins\nbigfun deploy quantize_into_fixed_width_bins\n</code></pre>"},{"location":"bigfunctions/quantize_into_fixed_width_bins/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_fixed_width_bins(-4, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_fixed_width_bins(-4, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_fixed_width_bins(-4, 0, 100, 10)\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| ]-\u221e, 0[   |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_fixed_width_bins(5, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_fixed_width_bins(5, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_fixed_width_bins(5, 0, 100, 10)\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| [0, 10[   |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_fixed_width_bins(97, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_fixed_width_bins(97, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_fixed_width_bins(97, 0, 100, 10)\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| [90, 100] |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_fixed_width_bins(130, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_fixed_width_bins(130, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_fixed_width_bins(130, 0, 100, 10)\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| ]100, +\u221e[ |\n+-----------+\n</code>\n</pre>"},{"location":"bigfunctions/quantize_into_fixed_width_bins/#use-cases","title":"Use cases","text":"<p>Use Case: Customer Segmentation based on Purchase Value</p> <p>An e-commerce company wants to segment its customers based on their total purchase value over the last year. They want to create 5 segments of equal width, ranging from the lowest purchase value to the highest.</p> <p>Implementation with <code>quantize_into_fixed_width_bins</code>:</p> <ol> <li> <p>Determine the minimum and maximum purchase values: <pre><code>SELECT MIN(total_purchase_value) AS min_value, MAX(total_purchase_value) AS max_value\nFROM customer_purchases;\n</code></pre>    Let's assume <code>min_value</code> is 0 and <code>max_value</code> is 1000.</p> </li> <li> <p>Apply the <code>quantize_into_fixed_width_bins</code> function: <pre><code>SELECT customer_id, total_purchase_value,\n       bigfunctions.us.quantize_into_fixed_width_bins(total_purchase_value, 0, 1000, 5) AS purchase_segment\nFROM customer_purchases;\n</code></pre>    This will categorize each customer into one of the following segments:</p> </li> <li> <p><code>]-\u221e, 0[</code> (unlikely in this case, as purchase value should be non-negative)</p> </li> <li><code>[0, 200[</code></li> <li><code>[200, 400[</code></li> <li><code>[400, 600[</code></li> <li><code>[600, 800[</code></li> <li><code>[800, 1000]</code></li> <li> <p><code>]1000, +\u221e[</code></p> </li> <li> <p>Analyze and utilize the segments: The company can now use these segments for targeted marketing campaigns, personalized recommendations, and other business strategies. For example, customers in the highest segment (<code>[800, 1000]</code> and <code>]1000, +\u221e[</code>) could receive exclusive offers or loyalty programs.</p> </li> </ol> <p>Benefits of using <code>quantize_into_fixed_width_bins</code>:</p> <ul> <li>Simplified segmentation:  Easily creates equally sized bins, making it straightforward to understand and interpret the segments.</li> <li>Flexibility:  The number of bins and the range can be adjusted to suit different segmentation needs.</li> <li>Efficiency: The function handles the binning logic within the SQL query, eliminating the need for complex pre-processing steps.</li> </ul> <p>Other Use Cases:</p> <ul> <li>Categorizing website traffic:  Segmenting users based on time spent on site, number of pages viewed, or other metrics.</li> <li>Analyzing sensor data:  Grouping sensor readings into bins for easier analysis and visualization.</li> <li>Performance monitoring: Classifying response times or error rates into different severity levels.</li> <li>Creating histograms:  Generating histograms of data distributions using the binned values.</li> </ul> Need help or Found a bug? Get help using <code>quantize_into_fixed_width_bins</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>quantize_into_fixed_width_bins</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/rare_values/","title":"rare_values","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/rare_values/#rare_values","title":"rare_values","text":"<pre><code>rare_values(values, frequency_threshold)\n</code></pre>"},{"location":"bigfunctions/rare_values/#description","title":"Description","text":"<p>Returns <code>rare_values</code> among array of <code>values</code></p> <p>This function computes the frequency of each value in <code>values</code> array and returns the values which frequency is stricly below the given <code>frequency_threshold</code>.</p> <p>By returning rare values, this function can be used for anomaly detection in a variety of use cases.</p>"},{"location":"bigfunctions/rare_values/#usage","title":"Usage","text":"Call or Deploy <code>rare_values</code> ? Call <code>rare_values</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>rare_values</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>rare_values</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>rare_values</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>rare_values</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get rare_values\nbigfun deploy rare_values\n</code></pre>"},{"location":"bigfunctions/rare_values/#examples","title":"Examples","text":"<p>Detect rare strings in an array of strings with a <code>frequency_threshold</code> of 0.2. <code>cherry</code> appears once for an array of 6 elements so its frequency is 1 / 6 ~= 0.167 &lt; 0.2. It is a rare string compared to the <code>frequency_threshold</code>.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.rare_values(['apple', 'apple', 'banana', 'banana', 'banana', 'cherry'], 0.2)\n</code></pre> <pre><code>select bigfunctions.us.rare_values(['apple', 'apple', 'banana', 'banana', 'banana', 'cherry'], 0.2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.rare_values(['apple', 'apple', 'banana', 'banana', 'banana', 'cherry'], 0.2)\n</code></pre> <pre>\n<code>+-------------+\n| rare_values |\n+-------------+\n| [\"cherry\"]  |\n+-------------+\n</code>\n</pre>"},{"location":"bigfunctions/rare_values/#use-cases","title":"Use cases","text":"<p>Let's say you have a dataset of e-commerce transactions and you want to identify potentially fraudulent orders based on unusual shipping addresses.  You could use the <code>rare_values</code> function to find addresses that appear infrequently.</p> <p>Scenario:</p> <p>You have a table <code>orders</code> with a column <code>shipping_city</code>.  Most orders are shipped to common cities, but fraudulent orders might be shipped to less common locations.</p> <p>Query:</p> <pre><code>SELECT\n    shipping_city\n  FROM\n    `your-project.your_dataset.orders`\n  WHERE\n    shipping_city IN (\n      SELECT\n          *\n        FROM\n          UNARRAY(\n            bigfunctions.us.rare_values(\n              (\n                SELECT\n                    ARRAY_AGG(shipping_city)\n                  FROM\n                    `your-project.your_dataset.orders`\n              ),\n              0.01\n            )\n          )\n    )\n</code></pre> <p>Explanation:</p> <ol> <li><code>SELECT ARRAY_AGG(shipping_city) FROM your-project.your_dataset.orders</code>: This subquery aggregates all the <code>shipping_city</code> values into a single array.</li> <li><code>bigfunctions.us.rare_values(... , 0.01)</code>: This calls the <code>rare_values</code> function with the array of cities and a <code>frequency_threshold</code> of 0.01. This means any city that appears in less than 1% of the orders will be considered \"rare\".</li> <li><code>SELECT * FROM UNARRAY(...)</code>: This unnests the array of rare values returned by <code>rare_values</code> into individual rows.</li> <li><code>WHERE shipping_city IN (...)</code>: This filters the original <code>orders</code> table to only include rows where the <code>shipping_city</code> is present in the list of rare cities.</li> </ol> <p>Result:</p> <p>The query will return a list of <code>shipping_city</code> values that are considered rare based on the defined threshold.  You can then further investigate these orders to determine if they are potentially fraudulent.</p> <p>Other Use Cases:</p> <ul> <li>Product Anomaly Detection: Identify rarely purchased products, which could indicate data entry errors, discontinued items, or sudden changes in demand.</li> <li>User Behavior Analysis: Find users with uncommon activity patterns, which could be a sign of bots or malicious actors.</li> <li>Error Detection in Logs:  Identify rare error messages in system logs, which might point to new or infrequent bugs.</li> <li>Spam Detection: Find rare words or phrases used in emails or messages, which could indicate spam or phishing attempts.</li> </ul> <p>By adjusting the <code>frequency_threshold</code>, you can fine-tune the sensitivity of the rare value detection to suit your specific needs.</p> Need help or Found a bug? Get help using <code>rare_values</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>rare_values</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/refresh_powerbi/","title":"refresh_powerbi","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>trigger_event</li> </ul>"},{"location":"bigfunctions/refresh_powerbi/#refresh_powerbi","title":"refresh_powerbi","text":"<pre><code>refresh_powerbi(dataset_id, workspace_id, tenant_id, app_id, token_secret, custom_refresh_param)\n</code></pre>"},{"location":"bigfunctions/refresh_powerbi/#description","title":"Description","text":"<p>Refresh a Power BI dataset (semantic model) by it's id <code>dataset_id</code>.</p> <p>Use case:</p> <p>After model refresh, launch Power BI dataset (semantic model) refresh from BigQuery in SQL</p> <p></p> <ul> <li>in a dbt post-hook</li> <li>in a dataform post_operations</li> <li>in a SQL Mesh post-statements</li> <li>in your favorite orchestration tool</li> </ul> <p>Optionnal:</p> <p>on premium capacity, you can pass json argument (xmla like) to launch a custom refresh (ex: Full refresh only a given table )</p> <p>Docs:</p> <ul> <li>Microsoft's doc for service principal creation, token, security group affectation &amp; Fabric API to activate</li> <li>Microsoft's doc of refresh api</li> </ul> <p>Encrypt your secrets</p> <p>We advise NOT TO write your token in plain text in <code>token_secret</code> argument.</p> <p>Otherwise, they will be stored in plain text in your BigQuery logs for months.</p> <p>Instead, you can use the following snippet to generate an encrypted version of <code>token_secret</code> that you can copy safely as <code>token_secret</code> argument.</p> <p>This public bigfunction (deployed on bigfunctions GCP project) will be able to decrypt it. But no one else can.</p> Encrypt Secret"},{"location":"bigfunctions/refresh_powerbi/#usage","title":"Usage","text":"Call or Deploy <code>refresh_powerbi</code> ? Call <code>refresh_powerbi</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>refresh_powerbi</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>refresh_powerbi</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>refresh_powerbi</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>refresh_powerbi</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get refresh_powerbi\nbigfun deploy refresh_powerbi\n</code></pre> <p>Requirements</p> <p><code>refresh_powerbi</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>refresh_powerbi_rsa_private_key</code> RSA Private Key used to decrypt secrets doc"},{"location":"bigfunctions/refresh_powerbi/#examples","title":"Examples","text":"<p>1. Refresh of a dataset</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.refresh_powerbi(\"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"ENCRYPTED_SECRET(GvVm...)\", null)\n</code></pre> <pre><code>select bigfunctions.us.refresh_powerbi(\"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"ENCRYPTED_SECRET(GvVm...)\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.refresh_powerbi(\"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"ENCRYPTED_SECRET(GvVm...)\", null)\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre> <p>2. custom refresh (xmla like) - premium capacity only</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.refresh_powerbi(\"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"ENCRYPTED_SECRET(GvVm...)\", json '{ \"type\": \"Full\", \"objects\": [ { \"table\": \"table_name\" } ] }')\n</code></pre> <pre><code>select bigfunctions.us.refresh_powerbi(\"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"ENCRYPTED_SECRET(GvVm...)\", json '{ \"type\": \"Full\", \"objects\": [ { \"table\": \"table_name\" } ] }')\n</code></pre> <pre><code>select bigfunctions.europe_west1.refresh_powerbi(\"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"xxx-xxx-xxx\", \"ENCRYPTED_SECRET(GvVm...)\", json '{ \"type\": \"Full\", \"objects\": [ { \"table\": \"table_name\" } ] }')\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/refresh_powerbi/#use-cases","title":"Use cases","text":"<p>A common use case for the <code>refresh_powerbi</code> function is automating the refresh of a Power BI dataset after data in its connected BigQuery tables has been updated.</p> <p>Scenario: Imagine you have a BigQuery data warehouse that is used as a source for a Power BI dashboard. You have a daily ETL process that updates several tables in BigQuery. After this process completes, you want to ensure that the Power BI dataset is refreshed so that the dashboard reflects the latest data.</p> <p>Implementation: You could use an orchestration tool like Airflow, Cloud Composer, or Cloud Functions to schedule the ETL process and the subsequent Power BI dataset refresh.  After the ETL tasks have successfully completed, a final task would call the <code>refresh_powerbi</code> function.  This function would trigger the refresh of the Power BI dataset using the provided credentials and parameters.</p> <p>Example (using Airflow):</p> <pre><code>from airflow import DAG\nfrom airflow.providers.google.cloud.operators.bigquery import BigQueryInsertJobOperator\nfrom datetime import datetime\n\nwith DAG(\n    dag_id=\"refresh_powerbi_example\",\n    start_date=datetime(2023, 10, 26),\n    schedule_interval=\"@daily\",\n    catchup=False,\n) as dag:\n    # ETL tasks (e.g., loading data into BigQuery)\n    etl_task_1 = BigQueryInsertJobOperator(\n        task_id=\"etl_task_1\",\n        configuration={\n            \"query\": {\n                \"query\": \"your_etl_query_1\",\n                \"useLegacySql\": False,\n            }\n        },\n    )\n\n    etl_task_2 = BigQueryInsertJobOperator(\n        task_id=\"etl_task_2\",\n        configuration={\n            \"query\": {\n                \"query\": \"your_etl_query_2\",\n                \"useLegacySql\": False,\n            }\n        },\n    )\n\n\n    # Refresh Power BI dataset after ETL completes\n    refresh_powerbi_task = BigQueryInsertJobOperator(\n        task_id=\"refresh_powerbi\",\n        configuration={\n            \"query\": {\n                \"query\": f\"\"\"\n                    SELECT bigfunctions.{your_region}.refresh_powerbi(\n                        '{your_dataset_id}',\n                        '{your_workspace_id}',\n                        '{your_tenant_id}',\n                        '{your_app_id}',\n                        'ENCRYPTED_SECRET({your_encrypted_token})',\n                        NULL\n                    );\n                \"\"\",\n                \"useLegacySql\": False,\n            }\n        },\n    )\n\n\n    [etl_task_1, etl_task_2] &gt;&gt; refresh_powerbi_task\n</code></pre> <p>Replace the placeholder values with your actual configuration. This setup ensures that the Power BI dataset is automatically refreshed after the ETL process finishes, keeping the dashboard up-to-date.  This automation simplifies data management and provides users with the most current insights.</p> Need help or Found a bug? Get help using <code>refresh_powerbi</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>refresh_powerbi</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/refresh_tableau/","title":"refresh_tableau","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>trigger_event</li> </ul>"},{"location":"bigfunctions/refresh_tableau/#refresh_tableau","title":"refresh_tableau","text":"<pre><code>refresh_tableau(workbook_or_datasource_title, site, server, token_name, token_secret)\n</code></pre>"},{"location":"bigfunctions/refresh_tableau/#description","title":"Description","text":"<p>Refresh a tableau datasource or workbook named <code>workbook_or_datasource_title</code>.</p> <p>Use case:</p> <p>After model refresh, launch tableau datasource / workbook refresh from BigQuery in SQL</p> <p></p> <ul> <li>in a dbt post-hook</li> <li>in a dataform post_operations</li> <li>in a SQL Mesh post-statements</li> <li>in your favorite orchestration tool</li> </ul> <p>Docs</p> <ul> <li>Tableau's doc for creating a personnal access token on tableau server (cloud or onprem) for api usage</li> </ul> <p>Encrypt your secrets</p> <p>We advise NOT TO write your token in plain text in <code>token_secret</code> argument.</p> <p>Otherwise, they will be stored in plain text in your BigQuery logs for months.</p> <p>Instead, you can use the following snippet to generate an encrypted version of <code>token_secret</code> that you can copy safely as <code>token_secret</code> argument.</p> <p>This public bigfunction (deployed on bigfunctions GCP project) will be able to decrypt it. But no one else can.</p> Encrypt Secret"},{"location":"bigfunctions/refresh_tableau/#usage","title":"Usage","text":"Call or Deploy <code>refresh_tableau</code> ? Call <code>refresh_tableau</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>refresh_tableau</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>refresh_tableau</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>refresh_tableau</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>refresh_tableau</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get refresh_tableau\nbigfun deploy refresh_tableau\n</code></pre> <p>Requirements</p> <p><code>refresh_tableau</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>refresh_tableau_rsa_private_key</code> RSA Private Key used to decrypt secrets doc"},{"location":"bigfunctions/refresh_tableau/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.refresh_tableau(\"My Great Workbook\", \"site_name\", \"eu-west-1a.online.tableau.com\", \"token_name\", \"ENCRYPTED_SECRET(GvVm...)\")\n</code></pre> <pre><code>select bigfunctions.us.refresh_tableau(\"My Great Workbook\", \"site_name\", \"eu-west-1a.online.tableau.com\", \"token_name\", \"ENCRYPTED_SECRET(GvVm...)\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.refresh_tableau(\"My Great Workbook\", \"site_name\", \"eu-west-1a.online.tableau.com\", \"token_name\", \"ENCRYPTED_SECRET(GvVm...)\")\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/refresh_tableau/#use-cases","title":"Use cases","text":"<p>A common use case for the <code>refresh_tableau</code> function is automating the refresh of Tableau dashboards after underlying data has been updated.</p> <p>Scenario: Imagine a company that uses BigQuery to store sales data and Tableau to visualize this data in dashboards.  They have a daily ETL process that updates the sales data in BigQuery.  They want their Tableau dashboards to reflect this updated data automatically.</p> <p>Implementation using <code>refresh_tableau</code>:</p> <ol> <li> <p>Tableau Setup:  A personal access token is created in Tableau Server with appropriate permissions to refresh the target datasource or workbook.</p> </li> <li> <p>BigQuery Implementation: The <code>refresh_tableau</code> function is called within a BigQuery script, scheduled to run after the daily ETL process completes. This script would look something like this (using the US region example):</p> </li> </ol> <pre><code>-- Assume the ETL process has just finished updating sales data.\n\nSELECT bigfunctions.us.refresh_tableau(\n    'Sales Dashboard',  -- Replace with the actual workbook/datasource name\n    'site_name',        -- Replace with the Tableau site name\n    'eu-west-1a.online.tableau.com', -- Replace with your Tableau server address\n    'token_name',       -- Replace with your token name\n    'ENCRYPTED_SECRET(GvVm...)' -- Replace with your encrypted token secret\n);\n</code></pre> <ol> <li>Orchestration (Optional):  A workflow orchestration tool like Cloud Composer or Cloud Functions could be used to manage the dependencies between the ETL process and the BigQuery script. The orchestration tool would ensure that the <code>refresh_tableau</code> function is called only after the ETL process has successfully completed.</li> </ol> <p>Benefits:</p> <ul> <li>Automation: Eliminates the need for manual refreshes, saving time and ensuring data consistency.</li> <li>Data Freshness:  Dashboards always reflect the latest data.</li> <li>Integration: Seamlessly integrates with BigQuery ETL processes.</li> <li>Centralized Management: Tableau refresh logic is managed within BigQuery, simplifying administration.</li> </ul> <p>This automation ensures that business users always have access to the most up-to-date insights in their Tableau dashboards without any manual intervention.  The encrypted secret provides a secure way to manage the Tableau access token within the BigQuery environment.</p> Need help or Found a bug? Get help using <code>refresh_tableau</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>refresh_tableau</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/remove_accents/","title":"remove_accents","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/remove_accents/#remove_accents","title":"remove_accents","text":"<pre><code>remove_accents(str)\n</code></pre>"},{"location":"bigfunctions/remove_accents/#description","title":"Description","text":"<p>Remove accents</p>"},{"location":"bigfunctions/remove_accents/#usage","title":"Usage","text":"Call or Deploy <code>remove_accents</code> ? Call <code>remove_accents</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>remove_accents</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>remove_accents</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>remove_accents</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>remove_accents</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get remove_accents\nbigfun deploy remove_accents\n</code></pre>"},{"location":"bigfunctions/remove_accents/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_accents(\"Voil\\u00e0 !\")\n</code></pre> <pre><code>select bigfunctions.us.remove_accents(\"Voil\\u00e0 !\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_accents(\"Voil\\u00e0 !\")\n</code></pre> <pre>\n<code>+----------------+\n| cleaned_string |\n+----------------+\n| Voila !        |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_accents/#use-cases","title":"Use cases","text":"<p>A use case for the <code>remove_accents</code> function is to standardize text data for searching, indexing, or comparison.  For example, if you have a database of customer names with accents and you want to make it easier to search for names regardless of whether the user includes accents in their query, you can use this function.</p> <p>Scenario:</p> <p>You have a table of customer names in BigQuery, some of which contain accents:</p> <p>| customer_name | |---|---| | Jos\u00e9 P\u00e9rez | | Fran\u00e7ois Dupont | | Anna M\u00fcller |</p> <p>You want to be able to search for \"Jose Perez\" and still find \"Jos\u00e9 P\u00e9rez\".</p> <p>Query:</p> <pre><code>SELECT *\nFROM your_table\nWHERE bigfunctions.your_region.remove_accents(customer_name) = bigfunctions.your_region.remove_accents('Jose Perez');\n</code></pre> <p>(Remember to replace <code>your_region</code> with the appropriate BigQuery region for your data, e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>, etc.)</p> <p>This query will remove accents from both the stored customer names and the search query, allowing you to find matches even if the accents are not typed precisely.</p> <p>Other Use Cases:</p> <ul> <li>Data Cleaning: Removing accents can be a part of a broader data cleaning process to standardize text and remove inconsistencies.</li> <li>Natural Language Processing (NLP):  Accents can sometimes interfere with NLP tasks like text classification or sentiment analysis. Removing them can improve the accuracy of these models.</li> <li>Generating slugs or URL-friendly strings: Accents can be problematic in URLs. Removing them can create cleaner and more readable slugs.</li> <li>Matching data from different sources: If you're combining data from multiple sources that might have different conventions for accents, removing them can help standardize the data and improve matching accuracy.</li> </ul> Need help or Found a bug? Get help using <code>remove_accents</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>remove_accents</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/remove_extra_whitespaces/","title":"remove_extra_whitespaces","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/remove_extra_whitespaces/#remove_extra_whitespaces","title":"remove_extra_whitespaces","text":"<pre><code>remove_extra_whitespaces(str)\n</code></pre>"},{"location":"bigfunctions/remove_extra_whitespaces/#description","title":"Description","text":"<p>Remove unwanted whitespaces (inspired from re_data dbt repo)</p>"},{"location":"bigfunctions/remove_extra_whitespaces/#usage","title":"Usage","text":"Call or Deploy <code>remove_extra_whitespaces</code> ? Call <code>remove_extra_whitespaces</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>remove_extra_whitespaces</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>remove_extra_whitespaces</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>remove_extra_whitespaces</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>remove_extra_whitespaces</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get remove_extra_whitespaces\nbigfun deploy remove_extra_whitespaces\n</code></pre>"},{"location":"bigfunctions/remove_extra_whitespaces/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_extra_whitespaces(Hi   Madison  and Mateusz!\n       How are you doing?)\n</code></pre> <pre><code>select bigfunctions.us.remove_extra_whitespaces(Hi   Madison  and Mateusz!\n       How are you doing?)\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_extra_whitespaces(Hi   Madison  and Mateusz!\n       How are you doing?)\n</code></pre> <pre>\n<code>+--------------------------------------------+\n| cleaned_string                             |\n+--------------------------------------------+\n| Hi Madison and Mateusz! How are you doing? |\n+--------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_extra_whitespaces/#use-cases","title":"Use cases","text":"<p>You have a table of user-submitted comments where some users may have accidentally or intentionally added extra spaces within their text. This can affect analysis and presentation.  You want to normalize the comments by removing extra spaces.</p> <p>Example Table:</p> comment_id comment_text 1 \"  This is   a  comment  .   \" 2 \"Another    comment.\" 3 \"  Yet another       comment.  \" <p>Query using <code>remove_extra_whitespaces</code>:</p> <pre><code>SELECT\n    comment_id,\n    bigfunctions.us.remove_extra_whitespaces(comment_text) AS cleaned_comment_text\nFROM\n    `your_project.your_dataset.your_comments_table`;\n</code></pre> <p>Resulting Table:</p> comment_id cleaned_comment_text 1 \"This is a comment .\" 2 \"Another comment.\" 3 \"Yet another comment.\" <p>By using the <code>remove_extra_whitespaces</code> function, the extra spaces within the comments are removed, leaving only single spaces between words and removing leading/trailing spaces.  This makes the comments cleaner and easier to analyze, search, and present.  For example, if you were doing sentiment analysis or keyword extraction, removing the extra spaces would improve the accuracy of your results.</p> Need help or Found a bug? Get help using <code>remove_extra_whitespaces</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>remove_extra_whitespaces</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/remove_strings/","title":"remove_strings","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/remove_strings/#remove_strings","title":"remove_strings","text":"<pre><code>remove_strings(string, strings_to_remove)\n</code></pre>"},{"location":"bigfunctions/remove_strings/#description","title":"Description","text":"<p>Remove any string of <code>strings_to_remove</code> from <code>string</code></p>"},{"location":"bigfunctions/remove_strings/#usage","title":"Usage","text":"Call or Deploy <code>remove_strings</code> ? Call <code>remove_strings</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>remove_strings</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>remove_strings</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>remove_strings</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>remove_strings</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get remove_strings\nbigfun deploy remove_strings\n</code></pre>"},{"location":"bigfunctions/remove_strings/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_strings(\"I can eat candies\", ['can', 'eat'])\n</code></pre> <pre><code>select bigfunctions.us.remove_strings(\"I can eat candies\", ['can', 'eat'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_strings(\"I can eat candies\", ['can', 'eat'])\n</code></pre> <pre>\n<code>+----------------+\n| cleaned_string |\n+----------------+\n| I  dies        |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_strings/#use-cases","title":"Use cases","text":"<p>Let's say you have a dataset of product descriptions that are cluttered with promotional phrases like \"Free Shipping!\", \"Limited Time Offer!\", or \"New Arrival!\".  You want to clean these descriptions to improve text analysis or create a more uniform presentation.</p> <p>Here's how <code>remove_strings</code> could be used:</p> <pre><code>SELECT product_id, bigfunctions.us.remove_strings(description, ['Free Shipping!', 'Limited Time Offer!', 'New Arrival!']) AS cleaned_description\nFROM product_descriptions;\n</code></pre> <p>This query would process each row in the <code>product_descriptions</code> table.  For each product, the <code>remove_strings</code> function would remove any occurrences of \"Free Shipping!\", \"Limited Time Offer!\", or \"New Arrival!\" from the <code>description</code> field. The result would be stored in a new column called <code>cleaned_description</code>.</p> <p>Another example:  Imagine you have user-generated comments and want to remove common spam words or phrases.</p> <pre><code>SELECT comment_id, bigfunctions.us.remove_strings(comment_text, ['[link removed]', 'click here', 'make money fast']) AS cleaned_comment\nFROM user_comments;\n</code></pre> <p>This would remove instances of  \"[link removed]\", \"click here\", and \"make money fast\" from the <code>comment_text</code>, resulting in a cleaner <code>cleaned_comment</code> field.</p> <p>In essence,  <code>remove_strings</code> is helpful anytime you need to remove a specific set of strings from a larger body of text for cleaning, pre-processing, or standardization purposes.</p> Need help or Found a bug? Get help using <code>remove_strings</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>remove_strings</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/remove_value/","title":"remove_value","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/remove_value/#remove_value","title":"remove_value","text":"<pre><code>remove_value(arr, value)\n</code></pre>"},{"location":"bigfunctions/remove_value/#description","title":"Description","text":"<p>Return an array with all values except <code>value</code>.</p>"},{"location":"bigfunctions/remove_value/#usage","title":"Usage","text":"Call or Deploy <code>remove_value</code> ? Call <code>remove_value</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>remove_value</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>remove_value</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>remove_value</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>remove_value</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get remove_value\nbigfun deploy remove_value\n</code></pre>"},{"location":"bigfunctions/remove_value/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_value([1, 4, 3, 8], 4)\n</code></pre> <pre><code>select bigfunctions.us.remove_value([1, 4, 3, 8], 4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_value([1, 4, 3, 8], 4)\n</code></pre> <pre>\n<code>+-----------+\n| arr       |\n+-----------+\n| [1, 3, 8] |\n+-----------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_value/#use-cases","title":"Use cases","text":"<p>Imagine you have a table of user preferences where each user has a list of favorite colors stored in an array. You want to remove a specific color from a user's preference list.</p> <p>Table Schema:</p> <pre><code>CREATE OR REPLACE TABLE `your_project.your_dataset.user_preferences` (\n  user_id INT64,\n  favorite_colors ARRAY&lt;STRING&gt;\n);\n\nINSERT INTO `your_project.your_dataset.user_preferences` (user_id, favorite_colors) VALUES\n(1, ['red', 'blue', 'green', 'yellow']),\n(2, ['blue', 'green', 'purple']),\n(3, ['red', 'orange', 'yellow']);\n</code></pre> <p>Use Case: Removing 'blue' from user preferences:</p> <pre><code>SELECT\n    user_id,\n    bigfunctions.your_region.remove_value(favorite_colors, 'blue') AS updated_favorite_colors\nFROM\n    `your_project.your_dataset.user_preferences`;\n</code></pre> <p>Result:</p> <pre><code>+---------+-------------------------+\n| user_id | updated_favorite_colors |\n+---------+-------------------------+\n|       1 | ['red', 'green', 'yellow'] |\n|       2 | ['green', 'purple']       |\n|       3 | ['red', 'orange', 'yellow'] |\n+---------+-------------------------+\n</code></pre> <p>This query uses the <code>remove_value</code> function to remove the color 'blue' from each user's <code>favorite_colors</code> array.  Users who didn't have 'blue' in their list remain unaffected.  Replace <code>your_region</code> with the appropriate BigQuery region for your project (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>).</p> <p>Other scenarios where <code>remove_value</code> can be useful:</p> <ul> <li>Product Recommendations: Removing previously purchased items from a recommendation list.</li> <li>Inventory Management: Removing out-of-stock items from a product catalog.</li> <li>Data Cleaning: Removing specific erroneous values from a dataset.</li> <li>Filtering Search Results: Removing unwanted tags or categories from a search query.</li> <li>Access Control: Removing revoked permissions from a user's access list.</li> </ul> <p>In essence, whenever you need to dynamically filter elements from an array based on their value, the <code>remove_value</code> function provides a concise and efficient solution.</p> Need help or Found a bug? Get help using <code>remove_value</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>remove_value</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/remove_words/","title":"remove_words","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/remove_words/#remove_words","title":"remove_words","text":"<pre><code>remove_words(string, words_to_remove)\n</code></pre>"},{"location":"bigfunctions/remove_words/#description","title":"Description","text":"<p>Remove any word of <code>words_to_remove</code> from <code>string</code></p>"},{"location":"bigfunctions/remove_words/#usage","title":"Usage","text":"Call or Deploy <code>remove_words</code> ? Call <code>remove_words</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>remove_words</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>remove_words</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>remove_words</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>remove_words</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get remove_words\nbigfun deploy remove_words\n</code></pre>"},{"location":"bigfunctions/remove_words/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_words(\"I can eat candies\", ['can', 'eat'])\n</code></pre> <pre><code>select bigfunctions.us.remove_words(\"I can eat candies\", ['can', 'eat'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_words(\"I can eat candies\", ['can', 'eat'])\n</code></pre> <pre>\n<code>+----------------+\n| cleaned_string |\n+----------------+\n| I  candies     |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_words/#use-cases","title":"Use cases","text":"<p>A common use case for the <code>remove_words</code> function is cleaning text data by removing stop words or unwanted terms.</p> <p>Example: Product Review Analysis</p> <p>Imagine you have a dataset of product reviews and you want to perform sentiment analysis.  Common words like \"a,\" \"the,\" \"and,\" \"is,\" etc. (stop words) don't contribute much to the sentiment and can even skew the analysis.  You can use <code>remove_words</code> to eliminate them:</p> <pre><code>SELECT bigfunctions.us.remove_words(review_text, ['a', 'the', 'and', 'is', 'this', 'it', 'to', 'in', 'of', 'for', 'on', 'with', 'at', 'by', 'that', 'from']) AS cleaned_review\nFROM `your_project.your_dataset.product_reviews`;\n</code></pre> <p>This query will process each <code>review_text</code> and return a <code>cleaned_review</code> with the specified stop words removed.  This cleaned text can then be used for more accurate sentiment analysis or other text processing tasks.</p> <p>Other Use Cases:</p> <ul> <li>Data Preprocessing for Machine Learning: Removing irrelevant or noisy words from text data before feeding it into a machine learning model can improve performance.</li> <li>Spam Filtering: Identifying and removing common spam words from emails or messages.</li> <li>Content Filtering: Blocking inappropriate or offensive language from user-generated content.</li> <li>Keyword Extraction: Removing common words to identify the most important keywords in a piece of text.</li> <li>Search Optimization: Cleaning search queries by removing unnecessary terms.</li> </ul> <p>By customizing the <code>words_to_remove</code> array, you can tailor the <code>remove_words</code> function to various text cleaning and preprocessing tasks.</p> Need help or Found a bug? Get help using <code>remove_words</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>remove_words</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/render_handlebars_template/","title":"render_handlebars_template","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/render_handlebars_template/#render_handlebars_template","title":"render_handlebars_template","text":"<pre><code>render_handlebars_template(template, context)\n</code></pre>"},{"location":"bigfunctions/render_handlebars_template/#description","title":"Description","text":"<p>Render template with context using handlebars.js templating library</p>"},{"location":"bigfunctions/render_handlebars_template/#usage","title":"Usage","text":"Call or Deploy <code>render_handlebars_template</code> ? Call <code>render_handlebars_template</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>render_handlebars_template</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>render_handlebars_template</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>render_handlebars_template</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>render_handlebars_template</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get render_handlebars_template\nbigfun deploy render_handlebars_template\n</code></pre>"},{"location":"bigfunctions/render_handlebars_template/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.render_handlebars_template(\"Hello {{ user }}\", json '{\"user\": \"James\"}')\n</code></pre> <pre><code>select bigfunctions.us.render_handlebars_template(\"Hello {{ user }}\", json '{\"user\": \"James\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.render_handlebars_template(\"Hello {{ user }}\", json '{\"user\": \"James\"}')\n</code></pre> <pre>\n<code>+------------------+\n| rendered_content |\n+------------------+\n| Hello James      |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/render_handlebars_template/#use-cases","title":"Use cases","text":"<p>Let's say you have a BigQuery table with customer data, including their name and purchase history. You want to generate personalized email greetings for each customer, incorporating details from their purchase history.  The <code>render_handlebars_template</code> function makes this easy.</p> <p>Example Scenario:</p> <p>Your table, <code>customer_data</code>, looks like this:</p> customer_id customer_name last_purchase_date last_purchase_amount 1 Alice 2024-03-15 50.00 2 Bob 2024-03-22 100.00 3 Carol 2024-03-29 25.00 <p>You could use the following query:</p> <pre><code>SELECT\n    customer_id,\n    bigfunctions.us.render_handlebars_template(\n        \"\"\"\n        Hello {{customer_name}},\n\n        Thank you for your recent purchase on {{last_purchase_date}} for ${{last_purchase_amount}}. We appreciate your business!\n        \"\"\",\n        TO_JSON_STRING(STRUCT(customer_name, last_purchase_date, last_purchase_amount))\n    ) AS personalized_email\n  FROM\n    `your-project.your_dataset.customer_data`;\n</code></pre> <p>This query would produce a table with the <code>customer_id</code> and <code>personalized_email</code>:</p> customer_id personalized_email 1 Hello Alice,\\n\\nThank you for your recent purchase on 2024-03-15 for $50.00. We appreciate your business! 2 Hello Bob,\\n\\nThank you for your recent purchase on 2024-03-22 for $100.00. We appreciate your business! 3 Hello Carol,\\n\\nThank you for your recent purchase on 2024-03-29 for $25.00. We appreciate your business! <p>Explanation:</p> <ol> <li> <p>Template: The first argument to <code>render_handlebars_template</code> is the template string. It uses Handlebars syntax (<code>{{variable_name}}</code>) to denote placeholders that will be replaced with actual values.</p> </li> <li> <p>Context: The second argument is a JSON string representing the context. This provides the values for the placeholders in the template.  <code>TO_JSON_STRING(STRUCT(...))</code> is used to convert the desired columns into a JSON object.</p> </li> <li> <p>Result: The function substitutes the values from the context into the template, generating the personalized email greeting for each customer.</p> </li> </ol> <p>Other Use Cases:</p> <ul> <li>Generating dynamic reports:  Create report templates with placeholders for metrics, dates, and other data, then populate them using query results.</li> <li>Creating custom error messages:  Craft more informative error messages by incorporating dynamic context from the data.</li> <li>Formatting data for external APIs:  Prepare data in specific formats required by external services using templating.</li> </ul> <p>This function provides a flexible and powerful way to generate dynamic text within BigQuery, improving tasks involving personalization, reporting, and data formatting.</p> Need help or Found a bug? Get help using <code>render_handlebars_template</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>render_handlebars_template</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/render_template/","title":"render_template","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/render_template/#render_template","title":"render_template","text":"<pre><code>render_template(template, context)\n</code></pre>"},{"location":"bigfunctions/render_template/#description","title":"Description","text":"<p>Render template with context using nunjucks.js templating library</p>"},{"location":"bigfunctions/render_template/#usage","title":"Usage","text":"Call or Deploy <code>render_template</code> ? Call <code>render_template</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>render_template</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>render_template</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>render_template</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>render_template</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get render_template\nbigfun deploy render_template\n</code></pre>"},{"location":"bigfunctions/render_template/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.render_template(\"Hello {{ user }}\", json '{\"user\": \"James\"}')\n</code></pre> <pre><code>select bigfunctions.us.render_template(\"Hello {{ user }}\", json '{\"user\": \"James\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.render_template(\"Hello {{ user }}\", json '{\"user\": \"James\"}')\n</code></pre> <pre>\n<code>+------------------+\n| rendered_content |\n+------------------+\n| Hello James      |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/render_template/#use-cases","title":"Use cases","text":"<p>Let's say you have a BigQuery table with customer data, including their name and purchase history. You want to generate personalized email greetings for each customer using a template.</p> <p>Table Example:</p> customer_id customer_name last_purchase_date 1 Alice 2023-10-26 2 Bob 2023-10-27 3 Charlie 2023-10-28 <p>Template:</p> <pre><code>Hello {{ customer_name }},\n\nThank you for your recent purchase on {{ last_purchase_date }}. We appreciate your business!\n\nSincerely,\n\nThe Team\n</code></pre> <p>BigQuery SQL using <code>render_template</code>:</p> <pre><code>SELECT\n    customer_id,\n    bigfunctions.us.render_template(\n        \"\"\"\n        Hello {{ customer_name }},\n\n        Thank you for your recent purchase on {{ last_purchase_date }}. We appreciate your business!\n\n        Sincerely,\n\n        The Team\n        \"\"\",\n        TO_JSON_STRING(STRUCT(customer_name, last_purchase_date))\n    ) AS personalized_email\n  FROM\n    `your_project.your_dataset.your_customer_table`\n</code></pre> <p>This query will generate a new column <code>personalized_email</code> containing the rendered email greeting for each customer.  The <code>TO_JSON_STRING</code> function converts the <code>STRUCT</code> of <code>customer_name</code> and <code>last_purchase_date</code>  into a JSON string which is then used as the context for the template.</p> <p>Result:</p> customer_id personalized_email 1 Hello Alice,Thank you for your recent purchase on 2023-10-26. We appreciate your business!Sincerely,The Team 2 Hello Bob,Thank you for your recent purchase on 2023-10-27. We appreciate your business!Sincerely,The Team 3 Hello Charlie,Thank you for your recent purchase on 2023-10-28. We appreciate your business!Sincerely,The Team <p>This demonstrates how <code>render_template</code> can be used for dynamic content generation based on data within BigQuery, useful for various applications like personalized emails, custom reports, or dynamic SQL query generation.  You can use more advanced templating features like loops and conditional logic provided by nunjucks.js as well.</p> Need help or Found a bug? Get help using <code>render_template</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>render_template</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/replace_special_characters/","title":"replace_special_characters","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/replace_special_characters/#replace_special_characters","title":"replace_special_characters","text":"<pre><code>replace_special_characters(string, replacement)\n</code></pre>"},{"location":"bigfunctions/replace_special_characters/#description","title":"Description","text":"<p>Replace most common special characters in a <code>string</code> with <code>replacement</code></p>"},{"location":"bigfunctions/replace_special_characters/#usage","title":"Usage","text":"Call or Deploy <code>replace_special_characters</code> ? Call <code>replace_special_characters</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>replace_special_characters</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>replace_special_characters</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>replace_special_characters</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>replace_special_characters</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get replace_special_characters\nbigfun deploy replace_special_characters\n</code></pre>"},{"location":"bigfunctions/replace_special_characters/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.replace_special_characters(\"%\\u2665!Hello!*\\u2665#\", \"\")\n</code></pre> <pre><code>select bigfunctions.us.replace_special_characters(\"%\\u2665!Hello!*\\u2665#\", \"\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.replace_special_characters(\"%\\u2665!Hello!*\\u2665#\", \"\")\n</code></pre> <pre>\n<code>+----------------+\n| cleaned_string |\n+----------------+\n| Hello          |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/replace_special_characters/#use-cases","title":"Use cases","text":"<p>A use case for the <code>replace_special_characters</code> function is cleaning user-generated data before storing or processing it.  Imagine you have a website where users can submit product reviews. These reviews might contain special characters like emoticons, punctuation marks beyond the standard set, or even unintended HTML entities.  These characters can cause problems when:</p> <ul> <li>Storing data in a database:  Some databases may not handle certain special characters correctly, leading to errors or data corruption.</li> <li>Displaying data:  Special characters may not render correctly on different browsers or devices, leading to a poor user experience.</li> <li>Performing text analysis: Special characters can interfere with natural language processing tasks like sentiment analysis or topic modeling.</li> </ul> <p>Using the <code>replace_special_characters</code> function, you could clean the user-submitted reviews before storing them in your database. For example:</p> <pre><code>SELECT bigfunctions.us.replace_special_characters(review_text, ' ') AS cleaned_review\nFROM `your_project.your_dataset.user_reviews`;\n</code></pre> <p>This query would replace all special characters in the <code>review_text</code> column with spaces, resulting in a cleaner version of the review text that is more suitable for storage, display, and analysis.  This helps to ensure data consistency and improve the performance of downstream tasks.</p> <p>Here's another example, focusing on creating URL-friendly strings (slugs):</p> <pre><code>SELECT bigfunctions.us.replace_special_characters('This is a product title with special characters!@#$%^&amp;*()', '-') AS url_slug\n</code></pre> <p>This would output <code>This-is-a-product-title-with-special-characters-------</code>, which, after removing repeating hyphens, could be used as a URL slug.</p> <p>In essence, the <code>replace_special_characters</code> BigQuery function assists in data sanitization and preparation for various uses by removing or replacing characters that could otherwise cause issues.</p> Need help or Found a bug? Get help using <code>replace_special_characters</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>replace_special_characters</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/reverse_geocode/","title":"reverse_geocode","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_geo_data</li> </ul>"},{"location":"bigfunctions/reverse_geocode/#reverse_geocode","title":"reverse_geocode","text":"<pre><code>reverse_geocode(latitude, longitude)\n</code></pre>"},{"location":"bigfunctions/reverse_geocode/#description","title":"Description","text":"<p>Get address details at <code>latitude</code>, <code>longitude</code> using Google Maps</p>"},{"location":"bigfunctions/reverse_geocode/#usage","title":"Usage","text":"Call or Deploy <code>reverse_geocode</code> ? Call <code>reverse_geocode</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>reverse_geocode</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>reverse_geocode</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>reverse_geocode</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>reverse_geocode</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get reverse_geocode\nbigfun deploy reverse_geocode\n</code></pre> <p>Requirements</p> <p><code>reverse_geocode</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>gmaps_api_key</code> Google Maps Api Key doc"},{"location":"bigfunctions/reverse_geocode/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.reverse_geocode(48.86988770000001, 2.3079341)\n</code></pre> <pre><code>select bigfunctions.us.reverse_geocode(48.86988770000001, 2.3079341)\n</code></pre> <pre><code>select bigfunctions.europe_west1.reverse_geocode(48.86988770000001, 2.3079341)\n</code></pre> <pre>\n<code>+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| address_details                                                                                                                                                                                                                                                                                                                                                 |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n    \"address_components\": [...],\n    \"formatted_address\": \"1 Av. des Champs-\u00c9lys\u00e9es, 75008 Paris, France\",\n    \"geometry\": {\n        \"location\": {\n            \"lat\": 48.86988770000001,\n            \"lng\": 2.3079341\n        },\n        ...\n    },\n    \"place_id\": \"ChIJ6499V8Rv5kcR5f9dbz3OeBI\",\n    \"plus_code\": {...},\n    \"types\": [\"street_address\"]\n}\n |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/reverse_geocode/#use-cases","title":"Use cases","text":"<p>A delivery company has a database of orders with latitude and longitude coordinates of delivery locations.  They want to enrich this data with more detailed address information for reporting, analysis, and customer service purposes.</p> <p>They can use the <code>reverse_geocode</code> function to get the full address details for each delivery location.  For example, if they have a delivery location with latitude 48.86988770000001 and longitude 2.3079341, they can use the following query in BigQuery:</p> <pre><code>SELECT order_id, bigfunctions.eu.reverse_geocode(latitude, longitude) AS address_details\nFROM `orders_table`\n</code></pre> <p>This will add a new column <code>address_details</code> to the <code>orders_table</code> containing the full address information for each order, including the formatted address, address components, place ID, and more. This information can then be used to:</p> <ul> <li>Improve reporting: Generate reports on deliveries by city, postal code, or other administrative area.</li> <li>Enhance analysis: Analyze delivery patterns and optimize routes based on address details.</li> <li>Improve customer service: Provide customer service representatives with accurate address information to resolve delivery issues.</li> <li>Data validation: Verify the accuracy of the provided latitude and longitude coordinates.</li> <li>Geocoding database cleanup:  Identify and correct inaccurate or incomplete address information in their database.</li> </ul> <p>Another use case could be for a real estate company that wants to analyze property values based on location details derived from latitude/longitude data.  Or, a ride-sharing service might use this function to provide drivers with more detailed pickup/dropoff location information.</p> Need help or Found a bug? Get help using <code>reverse_geocode</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>reverse_geocode</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/roc_auc/","title":"roc_auc","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>machine_learning</li> </ul>"},{"location":"bigfunctions/roc_auc/#roc_auc","title":"roc_auc","text":"<pre><code>roc_auc(predictions)\n</code></pre>"},{"location":"bigfunctions/roc_auc/#description","title":"Description","text":"<p>Returns the Area Under the Receiver Operating Characteristic Curve (a.k.a. ROC AUC) given a set of predicted scores and ground truth labels using the trapezoidal rule</p>"},{"location":"bigfunctions/roc_auc/#usage","title":"Usage","text":"Call or Deploy <code>roc_auc</code> ? Call <code>roc_auc</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>roc_auc</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>roc_auc</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>roc_auc</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>roc_auc</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get roc_auc\nbigfun deploy roc_auc\n</code></pre>"},{"location":"bigfunctions/roc_auc/#examples","title":"Examples","text":"<p>1. Random classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.roc_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.roc_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.roc_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+---------+\n| roc_auc |\n+---------+\n| 0.5     |\n+---------+\n</code>\n</pre> <p>2. Good classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+---------+\n| roc_auc |\n+---------+\n| 1.0     |\n+---------+\n</code>\n</pre> <p>3. Bad classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &lt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &lt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &lt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+---------+\n| roc_auc |\n+---------+\n| 0.0     |\n+---------+\n</code>\n</pre>"},{"location":"bigfunctions/roc_auc/#use-cases","title":"Use cases","text":"<p>Let's say you're building a machine learning model in BigQuery to predict customer churn for a subscription service. You've trained your model and it outputs a <code>predicted_score</code> between 0 and 1 for each customer, where higher scores indicate a higher probability of churn.  You also have the ground truth labels indicating whether each customer actually churned (<code>true</code>) or not (<code>false</code>).</p> <p>You can use the <code>roc_auc</code> function to evaluate the performance of your churn prediction model. Here's how:</p> <pre><code>SELECT bigfunctions.us.roc_auc(\n    (\n        SELECT\n            ARRAY_AGG(STRUCT(predicted_score, churned))\n        FROM `your_project.your_dataset.your_predictions_table`\n    )\n);\n</code></pre> <ul> <li><code>your_project.your_dataset.your_predictions_table</code>:  This table contains your model's predictions and the actual churn outcomes. It should have at least two columns: <code>predicted_score</code> (FLOAT64) and <code>churned</code> (BOOL).</li> <li><code>ARRAY_AGG(STRUCT(predicted_score, churned))</code>: This gathers all the predictions and labels into an array of structs, which is the required input format for the <code>roc_auc</code> function.</li> <li><code>bigfunctions.us.roc_auc(...)</code>: This calls the <code>roc_auc</code> function in the <code>us</code> region (replace with your appropriate region) with the array of structs.</li> </ul> <p>The query will return a single value representing the ROC AUC. This value will be between 0 and 1.  A higher ROC AUC indicates a better performing model:</p> <ul> <li>ROC AUC = 1: Perfect classifier.</li> <li>ROC AUC = 0.5:  No better than random guessing.</li> <li>ROC AUC = 0:  The classifier is always wrong (predicting positive when it's negative, and vice versa).</li> </ul> <p>By calculating the ROC AUC, you can quantify how well your churn prediction model distinguishes between customers who will churn and those who won't. This allows you to compare different models, tune hyperparameters, and ultimately select the best model for deployment.</p> Need help or Found a bug? Get help using <code>roc_auc</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>roc_auc</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/roc_curve/","title":"roc_curve","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>machine_learning</li> </ul>"},{"location":"bigfunctions/roc_curve/#roc_curve","title":"roc_curve","text":"<pre><code>roc_curve(predictions)\n</code></pre>"},{"location":"bigfunctions/roc_curve/#description","title":"Description","text":"<p>Returns the Receiver Operating Characteristic Curve (a.k.a. ROC Curve) given a set of predicted scores and ground truth labels</p>"},{"location":"bigfunctions/roc_curve/#usage","title":"Usage","text":"Call or Deploy <code>roc_curve</code> ? Call <code>roc_curve</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>roc_curve</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>roc_curve</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>roc_curve</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>roc_curve</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get roc_curve\nbigfun deploy roc_curve\n</code></pre>"},{"location":"bigfunctions/roc_curve/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select * from bigfunctions.eu.roc_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre><code>select * from bigfunctions.us.roc_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre><code>select * from bigfunctions.europe_west1.roc_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre>\n<code>\n+---------------------+--------------------+\n| false_positive_rate | true_positive_rate |\n+---------------------+--------------------+\n|         0.0         |         0.0        |\n|         0.0         |         0.5        |\n|         0.5         |         0.5        |\n|         0.5         |         1.0        |\n|         1.0         |         1.0        |\n+---------------------+--------------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/roc_curve/#use-cases","title":"Use cases","text":"<p>You're evaluating a new machine learning model designed to predict customer churn for a telecommunications company.  You have a dataset with predicted churn probabilities (output of your model) and the actual churn outcomes (true or false) for a set of customers.  You want to assess the performance of your model across different probability thresholds.  The ROC curve is a perfect tool for this.</p> <p>Here's how you would use the <code>roc_curve</code> BigQuery function in this scenario:</p> <pre><code>#standardSQL\nWITH churn_predictions AS (\n    SELECT\n        customer_id,\n        predicted_churn_probability,\n        IF(churned, TRUE, FALSE) AS actual_churned\n    FROM\n        `your_project.your_dataset.customer_churn_data`\n)\n\nSELECT *\nFROM bigfunctions.your_region.roc_curve(\n    ARRAY_AGG(\n        STRUCT(predicted_churn_probability, actual_churned)\n    )\n) AS roc;\n</code></pre> <p>Explanation:</p> <ol> <li> <p><code>churn_predictions</code> CTE: This selects the customer ID, the predicted churn probability from your model, and the actual churn outcome.  The <code>IF</code> statement converts the <code>churned</code> column (presumably an integer or string) into a boolean <code>TRUE</code> or <code>FALSE</code> as required by the <code>roc_curve</code> function.</p> </li> <li> <p><code>ARRAY_AGG</code>: This aggregates the predicted probability and actual churn outcome into an array of structs, which is the expected input format for the <code>roc_curve</code> function.</p> </li> <li> <p><code>bigfunctions.your_region.roc_curve(...)</code>:  This calls the <code>roc_curve</code> function with the array of structs. Remember to replace <code>your_region</code> with the appropriate BigQuery region (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>).</p> </li> <li> <p><code>AS roc</code>: This assigns the output of the function to a table alias <code>roc</code>.</p> </li> </ol> <p>Result and Interpretation:</p> <p>The query will return a table with two columns: <code>false_positive_rate</code> and <code>true_positive_rate</code>.  These represent the coordinates of the ROC curve.  By plotting these points, you can visualize the trade-off between the model's sensitivity (true positive rate) and its specificity (1 - false positive rate) at various threshold settings.  A higher area under the ROC curve (AUC) indicates better model performance.</p> <p>This example demonstrates how <code>roc_curve</code> can be practically used to evaluate the performance of a binary classification model in a real-world business scenario. You could then use this information to choose an appropriate threshold for your model based on the desired balance between correctly identifying churned customers and minimizing false alarms.</p> Need help or Found a bug? Get help using <code>roc_curve</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>roc_curve</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/run_python/","title":"run_python","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/run_python/#run_python","title":"run_python","text":"<pre><code>run_python(python_code, requirements, kwargs)\n</code></pre>"},{"location":"bigfunctions/run_python/#description","title":"Description","text":"<p>Run any <code>python_code</code>.</p> <p>For security reasons (sandboxing):</p> <ul> <li>this function is rather slow (a new python environement is created for each query). You may prefer to create a dedicated python function for your use case. You can suggest a new bigfunction here if you want someone to create your function.</li> <li>your python code won't have access to internet</li> <li>not all python packages can be installed</li> </ul> Param Possible values <code>python_code</code> Arbitrary python code (indented with 4 spaces). <code>requirements</code> requirements as you would pass them to <code>pip install</code> (separated with space). Keep note that for security reasons, not all python packages can be installed <code>kwargs</code> A json dict of variables. These variables will be defined and usable in your python code. How sandboxing is done <p>The provided <code>python_code</code> will run in pyodide: a python distribution which runs in a chrome headless browser.</p> <p>This simplifies the implementation of:</p> <ul> <li>isolation between function calls,</li> <li>installation of python packages,</li> <li>isolation from the internet.</li> </ul> <p>For every function call:</p> <ul> <li>we init a new browser context,</li> <li>download pyodide,</li> <li>install python packages</li> <li>run the code.</li> </ul>"},{"location":"bigfunctions/run_python/#usage","title":"Usage","text":"Call or Deploy <code>run_python</code> ? Call <code>run_python</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>run_python</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>run_python</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>run_python</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>run_python</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get run_python\nbigfun deploy run_python\n</code></pre>"},{"location":"bigfunctions/run_python/#examples","title":"Examples","text":"<p>1. Basic Example</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.run_python(\n      '''\n      return sum(range(10))\n      '''\n      , \n      null\n      , \n      null\n      )\n</code></pre> <pre><code>select bigfunctions.us.run_python(\n      '''\n      return sum(range(10))\n      '''\n      , \n      null\n      , \n      null\n      )\n</code></pre> <pre><code>select bigfunctions.europe_west1.run_python(\n      '''\n      return sum(range(10))\n      '''\n      , \n      null\n      , \n      null\n      )\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| 45     |\n+--------+\n</code>\n</pre> <p>2. Some packages such as <code>pandas</code> can be installed and used.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.run_python(\n      '''\n      import pandas as pd\n      return pd.Series(range(10)).sum()\n      '''\n      , \n      'pandas'\n      , \n      null\n      )\n</code></pre> <pre><code>select bigfunctions.us.run_python(\n      '''\n      import pandas as pd\n      return pd.Series(range(10)).sum()\n      '''\n      , \n      'pandas'\n      , \n      null\n      )\n</code></pre> <pre><code>select bigfunctions.europe_west1.run_python(\n      '''\n      import pandas as pd\n      return pd.Series(range(10)).sum()\n      '''\n      , \n      'pandas'\n      , \n      null\n      )\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| 45     |\n+--------+\n</code>\n</pre> <p>3. Replace <code>word</code> passed as a variable by its stem</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.run_python(\n      '''\n      import snowballstemmer\n      stemmer = snowballstemmer.stemmer('english')\n      stems = stemmer.stemWords(text.split())\n      return ' '.join(stems)\n      '''\n      , \n      'snowballstemmer'\n      , \n      to_json(struct(\n        'care cared and caring' as text\n      ))\n      )\n</code></pre> <pre><code>select bigfunctions.us.run_python(\n      '''\n      import snowballstemmer\n      stemmer = snowballstemmer.stemmer('english')\n      stems = stemmer.stemWords(text.split())\n      return ' '.join(stems)\n      '''\n      , \n      'snowballstemmer'\n      , \n      to_json(struct(\n        'care cared and caring' as text\n      ))\n      )\n</code></pre> <pre><code>select bigfunctions.europe_west1.run_python(\n      '''\n      import snowballstemmer\n      stemmer = snowballstemmer.stemmer('english')\n      stems = stemmer.stemWords(text.split())\n      return ' '.join(stems)\n      '''\n      , \n      'snowballstemmer'\n      , \n      to_json(struct(\n        'care cared and caring' as text\n      ))\n      )\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| go     |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/run_python/#use-cases","title":"Use cases","text":"<p>This <code>run_python</code> function allows you to execute arbitrary Python code within BigQuery.  Here's a breakdown of potential use cases and how it addresses them:</p> <p>1. Text Preprocessing/Natural Language Processing (NLP):</p> <ul> <li>Stemming/Lemmatization:  The provided example demonstrates stemming words using the <code>snowballstemmer</code> library.  This is useful for NLP tasks like text analysis, where you want to reduce words to their root form (e.g., \"running,\" \"runs,\" \"ran\" become \"run\").  Imagine you have a BigQuery table with product reviews.  You could use <code>run_python</code> to stem the review text directly within BigQuery before feeding it into a sentiment analysis model.</li> <li>Regular Expressions:  You can use Python's powerful <code>re</code> module for complex pattern matching and string manipulation in your data.  For instance, extract specific information from text fields, validate data formats, or clean up inconsistent data.</li> <li>Other NLP tasks:  Tokenization, part-of-speech tagging, named entity recognition \u2013 any Python NLP library that can be installed in the sandbox can be leveraged.</li> </ul> <p>2. Data Cleaning and Transformation:</p> <ul> <li>Custom logic: Implement data transformations that are too complex for standard SQL functions.  This could include handling missing values in a specific way, recoding variables based on complex criteria, or applying custom business rules.</li> <li>Date/Time manipulation: Python's <code>datetime</code> module offers more flexibility than standard SQL for working with dates and times. You might use it to parse dates in unusual formats, calculate time differences, or handle time zones.</li> <li>Numerical computations: Perform complex calculations beyond basic arithmetic, such as using the <code>math</code> or <code>NumPy</code> libraries.</li> </ul> <p>3. User-Defined Functions (UDFs) with Python Flexibility:</p> <ul> <li>Code Reusability: While less performant than compiled UDFs, <code>run_python</code> offers a quick way to prototype and deploy UDF-like functionality without the need for separate deployment steps.</li> <li>Complex logic encapsulation: Package up complex logic within the function, making your SQL queries cleaner and easier to understand.</li> </ul> <p>4. Prototyping and Experimentation:</p> <ul> <li>Quick tests: Quickly test Python code snippets against your BigQuery data without leaving the BigQuery environment. This is great for exploratory data analysis or testing different transformations.</li> <li>Library exploration:  Experiment with different Python libraries to see how they might be applied to your data.</li> </ul> <p>Example: Sentiment Analysis Preprocessing</p> <p>Let's say you have a table called <code>product_reviews</code> with a column <code>review_text</code>. You could use <code>run_python</code> to perform basic sentiment preprocessing:</p> <pre><code>SELECT\n    review_id,\n    bigfunctions.us.run_python(\n      '''\n      import re\n      from snowballstemmer import stemmer\n      text = re.sub(r'[^\\w\\s]', '', text).lower()  # Remove punctuation and lowercase\n      stemmer_en = stemmer('english')\n      stemmed_text = ' '.join(stemmer_en.stemWords(text.split()))\n      return stemmed_text\n      ''',\n      're snowballstemmer',\n      TO_JSON(STRUCT(review_text as text))\n    ) AS processed_review_text\n  FROM\n    `your_project.your_dataset.product_reviews`;\n</code></pre> <p>This query removes punctuation, lowercases the text, and stems the words, preparing the <code>review_text</code> for further sentiment analysis.</p> <p>Key Considerations:</p> <ul> <li>Performance:  As noted in the documentation, <code>run_python</code> is relatively slow due to the sandboxed environment.  For production-level, high-performance scenarios, consider using compiled UDFs instead.</li> <li>Security: The sandboxed environment limits network access and available libraries for security reasons.</li> </ul> <p>This function provides a powerful way to bridge the gap between SQL and Python within BigQuery, enabling more complex data manipulation and analysis directly within your data warehouse.  However, be mindful of the performance implications and security constraints.</p> Need help or Found a bug? Get help using <code>run_python</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>run_python</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/send_google_chat_message/","title":"send_google_chat_message","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>notify</li> </ul>"},{"location":"bigfunctions/send_google_chat_message/#send_google_chat_message","title":"send_google_chat_message","text":"<pre><code>send_google_chat_message(message, webhook_url)\n</code></pre>"},{"location":"bigfunctions/send_google_chat_message/#description","title":"Description","text":"<p>Sends <code>message</code> to google chat space using incoming webhook.</p> <p>To get the incoming <code>webhook_url</code>:</p> <ul> <li>In a web browser, open Google Chat.</li> <li>Go to the space to which you want to add a webhook.</li> <li>At the top, next to space title, click Down Arrow arrow_drop_down &gt; Apps &amp; integrations.</li> <li>Click Manage webhooks.</li> <li>If this space already has other webhooks, click Add another. Otherwise, skip this step.</li> <li>For Name, enter \"Quickstart Webhook\".</li> <li>For Avatar URL, enter https://developers.google.com/chat/images/chat-product-icon.png.</li> <li>Click SAVE.</li> <li>To copy the full webhook URL, click Copy.</li> </ul>"},{"location":"bigfunctions/send_google_chat_message/#usage","title":"Usage","text":"Call or Deploy <code>send_google_chat_message</code> ? Call <code>send_google_chat_message</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>send_google_chat_message</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>send_google_chat_message</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>send_google_chat_message</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>send_google_chat_message</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get send_google_chat_message\nbigfun deploy send_google_chat_message\n</code></pre>"},{"location":"bigfunctions/send_google_chat_message/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_google_chat_message(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.us.send_google_chat_message(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_google_chat_message(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------+\n| response                                                                                         |\n+--------------------------------------------------------------------------------------------------+\n| {\n  \"name\": ...,\n  \"sender\": ...,\n  \"createTime\": ...,\n  \"text\": \"Hello \ud83d\udc4b from bigfunctions!\"\n}\n |\n+--------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/send_google_chat_message/#use-cases","title":"Use cases","text":"<p>Here are a few use cases for the <code>send_google_chat_message</code> BigQuery function:</p> <p>1. Data Monitoring and Alerting:</p> <ul> <li>Threshold breaches:  Imagine you have a BigQuery table tracking website traffic. You can schedule a query to check if traffic drops below a certain threshold. If it does, use <code>send_google_chat_message</code> to send an alert to a Google Chat space dedicated to website monitoring.  The message could include details like the current traffic level, the threshold breached, and a timestamp.</li> <li>Data quality issues:  A scheduled query can check for data quality issues, such as null values in critical columns or inconsistencies between tables.  If a problem is detected, the function can send a notification to the data engineering team's Google Chat space.</li> <li>Job completion status: After a long-running BigQuery job finishes (e.g., a large data import or a complex transformation), the function can send a message to the relevant team confirming completion (or failure, along with the error message).</li> </ul> <p>2. Report Automation and Sharing:</p> <ul> <li>Daily summaries: Generate a daily summary of key business metrics from your BigQuery data and send it to a Google Chat space for management review.  The message could be formatted as a table or a short bullet-point list.</li> <li>Weekly performance reports:  Consolidate weekly performance data and send a report to the sales team's Google Chat space, highlighting top performers, areas for improvement, and key trends.</li> <li>Ad-hoc data insights: After running an exploratory query that reveals an interesting insight, use the function to share the finding with colleagues in a Google Chat space, along with a link to the BigQuery query.</li> </ul> <p>3. Workflow Integration:</p> <ul> <li>Triggering downstream actions: When certain conditions are met in your BigQuery data (e.g., a new customer signs up, an order is placed), the function can send a message to a Google Chat space that integrates with other tools. This message could trigger a downstream action in another system, such as updating a CRM or sending a welcome email.</li> <li>Human-in-the-loop processes:  Some data processes might require human intervention.  The function can be used to notify a human operator in a Google Chat space when their input is needed. The operator can then take the necessary action and update the relevant data in BigQuery.</li> </ul> <p>Example (Data Monitoring):</p> <pre><code>#standardSQL\nDECLARE threshold INT64 DEFAULT 1000;\nDECLARE current_traffic INT64;\n\nSET current_traffic = (SELECT COUNT(*) FROM `your-project.your_dataset.website_traffic` WHERE _PARTITIONTIME = CURRENT_DATE());\n\nIF current_traffic &lt; threshold THEN\n  SELECT bigfunctions.us.send_google_chat_message(\n    FORMAT(\"ALERT: Website traffic dropped below %d. Current traffic: %d\", threshold, current_traffic),\n    \"YOUR_WEBHOOK_URL\"\n  );\nEND IF;\n</code></pre> <p>This demonstrates how <code>send_google_chat_message</code> can be integrated into a SQL script to provide real-time alerts based on data in BigQuery.  You can adapt this pattern for various other use cases as needed.  Remember to replace placeholders like <code>\"YOUR_WEBHOOK_URL\"</code>, <code>\"your-project.your_dataset.website_traffic\"</code>, and adjust the logic to suit your specific requirements.  Also ensure you're calling the function from the correct regional dataset (e.g., <code>bigfunctions.us</code>, <code>bigfunctions.eu</code>).</p> Need help or Found a bug? Get help using <code>send_google_chat_message</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>send_google_chat_message</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/send_mail/","title":"send_mail","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>notify</li> </ul>"},{"location":"bigfunctions/send_mail/#send_mail","title":"send_mail","text":"<pre><code>send_mail(to, subject, content, attachment_filename, attachment_content)\n</code></pre>"},{"location":"bigfunctions/send_mail/#description","title":"Description","text":"<p>Sends an email to <code>to</code> email with <code>subject</code>, <code>content</code> and possible attachment (defined by <code>attachment_filename</code> and <code>attachment_content</code>).</p> Param Possible values <code>to</code> One or multiple comma separated emails.For instance <code>contact@unytics.io</code> or <code>contact@unytics.io, paul.marcombes@unytics.io</code> <code>subject</code> Email subject <code>content</code> Can be plain text, html or markdown <code>attachment_filename</code> <code>null</code> or filename with extension such as <code>report.xlsx</code> <code>attachment_content</code> <code>null</code> or can be plain text or base64 encoded content (useful to send excel files, pdf or images) <p>This function uses SendGrid to send the emails and Lee Munroe HTML template for styling emails.</p>"},{"location":"bigfunctions/send_mail/#usage","title":"Usage","text":"Call or Deploy <code>send_mail</code> ? Call <code>send_mail</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>send_mail</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>send_mail</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>send_mail</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>send_mail</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get send_mail\nbigfun deploy send_mail\n</code></pre> <p>Requirements</p> <p><code>send_mail</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>sendgrid_api_key</code> Sendgrid API Key doc"},{"location":"bigfunctions/send_mail/#examples","title":"Examples","text":"<p>1. Send email without file attached</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_mail(\"contact@unytics.io\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", null, null)\n</code></pre> <pre><code>select bigfunctions.us.send_mail(\"contact@unytics.io\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", null, null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_mail(\"contact@unytics.io\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", null, null)\n</code></pre> <pre>\n<code>+---------+\n| success |\n+---------+\n| true    |\n+---------+\n</code>\n</pre> <p>2. Send email with plain text file attached</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_mail(\"contact@unytics.io\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", \"report.csv\", \"col1,col2\\\\nval1,val2\\\\nval3,val4\")\n</code></pre> <pre><code>select bigfunctions.us.send_mail(\"contact@unytics.io\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", \"report.csv\", \"col1,col2\\\\nval1,val2\\\\nval3,val4\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_mail(\"contact@unytics.io\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", \"report.csv\", \"col1,col2\\\\nval1,val2\\\\nval3,val4\")\n</code></pre> <pre>\n<code>+---------+\n| success |\n+---------+\n| true    |\n+---------+\n</code>\n</pre> <p>3. Send email with excel file attached</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_mail(\"contact@unytics.io\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", \"report.xlsx\", \"(select bigfunctions.eu.json2excel(\\u0027[{\\\"col1\\\": \\\"val1\\\", \\\"col2\\\": \\\"val2\\\"}, {\\\"col1\\\": \\\"val3\\\", \\\"col2\\\": \\\"val4\\\"}]\\u0027))\")\n</code></pre> <pre><code>select bigfunctions.us.send_mail(\"contact@unytics.io\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", \"report.xlsx\", \"(select bigfunctions.us.json2excel(\\u0027[{\\\"col1\\\": \\\"val1\\\", \\\"col2\\\": \\\"val2\\\"}, {\\\"col1\\\": \\\"val3\\\", \\\"col2\\\": \\\"val4\\\"}]\\u0027))\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_mail(\"contact@unytics.io\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", \"report.xlsx\", \"(select bigfunctions.europe_west1.json2excel(\\u0027[{\\\"col1\\\": \\\"val1\\\", \\\"col2\\\": \\\"val2\\\"}, {\\\"col1\\\": \\\"val3\\\", \\\"col2\\\": \\\"val4\\\"}]\\u0027))\")\n</code></pre> <pre>\n<code>+---------+\n| success |\n+---------+\n| true    |\n+---------+\n</code>\n</pre>"},{"location":"bigfunctions/send_mail/#use-cases","title":"Use cases","text":"<p>This <code>send_mail</code> function has several practical use cases within BigQuery:</p> <p>1. Data-Driven Alerting:</p> <p>Imagine you have a BigQuery script that monitors website traffic.  You could use <code>send_mail</code> to send an alert if traffic drops below a certain threshold.</p> <pre><code>DECLARE low_traffic_threshold INT64 DEFAULT 1000;\nDECLARE current_traffic INT64;\n\nSET current_traffic = (SELECT COUNT(*) FROM `your_project.your_dataset.website_traffic` WHERE _PARTITIONTIME = CURRENT_DATE());\n\nIF current_traffic &lt; low_traffic_threshold THEN\n  SELECT bigfunctions.us.send_mail(\n    'admin@yourcompany.com',\n    'Low Website Traffic Alert',\n    FORMAT('Website traffic dropped to %d today, below the threshold of %d', current_traffic, low_traffic_threshold),\n    null,\n    null\n  );\nEND IF;\n</code></pre> <p>2. Report Generation and Distribution:</p> <p>You can generate reports within BigQuery and then email them directly using this function. The example in the documentation shows converting JSON to Excel and attaching it. You could adapt this for CSV reports as well:</p> <pre><code>SELECT bigfunctions.us.send_mail(\n    'marketing@yourcompany.com',\n    'Weekly Sales Report',\n    'Please find attached the weekly sales report.',\n    'weekly_sales.csv',\n    (SELECT STRING_AGG(FORMAT('%t,%t', product_name, sales), '\\n') FROM `your_project.your_dataset.sales_data` WHERE _PARTITIONTIME BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) AND CURRENT_DATE())\n);\n</code></pre> <p>3. Scheduled Notifications:</p> <p>Combine <code>send_mail</code> with BigQuery's scheduled queries to automate regular email updates.  For example, send a daily summary of key metrics:</p> <pre><code>-- Scheduled Query Configuration (set in the BigQuery UI)\n-- Destination Table: None\n-- Schedule: Daily at 8:00 AM\n\nSELECT bigfunctions.us.send_mail(\n    'team@yourcompany.com',\n    'Daily Metrics Summary',\n    FORMAT(\"\"\"\n        Total users: %d\n        Total revenue: %f\n        \"\"\",\n        (SELECT COUNT(DISTINCT user_id) FROM `your_project.your_dataset.user_activity` WHERE _PARTITIONTIME = CURRENT_DATE()),\n        (SELECT SUM(revenue) FROM `your_project.your_dataset.transactions` WHERE _PARTITIONTIME = CURRENT_DATE())\n    ),\n    null,\n    null\n);\n</code></pre> <p>4. User-Specific Notifications (within a script):</p> <p>You could iterate through a result set and send customized emails to different recipients based on data in the table. For example, sending personalized product recommendations:</p> <pre><code>DECLARE done BOOLEAN DEFAULT FALSE;\nDECLARE current_user STRUCT&lt;email STRING, recommended_product STRING&gt;;\nDECLARE cur CURSOR FOR\n  SELECT user_email, recommended_product\n  FROM `your_project.your_dataset.product_recommendations`;\n\nBEGIN\n  OPEN cur;\n  LOOP\n    FETCH cur INTO current_user;\n    IF done THEN\n      LEAVE;\n    END IF;\n    SELECT bigfunctions.us.send_mail(\n      current_user.email,\n      'Personalized Product Recommendation',\n      FORMAT('We recommend you check out: %s', current_user.recommended_product),\n      null,\n      null\n    );\n  END LOOP;\n  CLOSE cur;\nEND;\n</code></pre> <p>These are just a few examples. The flexibility of <code>send_mail</code> allows it to be integrated into various data processing workflows within BigQuery, enhancing communication and automation. Remember to choose the correct regional dataset for the <code>bigfunctions</code> project based on your BigQuery data location.</p> Need help or Found a bug? Get help using <code>send_mail</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>send_mail</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/send_mail_with_excel/","title":"send_mail_with_excel","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>notify</li> </ul>"},{"location":"bigfunctions/send_mail_with_excel/#send_mail_with_excel","title":"send_mail_with_excel","text":"<pre><code>send_mail_with_excel(to, subject, content, excel_filename, table_or_view_or_query)\n</code></pre>"},{"location":"bigfunctions/send_mail_with_excel/#description","title":"Description","text":"<p>Sends an email with <code>table_or_view_or_query</code> data attached as excel file (only the first 1000 rows will be copied to the excel file)</p> <p>This function calls <code>json2excel</code> and <code>send_mail</code> functions.</p> Param Possible values <code>to</code> One or multiple comma separated emails.For instance <code>contact@unytics.io</code> or <code>contact@unytics.io, paul.marcombes@unytics.io</code> <code>subject</code> Email subject <code>content</code> Can be plain text, html or markdown <code>attachment_filename</code> filename with extension such as <code>report.xlsx</code> <code>table_or_view_or_query</code> A fully qualified table or view you have permission to read or a sql query starting with <code>select</code>"},{"location":"bigfunctions/send_mail_with_excel/#usage","title":"Usage","text":"Call or Deploy <code>send_mail_with_excel</code> ? Call <code>send_mail_with_excel</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>send_mail_with_excel</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>send_mail_with_excel</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>send_mail_with_excel</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>send_mail_with_excel</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get send_mail_with_excel\nbigfun deploy send_mail_with_excel\n</code></pre>"},{"location":"bigfunctions/send_mail_with_excel/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>call bigfunctions.eu.send_mail_with_excel(\n      'contact@unytics.io', \n      'Financial Report', \n      '''\n      # Monthly Report from BigQuery\n\n      ## KPIs\n\n      - **MRR**: 32,343 USD\n      - **Churn**: 4.2 %\n      - **Subscriptions**: +3452\n      ''', \n      'report.xlsx', \n      'bigfunctions.eu.sales');\n</code></pre> <pre><code>call bigfunctions.us.send_mail_with_excel(\n      'contact@unytics.io', \n      'Financial Report', \n      '''\n      # Monthly Report from BigQuery\n\n      ## KPIs\n\n      - **MRR**: 32,343 USD\n      - **Churn**: 4.2 %\n      - **Subscriptions**: +3452\n      ''', \n      'report.xlsx', \n      'bigfunctions.us.sales');\n</code></pre> <pre><code>call bigfunctions.europe_west1.send_mail_with_excel(\n      'contact@unytics.io', \n      'Financial Report', \n      '''\n      # Monthly Report from BigQuery\n\n      ## KPIs\n\n      - **MRR**: 32,343 USD\n      - **Churn**: 4.2 %\n      - **Subscriptions**: +3452\n      ''', \n      'report.xlsx', \n      'bigfunctions.europe_west1.sales');\n</code></pre>"},{"location":"bigfunctions/send_mail_with_excel/#use-cases","title":"Use cases","text":"<p>A marketing analyst wants to send a weekly performance report to their team.  They have a BigQuery table called <code>marketing.weekly_performance</code> that contains data on ad spend, impressions, clicks, conversions, and other relevant metrics.</p> <p>Use Case:</p> <p>Using the <code>send_mail_with_excel</code> function, the analyst can automate the process of:</p> <ol> <li>Querying the BigQuery table: The <code>table_or_view_or_query</code> parameter can be set to <code>marketing.weekly_performance</code>.</li> <li>Converting the results to an Excel file: The function automatically handles the conversion of the query results into an Excel file named, for example,  <code>weekly_report.xlsx</code>.</li> <li>Emailing the report: The analyst can specify recipients (<code>to</code>), subject line (<code>subject</code>), and email body content (<code>content</code>). The Excel file will be attached to the email.</li> </ol> <p>Example BigQuery SQL:</p> <pre><code>call bigfunctions.&lt;your-region&gt;.send_mail_with_excel(\n    'marketing_team@company.com',\n    'Weekly Marketing Performance Report',\n    '''\n    Hello Team,\n\n    Please find attached the weekly marketing performance report.\n\n    Regards,\n    Marketing Analyst\n    ''',\n    'weekly_report.xlsx',\n    'marketing.weekly_performance'\n);\n</code></pre> <p>Benefits:</p> <ul> <li>Automation: Eliminates the manual steps of querying, exporting to Excel, and emailing.</li> <li>Time-saving: Frees up the analyst's time for more strategic tasks.</li> <li>Consistency: Ensures that the report is delivered on time and in a consistent format.</li> <li>Collaboration: Makes it easy to share the report with the entire marketing team.</li> </ul> <p>Other potential use cases:</p> <ul> <li>Sales reporting: Sending daily or weekly sales figures to the sales team.</li> <li>Financial reporting: Distributing monthly financial statements to stakeholders.</li> <li>Customer support reporting: Sharing weekly customer support metrics with the customer support team.</li> <li>Automated alerts: Triggering an email with relevant data when certain thresholds are met (e.g., a sudden drop in website traffic).  This would likely require integrating the function within a scheduled query or other automated workflow.</li> </ul> Need help or Found a bug? Get help using <code>send_mail_with_excel</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>send_mail_with_excel</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/send_mail_with_gmail/","title":"send_mail_with_gmail","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>notify</li> </ul>"},{"location":"bigfunctions/send_mail_with_gmail/#send_mail_with_gmail","title":"send_mail_with_gmail","text":"<pre><code>send_mail_with_gmail(gmail_email, gmail_app_password, to, subject, content, attachments)\n</code></pre>"},{"location":"bigfunctions/send_mail_with_gmail/#description","title":"Description","text":"<p>Sends an email using your gmail account</p> Param Possible values <code>gmail_email</code> The email for your gmail account <code>gmail_app_password</code> An App Password of your gmail account.  1.Get an App Password. \u26a0\ufe0f 2. Encrypt the password wit the button below before copying it to your queries! <code>to</code> One or multiple comma separated emails.For instance <code>contact@unytics.io</code> or <code>contact@unytics.io, paul.marcombes@unytics.io</code> <code>subject</code> Email subject <code>content</code> Email content <code>attachments</code> json like <code>{filename: content}</code> with <code>content</code> a plain text or base64 encoded bytes (for excel, pdf, image, etc)"},{"location":"bigfunctions/send_mail_with_gmail/#usage","title":"Usage","text":"Call or Deploy <code>send_mail_with_gmail</code> ? Call <code>send_mail_with_gmail</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>send_mail_with_gmail</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>send_mail_with_gmail</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>send_mail_with_gmail</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>send_mail_with_gmail</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get send_mail_with_gmail\nbigfun deploy send_mail_with_gmail\n</code></pre> Keep the secrets safe! <p>Do NOT write secrets in plain text in your SQL queries!</p> <p>Otherwise, anyone with access to your BigQuery logs can read and use them.</p> <p>Instead, generate an encrypted version that you can safely share:</p> <p> Encrypt Secret </p> <ol> <li>Enter a secret value below along with the emails of the users who are authorized to use it (separated by commas).</li> <li>Click on <code>Encrypt Secret</code>.</li> <li>The browser (no server is called) will generate an encrypted version and copy it in the clipboard</li> <li>Paste the encrypted secret into the arguments of your function exactly like if you passed the plain text version.</li> <li>The bigfunction will decrypt it and check that the calling user is authorized.</li> </ol> More on secret encryption <p>Technically, this encryption system uses the same encryption mechanism used to transfer data over the internet. It uses a pair of a public and private keys.</p> <p>The public key (contained in this web page) is used to encrypt a text. The corresponding private key is the only one who is able to decrypt the text. The private key is stored in a secret manager and is only accessible to this function. Thus, this function (and this function only) can decrypt it.</p> <p>Moreover, the function will check that the caller of the function belong to the list of <code>authorized users</code> that you gave at encryption time.</p> <p>Thanks to this:</p> <ul> <li>Nobody but this function will be able to decrypt it.</li> <li>Nobody but <code>authorized users</code> can use the encrypted version in a function.</li> <li>No function but the function <code>send_mail_with_gmail</code> can decrypt it.</li> </ul>"},{"location":"bigfunctions/send_mail_with_gmail/#examples","title":"Examples","text":"<p>1. Send email without file attached</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_mail_with_gmail(\"paul.marcombes@unytics.io\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)\", \"you@example.com\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", null)\n</code></pre> <pre><code>select bigfunctions.us.send_mail_with_gmail(\"paul.marcombes@unytics.io\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)\", \"you@example.com\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_mail_with_gmail(\"paul.marcombes@unytics.io\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)\", \"you@example.com\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", null)\n</code></pre> <pre>\n<code>+---------+\n| success |\n+---------+\n| true    |\n+---------+\n</code>\n</pre> <p>2. Send email with plain text file attached</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_mail_with_gmail(\"paul.marcombes@unytics.io\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)\", \"you@example.com\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", json_object('report.csv', 'col1,col2\\nval1,val2\\nval3,val4'))\n</code></pre> <pre><code>select bigfunctions.us.send_mail_with_gmail(\"paul.marcombes@unytics.io\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)\", \"you@example.com\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", json_object('report.csv', 'col1,col2\\nval1,val2\\nval3,val4'))\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_mail_with_gmail(\"paul.marcombes@unytics.io\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)\", \"you@example.com\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", json_object('report.csv', 'col1,col2\\nval1,val2\\nval3,val4'))\n</code></pre> <pre>\n<code>+---------+\n| success |\n+---------+\n| true    |\n+---------+\n</code>\n</pre> <p>3. Send email with excel file attached</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_mail_with_gmail(\"paul.marcombes@unytics.io\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)\", \"you@example.com\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", json_object(\n        'report.xlsx',\n        (select bigfunctions.eu.json2excel(json '[{\"col1\": \"val1\", \"col2\": \"val2\"}, {\"col1\": \"val3\", \"col2\": \"val4\"}]'))\n      )\n      )\n</code></pre> <pre><code>select bigfunctions.us.send_mail_with_gmail(\"paul.marcombes@unytics.io\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)\", \"you@example.com\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", json_object(\n        'report.xlsx',\n        (select bigfunctions.us.json2excel(json '[{\"col1\": \"val1\", \"col2\": \"val2\"}, {\"col1\": \"val3\", \"col2\": \"val4\"}]'))\n      )\n      )\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_mail_with_gmail(\"paul.marcombes@unytics.io\", \"ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)\", \"you@example.com\", \"I love BigFunctions\", \"Hey Paul, could you deploy more BigFunctions \\ud83d\\ude4f?\", json_object(\n        'report.xlsx',\n        (select bigfunctions.europe_west1.json2excel(json '[{\"col1\": \"val1\", \"col2\": \"val2\"}, {\"col1\": \"val3\", \"col2\": \"val4\"}]'))\n      )\n      )\n</code></pre> <pre>\n<code>+---------+\n| success |\n+---------+\n| true    |\n+---------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>send_mail_with_gmail</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>send_mail_with_gmail</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/send_slack_message/","title":"send_slack_message","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>notify</li> </ul>"},{"location":"bigfunctions/send_slack_message/#send_slack_message","title":"send_slack_message","text":"<pre><code>send_slack_message(message, webhook_url)\n</code></pre>"},{"location":"bigfunctions/send_slack_message/#description","title":"Description","text":"<p>Sends <code>message</code> to a slack channel.</p> <p>To get the <code>webhook_url</code> for a channel, follow this doc from Slack.</p>"},{"location":"bigfunctions/send_slack_message/#usage","title":"Usage","text":"Call or Deploy <code>send_slack_message</code> ? Call <code>send_slack_message</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>send_slack_message</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>send_slack_message</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>send_slack_message</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>send_slack_message</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get send_slack_message\nbigfun deploy send_slack_message\n</code></pre>"},{"location":"bigfunctions/send_slack_message/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_slack_message(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.us.send_slack_message(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_slack_message(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/send_slack_message/#use-cases","title":"Use cases","text":"<p>A use case for the <code>send_slack_message</code> BigQuery function would be to alert a team on Slack when a certain threshold is met in a BigQuery table.</p> <p>For example, imagine you have a table monitoring website traffic, and you want to be notified if the error rate exceeds 5%.  You could schedule a query to run periodically, calculate the error rate, and use the <code>send_slack_message</code> function to send a notification if the threshold is breached:</p> <pre><code>#standardSQL\nCREATE TEMP FUNCTION send_slack_message(message STRING, webhook_url STRING) RETURNS STRING\n  OPTIONS (\n    library=\"gs://bigfunctions-europe-west1/lib/send_slack_message-v0.0.1.js\",\n    endpoint=\"https://europe-west1-bigfunctions.cloudfunctions.net/send_slack_message-v0.0.1\" -- Update to the same region as where your query is run.\n  );\n\n\nSELECT\n    IF(error_rate &gt; 0.05,\n       bigfunctions.europe_west1.send_slack_message(FORMAT(\"Error rate exceeded 5%%! Current rate: %f\", error_rate), \"YOUR_WEBHOOK_URL\"),\n       'OK') AS notification_status\n  FROM (\n    SELECT\n        COUNTIF(status_code &gt;= 400) / COUNT(*) AS error_rate\n      FROM\n        `your-project.your_dataset.website_traffic`\n      WHERE _PARTITIONTIME BETWEEN TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR) AND CURRENT_TIMESTAMP()\n  );\n</code></pre> <p>This query calculates the error rate over the past hour. If the <code>error_rate</code> is greater than 0.05 (5%), it calls <code>send_slack_message</code> with a formatted message including the current error rate and sends it to the specified Slack webhook URL. Otherwise, it returns 'OK'.  You can then schedule this query to run regularly in BigQuery.</p> <p>Other Use Cases:</p> <ul> <li>Data quality monitoring: Alert the data engineering team if a data pipeline fails or produces unexpected results (e.g., null values in a critical column).</li> <li>Report generation notification: Send a message to a Slack channel when a scheduled report generation is complete.</li> <li>Anomaly detection:  Notify relevant stakeholders when unusual patterns are detected in data, such as a sudden spike or drop in sales.</li> <li>Resource usage alerts: Send notifications if BigQuery storage or compute costs exceed a defined budget.</li> </ul> <p>Remember to replace <code>\"YOUR_WEBHOOK_URL\"</code> with the actual webhook URL for your Slack channel and adjust the region of the <code>bigfunctions</code> dataset according to your needs. Also, consider using environment variables or a secrets management solution to securely store your webhook URL.</p> Need help or Found a bug? Get help using <code>send_slack_message</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>send_slack_message</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/send_sms/","title":"send_sms","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>notify</li> </ul>"},{"location":"bigfunctions/send_sms/#send_sms","title":"send_sms","text":"<pre><code>send_sms(message, phone_number)\n</code></pre>"},{"location":"bigfunctions/send_sms/#description","title":"Description","text":"<p>Sends <code>message</code> via SMS to <code>phone_number</code></p>"},{"location":"bigfunctions/send_sms/#usage","title":"Usage","text":"Call or Deploy <code>send_sms</code> ? Call <code>send_sms</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>send_sms</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>send_sms</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>send_sms</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>send_sms</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get send_sms\nbigfun deploy send_sms\n</code></pre> <p>Requirements</p> <p><code>send_sms</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>twilio_credentials</code> Twilio credentials with following format: : doc"},{"location":"bigfunctions/send_sms/#examples","title":"Examples","text":"<p>To a French phone number</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_sms(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"+33xxxxxxxxx\")\n</code></pre> <pre><code>select bigfunctions.us.send_sms(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"+33xxxxxxxxx\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_sms(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"+33xxxxxxxxx\")\n</code></pre> <pre>\n<code>+----------------------------------------------------+\n| response                                           |\n+----------------------------------------------------+\n| {\n  \"body\": \"Hello \ud83d\udc4b from bigfunctions!\",\n  ...\n}\n |\n+----------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/send_sms/#use-cases","title":"Use cases","text":"<p>A use case for the <code>send_sms</code> BigQuery function would be sending SMS notifications based on data changes or thresholds within BigQuery.</p> <p>Scenario: An e-commerce company uses BigQuery to store order data. They want to be notified via SMS when a high-value order is placed.</p> <p>Implementation:</p> <ol> <li> <p>BigQuery Table: The company has a table called <code>orders</code> with columns like <code>order_id</code>, <code>order_total</code>, <code>customer_phone</code>.</p> </li> <li> <p>Scheduled Query: They create a scheduled query that runs every hour, checking for orders exceeding a certain value (e.g., $1000).</p> </li> <li> <p><code>send_sms</code> Integration:  Within the scheduled query, they incorporate the <code>send_sms</code> function. The query would look something like this (using the <code>us</code> region as an example, adjust according to your location):</p> </li> </ol> <pre><code>SELECT\n    bigfunctions.us.send_sms(\n        FORMAT(\"High-value order placed! Order ID: %s, Total: $%f\", order_id, order_total),\n        customer_phone\n    )\n  FROM\n    `your_project.your_dataset.orders`\n  WHERE order_total &gt; 1000\n   AND order_placed_at &gt; TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR)  -- Only check last hour's orders\n</code></pre> <p>How it works:</p> <ul> <li>The scheduled query runs hourly.</li> <li>It filters for new orders placed in the last hour exceeding $1000.</li> <li>For each matching order, it calls the <code>send_sms</code> function.</li> <li>The function sends an SMS message to the <code>customer_phone</code> number with the order details.</li> </ul> <p>Other use cases:</p> <ul> <li>Fraud detection: Send an SMS alert to a security team when unusual activity is detected.</li> <li>Appointment reminders: Send SMS reminders to customers about upcoming appointments.</li> <li>Low stock alerts:  Send an SMS to inventory managers when product stock falls below a threshold.</li> <li>Service outages: Notify relevant personnel via SMS when a service outage is detected.</li> <li>Two-factor authentication: Send a verification code via SMS for user login.</li> </ul> <p>Important considerations:</p> <ul> <li>Cost: Be mindful of the cost of sending SMS messages, especially for high-volume scenarios.</li> <li>Privacy: Ensure you comply with data privacy regulations related to phone numbers and user consent.</li> <li>Error handling:  Implement error handling within your queries to manage situations where sending SMS messages fails (e.g., invalid phone numbers).  The provided documentation doesn't show the full response structure, but you should check for error codes/messages within the returned JSON.</li> <li>Rate limiting:  Be aware of any rate limits imposed by the SMS provider used by the <code>send_sms</code> function.  You might need to implement logic to handle these limits.</li> <li>Phone number format: Ensure phone numbers are in the correct international format (e.g., +1 for US, +44 for UK, etc.).</li> </ul> <p>By combining BigQuery's powerful data processing capabilities with the <code>send_sms</code> function, you can create real-time notification systems directly within your data warehouse.</p> Need help or Found a bug? Get help using <code>send_sms</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>send_sms</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/send_teams_adaptive_card/","title":"send_teams_adaptive_card","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>notify</li> </ul>"},{"location":"bigfunctions/send_teams_adaptive_card/#send_teams_adaptive_card","title":"send_teams_adaptive_card","text":"<pre><code>send_teams_adaptive_card(webhook_url, title, message, image_url, button_text, button_url)\n</code></pre>"},{"location":"bigfunctions/send_teams_adaptive_card/#description","title":"Description","text":"<p>Sends <code>Adaptive Card</code> to a Microsoft Teams channel.</p> <p>To get the <code>webhook_url</code> for a channel, follow this doc from Microsoft.</p>"},{"location":"bigfunctions/send_teams_adaptive_card/#usage","title":"Usage","text":"Call or Deploy <code>send_teams_adaptive_card</code> ? Call <code>send_teams_adaptive_card</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>send_teams_adaptive_card</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>send_teams_adaptive_card</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>send_teams_adaptive_card</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>send_teams_adaptive_card</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get send_teams_adaptive_card\nbigfun deploy send_teams_adaptive_card\n</code></pre>"},{"location":"bigfunctions/send_teams_adaptive_card/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_teams_adaptive_card(\"YOUR_WEBHOOK_URL\", \"BigFunctions\", \"Hello \\ud83d\\udc4b from bigfunctions!\", \"https://adaptivecards.io/content/adaptive-card-50.png\", \"Click me!\", \"https://unytics.io/bigfunctions/\")\n</code></pre> <pre><code>select bigfunctions.us.send_teams_adaptive_card(\"YOUR_WEBHOOK_URL\", \"BigFunctions\", \"Hello \\ud83d\\udc4b from bigfunctions!\", \"https://adaptivecards.io/content/adaptive-card-50.png\", \"Click me!\", \"https://unytics.io/bigfunctions/\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_teams_adaptive_card(\"YOUR_WEBHOOK_URL\", \"BigFunctions\", \"Hello \\ud83d\\udc4b from bigfunctions!\", \"https://adaptivecards.io/content/adaptive-card-50.png\", \"Click me!\", \"https://unytics.io/bigfunctions/\")\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/send_teams_adaptive_card/#use-cases","title":"Use cases","text":"<p>A use case for the <code>send_teams_adaptive_card</code> BigQuery function would be to send notifications to a Microsoft Teams channel upon the completion of a BigQuery job or when specific conditions are met in your data.</p> <p>Scenario 1: BigQuery Job Completion Notification:</p> <p>Imagine you have a long-running BigQuery query that aggregates daily sales data. You want to be notified in your team's channel when the job finishes.  You could create a scheduled query and then add a final step using the <code>send_teams_adaptive_card</code> function.  This step would execute only after the main query completes.</p> <pre><code>-- Your main query to calculate daily sales\nSELECT ...\nFROM ...\n\n-- Send a Teams notification when the query is done\nSELECT bigfunctions.us.send_teams_adaptive_card(\n    \"YOUR_WEBHOOK_URL\",\n    \"Daily Sales Update\", -- title\n    CONCAT(\"Daily sales data aggregation complete!  Total sales: $\", SUM(daily_sales)), -- message\n    \"https://adaptivecards.io/content/adaptive-card-50.png\" -- image_url (optional)\n    \"Click me!\", -- button_text (optional)\n    \"https://www.bigfunctions.com\" -- button_link (optional)\n);\n</code></pre> <p>Scenario 2: Anomaly Detection Alert:</p> <p>Suppose you're monitoring website traffic and want to be alerted if traffic drops below a certain threshold. You can set up a scheduled query to check the traffic data and use <code>send_teams_adaptive_card</code> to send an alert if an anomaly is detected.</p> <pre><code>-- Check for low website traffic\nSELECT\n    CASE\n        WHEN current_traffic &lt; 1000 THEN bigfunctions.us.send_teams_adaptive_card(\n                \"YOUR_WEBHOOK_URL\",\n                \"ALERT\", -- title\n                \"Website traffic is unusually low!\", -- message\n                \"https://cdn-icons-png.freepik.com/512/5735/5735886.png\" -- image_url (optional)\n                \"Check this out!\", -- button_text (optional)\n                \"https://www.bigfunctions.com\" -- button_link (optional)\n            )\n        ELSE CAST(NULL as STRING) -- Do nothing if traffic is normal\n    END\nFROM\n  (SELECT COUNT(*) AS current_traffic FROM `your_project.your_dataset.website_traffic` WHERE timestamp &gt; TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR))\n;\n</code></pre> <p>Scenario 3: Data Validation Notification:</p> <p>You can use this function to notify your team about data quality issues. For example, if a data validation check fails, send a message to Teams.</p> <pre><code>-- Check for invalid records\nSELECT\n  CASE\n    WHEN invalid_records &gt; 0 THEN bigfunctions.us.send_teams_adaptive_card(\n            \"YOUR_WEBHOOK_URL\",\n            \"Data validation failed!\", -- title\n            CONCAT(\"Found \", invalid_records, \" invalid records.\"), -- message\n            null, -- image_url (optional)\n            null, -- button_text (optional)\n            null -- button_link (optional)\n        )\n    ELSE CAST(NULL as STRING)\n  END\nFROM\n  (SELECT COUNT(*) AS invalid_records FROM `your_project.your_dataset.your_table` WHERE some_validation_check IS FALSE);\n</code></pre> <p>These examples illustrate how <code>send_teams_adaptive_card</code> can integrate BigQuery with Microsoft Teams for real-time notifications, allowing for proactive monitoring and faster responses to critical events. Remember to replace <code>\"YOUR_WEBHOOK_URL\"</code> with the actual webhook URL for your Teams channel and select the correct BigFunctions dataset based on your BigQuery region (e.g., <code>bigfunctions.eu</code>, <code>bigfunctions.asia_southeast1</code>).</p> Need help or Found a bug? Get help using <code>send_teams_adaptive_card</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>send_teams_adaptive_card</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/send_teams_message/","title":"send_teams_message","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>notify</li> </ul>"},{"location":"bigfunctions/send_teams_message/#send_teams_message","title":"send_teams_message","text":"<pre><code>send_teams_message(message, webhook_url)\n</code></pre>"},{"location":"bigfunctions/send_teams_message/#description","title":"Description","text":"<p>Sends <code>message</code> to a Microsoft Teams channel.</p> <p>To get the <code>webhook_url</code> for a channel, follow this doc from Microsoft.</p>"},{"location":"bigfunctions/send_teams_message/#usage","title":"Usage","text":"Call or Deploy <code>send_teams_message</code> ? Call <code>send_teams_message</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>send_teams_message</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>send_teams_message</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>send_teams_message</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>send_teams_message</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get send_teams_message\nbigfun deploy send_teams_message\n</code></pre>"},{"location":"bigfunctions/send_teams_message/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_teams_message(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.us.send_teams_message(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_teams_message(\"Hello \\ud83d\\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/send_teams_message/#use-cases","title":"Use cases","text":"<p>A use case for the <code>send_teams_message</code> BigQuery function would be to send notifications to a Microsoft Teams channel upon the completion of a BigQuery job or when specific conditions are met in your data.</p> <p>Scenario 1: BigQuery Job Completion Notification:</p> <p>Imagine you have a long-running BigQuery query that aggregates daily sales data. You want to be notified in your team's channel when the job finishes.  You could create a scheduled query and then add a final step using the <code>send_teams_message</code> function.  This step would execute only after the main query completes.</p> <pre><code>-- Your main query to calculate daily sales\nSELECT ...\nFROM ...\n\n-- Send a Teams notification when the query is done\nSELECT bigfunctions.us.send_teams_message(\n    CONCAT(\"Daily sales data aggregation complete!  Total sales: $\", SUM(daily_sales)),\n    \"YOUR_WEBHOOK_URL\"\n);\n</code></pre> <p>Scenario 2: Anomaly Detection Alert:</p> <p>Suppose you're monitoring website traffic and want to be alerted if traffic drops below a certain threshold. You can set up a scheduled query to check the traffic data and use <code>send_teams_message</code> to send an alert if an anomaly is detected.</p> <pre><code>-- Check for low website traffic\nSELECT\n    CASE\n        WHEN current_traffic &lt; 1000 THEN bigfunctions.us.send_teams_message(\n            \"ALERT: Website traffic is unusually low!\",\n            \"YOUR_WEBHOOK_URL\"\n        )\n        ELSE CAST(NULL as STRING) -- Do nothing if traffic is normal\n    END\nFROM\n  (SELECT COUNT(*) AS current_traffic FROM `your_project.your_dataset.website_traffic` WHERE timestamp &gt; TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR))\n;\n</code></pre> <p>Scenario 3: Data Validation Notification:</p> <p>You can use this function to notify your team about data quality issues. For example, if a data validation check fails, send a message to Teams.</p> <pre><code>-- Check for invalid records\nSELECT\n  CASE\n    WHEN invalid_records &gt; 0 THEN bigfunctions.us.send_teams_message(\n        CONCAT(\"Data validation failed! Found \", invalid_records, \" invalid records.\"),\n        \"YOUR_WEBHOOK_URL\"\n    )\n    ELSE CAST(NULL as STRING)\n  END\nFROM\n  (SELECT COUNT(*) AS invalid_records FROM `your_project.your_dataset.your_table` WHERE some_validation_check IS FALSE);\n</code></pre> <p>These examples illustrate how <code>send_teams_message</code> can integrate BigQuery with Microsoft Teams for real-time notifications, allowing for proactive monitoring and faster responses to critical events. Remember to replace <code>\"YOUR_WEBHOOK_URL\"</code> with the actual webhook URL for your Teams channel and select the correct BigFunctions dataset based on your BigQuery region (e.g., <code>bigfunctions.eu</code>, <code>bigfunctions.asia_southeast1</code>).</p> Need help or Found a bug? Get help using <code>send_teams_message</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>send_teams_message</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/sentiment_score/","title":"sentiment_score","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>machine_learning</li> </ul>"},{"location":"bigfunctions/sentiment_score/#sentiment_score","title":"sentiment_score","text":"<pre><code>sentiment_score(content)\n</code></pre>"},{"location":"bigfunctions/sentiment_score/#description","title":"Description","text":"<p>Compute sentiment score of <code>content</code></p>"},{"location":"bigfunctions/sentiment_score/#usage","title":"Usage","text":"Call or Deploy <code>sentiment_score</code> ? Call <code>sentiment_score</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>sentiment_score</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>sentiment_score</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>sentiment_score</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>sentiment_score</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get sentiment_score\nbigfun deploy sentiment_score\n</code></pre>"},{"location":"bigfunctions/sentiment_score/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.sentiment_score(\"BigFunctions Rocks!\")\n</code></pre> <pre><code>select bigfunctions.us.sentiment_score(\"BigFunctions Rocks!\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.sentiment_score(\"BigFunctions Rocks!\")\n</code></pre> <pre>\n<code>+-----------------+\n| sentiment_score |\n+-----------------+\n| 0.945           |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/sentiment_score/#use-cases","title":"Use cases","text":"<p>A company wants to analyze customer feedback left on their website. They store the feedback text in a BigQuery table called <code>customer_feedback</code>.  They can use the <code>sentiment_score</code> function to determine the sentiment (positive, negative, or neutral) of each feedback entry.</p> <pre><code>SELECT\n    feedback_id,\n    feedback_text,\n    bigfunctions.us.sentiment_score(feedback_text) AS sentiment_score\n  FROM\n    `your-project.your_dataset.customer_feedback`\n</code></pre> <p>This query adds a new column called <code>sentiment_score</code> to the table. This score will be a numerical value indicating the sentiment.  A higher score indicates more positive sentiment, while a lower score indicates more negative sentiment.  They can then use this score to:</p> <ul> <li>Identify trends: Track changes in overall customer sentiment over time.</li> <li>Categorize feedback: Group feedback into positive, negative, and neutral categories for easier analysis.</li> <li>Prioritize responses: Address negative feedback first to mitigate customer dissatisfaction.</li> <li>Measure campaign effectiveness:  Analyze sentiment before and after a marketing campaign to gauge its impact.</li> <li>Improve products/services: Identify areas where customers express negative sentiment and use that information to make improvements.</li> </ul> <p>By applying this function to their existing feedback data, the company can gain valuable insights into customer opinions and make data-driven decisions to improve their business.</p> Need help or Found a bug? Get help using <code>sentiment_score</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>sentiment_score</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/sleep/","title":"sleep","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/sleep/#sleep","title":"sleep","text":"<pre><code>sleep(seconds)\n</code></pre>"},{"location":"bigfunctions/sleep/#description","title":"Description","text":"<p>Sleep during <code>seconds</code> seconds</p>"},{"location":"bigfunctions/sleep/#usage","title":"Usage","text":"Call or Deploy <code>sleep</code> ? Call <code>sleep</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>sleep</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>sleep</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>sleep</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>sleep</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get sleep\nbigfun deploy sleep\n</code></pre>"},{"location":"bigfunctions/sleep/#examples","title":"Examples","text":"<p>Wait for 10 seconds</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.sleep(10)\n</code></pre> <pre><code>select bigfunctions.us.sleep(10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.sleep(10)\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/sleep/#use-cases","title":"Use cases","text":"<p>The <code>sleep</code> function in BigQuery can be useful in a few scenarios, primarily related to testing and managing dependencies within scripts or workflows:</p> <ol> <li> <p>Testing BigQuery function performance: You can use <code>sleep</code> to introduce controlled delays and measure the execution time of other BigQuery functions or queries.  This allows you to benchmark performance and identify bottlenecks.</p> </li> <li> <p>Simulating latency: In testing scenarios, you might want to simulate real-world conditions where there are delays in data processing or availability.  <code>sleep</code> can help mimic these latencies.</p> </li> <li> <p>Managing dependencies in scripts: If you have a BigQuery script where one part needs to complete before another begins, you can use <code>sleep</code> to ensure a certain time has passed before the dependent part executes.  However, this is generally not the ideal way to handle dependencies within a BigQuery script.  BigQuery scripting features like <code>WAIT</code> clauses for <code>MERGE</code> statements or explicitly checking for job completion status offer more robust solutions.  <code>sleep</code> would be a less reliable approach as execution times can vary.</p> </li> <li> <p>Rate limiting: If you're interacting with an external API or service via BigQuery and need to adhere to rate limits, <code>sleep</code> can be used to pause execution for a specified duration between calls.  However, dedicated rate limiting libraries or built-in functionality within the API or service itself would be preferable for more precise control.</p> </li> <li> <p>Troubleshooting and debugging: In some cases, introducing a delay with <code>sleep</code> can be helpful for debugging timing-related issues or examining intermediate states within a complex BigQuery script.</p> </li> </ol> <p>Example (Testing performance):</p> <pre><code>-- Measure the time taken to execute a complex query\nSELECT bigfunctions.eu.sleep(5); -- Introduce a delay to clear the cache (less reliable, better alternatives exist)\n\nDECLARE start_time TIMESTAMP;\nSET start_time = CURRENT_TIMESTAMP();\n\n-- Your complex query here\nSELECT * FROM large_table WHERE some_condition;\n\nDECLARE end_time TIMESTAMP;\nSET end_time = CURRENT_TIMESTAMP();\n\nSELECT TIMESTAMP_DIFF(end_time, start_time, SECOND) AS execution_time;\n</code></pre> <p>Caveats:  While <code>sleep</code> can be useful in limited cases, relying heavily on it within production BigQuery scripts is generally discouraged.  For dependency management, error handling, and performance optimization, using BigQuery's built-in features and best practices is more appropriate.  Using <code>sleep</code> for rate limiting is also suboptimal; dedicated rate-limiting mechanisms are more robust.  It's primarily useful for simple testing and debugging scenarios.</p> Need help or Found a bug? Get help using <code>sleep</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>sleep</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/sort_values/","title":"sort_values","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/sort_values/#sort_values","title":"sort_values","text":"<pre><code>sort_values(arr)\n</code></pre>"},{"location":"bigfunctions/sort_values/#description","title":"Description","text":"<p>Return sorted array (ascending)</p>"},{"location":"bigfunctions/sort_values/#usage","title":"Usage","text":"Call or Deploy <code>sort_values</code> ? Call <code>sort_values</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>sort_values</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>sort_values</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>sort_values</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>sort_values</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get sort_values\nbigfun deploy sort_values\n</code></pre>"},{"location":"bigfunctions/sort_values/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.sort_values([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.sort_values([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.sort_values([1, 4, 3])\n</code></pre> <pre>\n<code>+--------------+\n| sorted_array |\n+--------------+\n| [1, 3, 4]    |\n+--------------+\n</code>\n</pre>"},{"location":"bigfunctions/sort_values/#use-cases","title":"Use cases","text":"<p>A use case for the <code>sort_values</code> function is preparing data for aggregation or other operations where the order of elements within an array matters.</p> <p>Scenario: You have a table storing the daily sales for different products, and you want to find the median sales value for each product over a week.</p> <p>Table:</p> product_id daily_sales 1 [10, 12, 8, 15, 11, 9, 13] 2 [5, 7, 6, 8, 4, 9, 10] 3 [20, 18, 22, 19, 21, 17, 23] <p>Query:</p> <pre><code>SELECT\n    product_id,\n    (\n        SELECT\n            CAST(daily_sales[OFFSET(CAST(ARRAY_LENGTH(daily_sales) / 2 AS INT64))] AS BIGNUMERIC)\n        FROM\n            UNNEST([bigfunctions.YOUR_REGION.sort_values(daily_sales)]) AS daily_sales\n    ) AS median_sales\n  FROM\n    `your_project.your_dataset.your_table`\n</code></pre> <p>Explanation:</p> <ol> <li><code>bigfunctions.YOUR_REGION.sort_values(daily_sales)</code>: This sorts the <code>daily_sales</code> array in ascending order for each product.  Replace <code>YOUR_REGION</code> with your BigQuery region (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>).</li> <li><code>UNNEST(...) AS daily_sales</code>: This unnests the sorted array, creating a separate row for each daily sales value. However, since we're putting it inside a subquery and immediately re-aggregating it, we're using UNNEST here as a trick to access elements of the now-sorted array by index.</li> <li><code>ARRAY_LENGTH(daily_sales) / 2</code>: This calculates the middle index of the sorted array.</li> <li><code>daily_sales[OFFSET(CAST(... AS INT64))]</code>: This retrieves the element at the calculated middle index, effectively giving you the median value. We cast to INT64 because ARRAY_LENGTH returns an INT64 and OFFSET requires an INT64.</li> <li><code>CAST(... AS BIGNUMERIC)</code>:  This is just to handle potential overflow if your sales numbers are very large.  Adjust the data type as needed for your data.</li> </ol> <p>By sorting the array first, you can easily find the median value using the array's middle index.  This wouldn't be reliable with the unsorted data.  Similar logic could be used to calculate other quantiles or perform operations sensitive to the order of elements within the array.</p> Need help or Found a bug? Get help using <code>sort_values</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>sort_values</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/sort_values_desc/","title":"sort_values_desc","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/sort_values_desc/#sort_values_desc","title":"sort_values_desc","text":"<pre><code>sort_values_desc(arr)\n</code></pre>"},{"location":"bigfunctions/sort_values_desc/#description","title":"Description","text":"<p>Return sorted array (descending)</p>"},{"location":"bigfunctions/sort_values_desc/#usage","title":"Usage","text":"Call or Deploy <code>sort_values_desc</code> ? Call <code>sort_values_desc</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>sort_values_desc</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>sort_values_desc</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>sort_values_desc</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>sort_values_desc</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get sort_values_desc\nbigfun deploy sort_values_desc\n</code></pre>"},{"location":"bigfunctions/sort_values_desc/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.sort_values_desc([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.sort_values_desc([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.sort_values_desc([1, 4, 3])\n</code></pre> <pre>\n<code>+--------------+\n| sorted_array |\n+--------------+\n| [4, 3, 1]    |\n+--------------+\n</code>\n</pre>"},{"location":"bigfunctions/sort_values_desc/#use-cases","title":"Use cases","text":"<p>You have a table of product sales with columns like <code>product_id</code> and <code>sales_amount</code>.  You want to find the top 3 products by sales in descending order. You can use <code>sort_values_desc</code> within an aggregation to achieve this:</p> <pre><code>SELECT product_id\nFROM `your_project.your_dataset.your_sales_table`\nGROUP BY product_id\nORDER BY bigfunctions.YOUR_REGION.sort_values_desc(ARRAY_AGG(sales_amount)) DESC\nLIMIT 3\n</code></pre> <p>Explanation:</p> <ol> <li><code>ARRAY_AGG(sales_amount)</code>:  For each <code>product_id</code>, this gathers all the <code>sales_amount</code> values into an array.</li> <li><code>sort_values_desc(...)</code>: This sorts the array of sales amounts in descending order.  The highest sales amount will now be the first element in each array.</li> <li><code>ORDER BY ... DESC</code>: This orders the <code>product_id</code> groups based on the sorted sales amount arrays in descending order. Since the largest sales amount is the first element of each array after sorting, ordering by the array itself (descending) effectively orders by the highest sales amount.</li> <li><code>LIMIT 3</code>: This returns only the top 3 <code>product_id</code>s based on the ordering.</li> </ol> <p>Another Use Case (Data Cleaning):</p> <p>Imagine you have a table with a column containing lists of dates (perhaps representing important events related to a customer). These date lists might be in any order. You want to consistently store these dates in descending chronological order.  You could use <code>sort_values_desc</code>:</p> <pre><code>SELECT\n    customer_id,\n    bigfunctions.YOUR_REGION.sort_values_desc(dates_array) AS sorted_dates\nFROM\n    `your_project.your_dataset.your_customer_table`\n</code></pre> <p>This would update or create a new column <code>sorted_dates</code> with the dates arranged from most recent to oldest.</p> <p>Remember to replace <code>YOUR_REGION</code> with the appropriate BigQuery region (e.g., <code>us</code>, <code>eu</code>, <code>asia-northeast1</code>, etc.) that corresponds to your dataset's location.</p> Need help or Found a bug? Get help using <code>sort_values_desc</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>sort_values_desc</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/sql_to_flatten_json_column/","title":"sql_to_flatten_json_column","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/sql_to_flatten_json_column/#sql_to_flatten_json_column","title":"sql_to_flatten_json_column","text":"<pre><code>sql_to_flatten_json_column(data, fully_qualified_column)\n</code></pre>"},{"location":"bigfunctions/sql_to_flatten_json_column/#description","title":"Description","text":"<p>Generate the SQL to flatten a json <code>column</code> into multiple flat columns.</p>"},{"location":"bigfunctions/sql_to_flatten_json_column/#usage","title":"Usage","text":"Call or Deploy <code>sql_to_flatten_json_column</code> ? Call <code>sql_to_flatten_json_column</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>sql_to_flatten_json_column</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>sql_to_flatten_json_column</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>sql_to_flatten_json_column</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>sql_to_flatten_json_column</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get sql_to_flatten_json_column\nbigfun deploy sql_to_flatten_json_column\n</code></pre>"},{"location":"bigfunctions/sql_to_flatten_json_column/#examples","title":"Examples","text":"<p>1. Example with a temp table. Copy the code in your BigQuery console &amp; run it!</p> EUUSeurope-west1 <pre><code>create temp table sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n      union all\n      select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n);\n\nselect bigfunctions.eu.sql_to_flatten_json_column(data, sample_data.data)\nfrom sample_data\n</code></pre> <pre><code>create temp table sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n      union all\n      select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n);\n\nselect bigfunctions.us.sql_to_flatten_json_column(data, sample_data.data)\nfrom sample_data\n</code></pre> <pre><code>create temp table sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n      union all\n      select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n);\n\nselect bigfunctions.europe_west1.sql_to_flatten_json_column(data, sample_data.data)\nfrom sample_data\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| sql                                                                                                                                                                                                                                       |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| select\n    *,\n    cast(json_value(`data`, '$.created_at') as date) as created_at,\n    json_extract(`data`, '$.user.friends') as user__friends,\n    cast(json_value(`data`, '$.user.name') as string) as user__name,\n  from `sample_data`\n |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>2. Get SQL to flatten column <code>data</code> of your table <code>project.dataset.table</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.sql_to_flatten_json_column(data, project.dataset.table.data)\n</code></pre> <pre><code>select bigfunctions.us.sql_to_flatten_json_column(data, project.dataset.table.data)\n</code></pre> <pre><code>select bigfunctions.europe_west1.sql_to_flatten_json_column(data, project.dataset.table.data)\n</code></pre> <pre>\n<code>+-------------------------------------------------------+\n| sql                                                   |\n+-------------------------------------------------------+\n| select\n    *,\n    ...\n  from `project.dataset.table`\n |\n+-------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/sql_to_flatten_json_column/#use-cases","title":"Use cases","text":"<p>You have a BigQuery table containing a JSON column called <code>data</code>, and you want to analyze specific fields within these JSON objects.  Instead of repeatedly using <code>JSON_EXTRACT</code> or <code>JSON_VALUE</code> in your queries, you can use <code>sql_to_flatten_json_column</code> to generate a SQL query that extracts all the JSON fields into separate columns.  This makes subsequent analysis easier and potentially more performant.</p> <p>Use Case Example:</p> <p>Let's say you have a table called <code>website_events</code> with a JSON column named <code>event_details</code>:</p> <pre><code>Table: website_events\nColumns: event_id (INT64), event_timestamp (TIMESTAMP), event_details (STRING)\n\nSample Data:\n1, 2024-10-26 10:00:00, '{\"eventType\": \"pageview\", \"pageUrl\": \"/home\", \"userId\": \"123\"}'\n2, 2024-10-26 10:01:00, '{\"eventType\": \"click\", \"elementId\": \"button1\", \"userId\": \"456\"}'\n</code></pre> <p>You want to analyze the <code>eventType</code>, <code>pageUrl</code> (when available), and <code>userId</code> for all events.</p> <p>Steps:</p> <ol> <li>Generate the flattening SQL:</li> </ol> <p>In the BigQuery console, run the following query, replacing <code>&lt;your-project-id&gt;.&lt;your-dataset&gt;.website_events</code> with the fully qualified table name and choosing the appropriate BigFunctions dataset for your region (e.g., <code>bigfunctions.us</code> for US, <code>bigfunctions.eu</code> for EU, etc.):</p> <pre><code>SELECT bigfunctions.&lt;your-region&gt;.sql_to_flatten_json_column(event_details, '&lt;your-project-id&gt;.&lt;your-dataset&gt;.website_events.event_details');\n</code></pre> <ol> <li>Execute the generated SQL:  The output of the above query will be a new SQL query that flattens the JSON.  It will look something like this:</li> </ol> <pre><code>SELECT\n    *,\n    CAST(JSON_VALUE(`event_details`, '$.eventType') AS STRING) AS eventType,\n    JSON_VALUE(`event_details`, '$.pageUrl') AS pageUrl,\n    CAST(JSON_VALUE(`event_details`, '$.userId') AS STRING) AS userId\nFROM\n    `&lt;your-project-id&gt;.&lt;your-dataset&gt;.website_events`\n</code></pre> <ol> <li>Copy and run the generated SQL: This final query will give you a table with individual columns for  <code>eventType</code>, <code>pageUrl</code>, and <code>userId</code>.</li> </ol> <p>Benefits:</p> <ul> <li>Simplified Queries: Instead of constantly extracting JSON fields in every query, you have dedicated columns, making your queries cleaner and easier to read.</li> <li>Potential Performance Improvement: BigQuery can sometimes optimize queries against flattened data better than queries with repeated JSON extractions.</li> <li>Data Exploration:  Flattening the JSON makes it easier to explore the data in the BigQuery UI and identify all the fields present in the JSON data.</li> </ul> <p>This approach is especially useful when you need to analyze the JSON data repeatedly or when the JSON structure is complex and contains numerous nested fields.</p> Need help or Found a bug? Get help using <code>sql_to_flatten_json_column</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>sql_to_flatten_json_column</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/sum_values/","title":"sum_values","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/sum_values/#sum_values","title":"sum_values","text":"<pre><code>sum_values(arr)\n</code></pre>"},{"location":"bigfunctions/sum_values/#description","title":"Description","text":"<p>Return the sum of array values</p>"},{"location":"bigfunctions/sum_values/#usage","title":"Usage","text":"Call or Deploy <code>sum_values</code> ? Call <code>sum_values</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>sum_values</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>sum_values</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>sum_values</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>sum_values</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get sum_values\nbigfun deploy sum_values\n</code></pre>"},{"location":"bigfunctions/sum_values/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.sum_values([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.sum_values([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.sum_values([1, 4, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 8     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/sum_values/#use-cases","title":"Use cases","text":"<p>You have a table of customer orders, and each order contains an array of item prices. You want to calculate the total value of each order.</p> <p>Table Schema (Example):</p> <pre><code>CREATE OR REPLACE TABLE `your_project.your_dataset.orders` AS (\n  SELECT 1 AS order_id, [10.50, 25.00, 5.99] AS item_prices UNION ALL\n  SELECT 2 AS order_id, [150.00, 12.75] AS item_prices UNION ALL\n  SELECT 3 AS order_id, [5.00, 5.00, 5.00, 5.00] AS item_prices\n);\n</code></pre> <p>Query using <code>sum_values</code>:</p> <pre><code>SELECT\n    order_id,\n    bigfunctions.us.sum_values(item_prices) AS total_order_value  -- Replace 'us' with your region\n  FROM\n    `your_project.your_dataset.orders`;\n</code></pre> <p>Result:</p> <pre><code>+---------+-----------------+\n| order_id | total_order_value |\n+---------+-----------------+\n|       1 |            41.49 |\n|       2 |           162.75 |\n|       3 |            20.00 |\n+---------+-----------------+\n</code></pre> <p>This use case demonstrates how <code>sum_values</code> simplifies the process of summing elements within an array, eliminating the need for more complex SQL involving unnest and aggregate functions.  It's a very practical application for e-commerce, inventory management, and other scenarios where you need to work with arrays of numeric values.</p> Need help or Found a bug? Get help using <code>sum_values</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>sum_values</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/timestamp_from_unix_date_time/","title":"timestamp_from_unix_date_time","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/timestamp_from_unix_date_time/#timestamp_from_unix_date_time","title":"timestamp_from_unix_date_time","text":"<pre><code>timestamp_from_unix_date_time(unix_date_time, date_time_part)\n</code></pre>"},{"location":"bigfunctions/timestamp_from_unix_date_time/#description","title":"Description","text":"<p>Interprets <code>unix_date_time</code> as the number of <code>date_time_part</code> since <code>1970-01-01 00:00:00 UTC</code>. Truncates higher levels of precision by rounding down to the beginning of the <code>date_time_part</code>.</p> Param Possible values <code>date_time_part</code> <code>MICROSECOND</code>, <code>MILLISECOND</code>, <code>SECOND</code>, <code>MINUTE</code>, <code>HOUR</code>, <code>DAY</code>, <code>WEEK</code>, <code>WEEK(MONDAY)</code>, <code>WEEK(TUESDAY)</code>, <code>WEEK(WEDNESDAY)</code>, <code>WEEK(THURSDAY)</code>, <code>WEEK(FRIDAY)</code>, <code>WEEK(SATURDAY)</code>, <code>WEEK(SUNDAY)</code>, <code>MONTH</code>, <code>QUARTER</code>, <code>YEAR</code>"},{"location":"bigfunctions/timestamp_from_unix_date_time/#usage","title":"Usage","text":"Call or Deploy <code>timestamp_from_unix_date_time</code> ? Call <code>timestamp_from_unix_date_time</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>timestamp_from_unix_date_time</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>timestamp_from_unix_date_time</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>timestamp_from_unix_date_time</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>timestamp_from_unix_date_time</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get timestamp_from_unix_date_time\nbigfun deploy timestamp_from_unix_date_time\n</code></pre>"},{"location":"bigfunctions/timestamp_from_unix_date_time/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.timestamp_from_unix_date_time(31, \"YEAR\")\n</code></pre> <pre><code>select bigfunctions.us.timestamp_from_unix_date_time(31, \"YEAR\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.timestamp_from_unix_date_time(31, \"YEAR\")\n</code></pre> <pre>\n<code>+-------------------------+\n| from_unix               |\n+-------------------------+\n| 2001-01-01 00:00:00 UTC |\n+-------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/timestamp_from_unix_date_time/#use-cases","title":"Use cases","text":"<p>You have a table storing Unix timestamps (integers representing seconds since 1970-01-01 00:00:00 UTC). You want to convert these timestamps into BigQuery TIMESTAMP format, but at different levels of granularity.  Here are a few use cases:</p> <ul> <li>Analyzing data by year: You have event data with Unix timestamps and you want to analyze trends year by year.  You can use <code>timestamp_from_unix_date_time(unix_timestamp, 'YEAR')</code> to truncate the timestamps to the beginning of each year, then group your data by this truncated timestamp.</li> </ul> <pre><code>SELECT\n  bigfunctions.us.timestamp_from_unix_date_time(event_timestamp, 'YEAR') AS event_year,\n  COUNT(*) AS event_count\nFROM\n  `your_project.your_dataset.your_table`\nGROUP BY\n  event_year\nORDER BY\n  event_year;\n</code></pre> <ul> <li>Generating reports by month:  You want to create monthly reports based on user activity. You have user activity timestamps stored as Unix timestamps. Use <code>timestamp_from_unix_date_time(unix_timestamp, 'MONTH')</code>  to get the beginning of the month for each activity, and then aggregate data accordingly.</li> </ul> <pre><code>SELECT\n  bigfunctions.us.timestamp_from_unix_date_time(activity_timestamp, 'MONTH') AS activity_month,\n  COUNT(DISTINCT user_id) AS active_users\nFROM\n  `your_project.your_dataset.user_activity`\nGROUP BY\n  activity_month\nORDER BY\n  activity_month;\n</code></pre> <ul> <li>Data bucketing/aggregation: You want to group events into hourly buckets. You can use <code>timestamp_from_unix_date_time(unix_timestamp, 'HOUR')</code> to truncate timestamps to the beginning of each hour, enabling easy grouping and aggregation.</li> </ul> <pre><code>SELECT\n  bigfunctions.us.timestamp_from_unix_date_time(event_timestamp, 'HOUR') AS event_hour,\n  SUM(event_value) AS total_value\nFROM\n  `your_project.your_dataset.events`\nGROUP BY\n  event_hour\nORDER BY\n  event_hour;\n</code></pre> <ul> <li>Simplifying date comparisons:  Sometimes, you only care about the date part of a timestamp.  Using <code>timestamp_from_unix_date_time(unix_timestamp, 'DAY')</code> effectively converts the Unix timestamp to a date, allowing for straightforward date comparisons without dealing with the time component.</li> </ul> <pre><code>SELECT *\nFROM `your_project.your_dataset.events`\nWHERE bigfunctions.us.timestamp_from_unix_date_time(event_timestamp, 'DAY') = '2024-03-15';\n</code></pre> <p>These examples demonstrate the flexibility of the function to handle different levels of time granularity based on the <code>date_time_part</code> argument, enabling a variety of time-based analysis and reporting tasks. Remember to replace  <code>your_project.your_dataset.your_table</code> with your actual table information and the correct regional dataset for <code>bigfunctions</code>.</p> Need help or Found a bug? Get help using <code>timestamp_from_unix_date_time</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>timestamp_from_unix_date_time</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/timestamp_to_unix_date_time/","title":"timestamp_to_unix_date_time","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/timestamp_to_unix_date_time/#timestamp_to_unix_date_time","title":"timestamp_to_unix_date_time","text":"<pre><code>timestamp_to_unix_date_time(timestamp_expression, date_time_part)\n</code></pre>"},{"location":"bigfunctions/timestamp_to_unix_date_time/#description","title":"Description","text":"<p>Returns the number of <code>date_time_part</code> since <code>1970-01-01 00:00:00 UTC</code>. Truncates higher levels of precision by rounding down to the beginning of the <code>date_time_part</code>.</p> Param Possible values <code>date_time_part</code> <code>MICROSECOND</code>, <code>MILLISECOND</code>, <code>SECOND</code>, <code>MINUTE</code>, <code>HOUR</code>, <code>DAY</code>, <code>WEEK</code>, <code>WEEK(MONDAY)</code>, <code>WEEK(TUESDAY)</code>, <code>WEEK(WEDNESDAY)</code>, <code>WEEK(THURSDAY)</code>, <code>WEEK(FRIDAY)</code>, <code>WEEK(SATURDAY)</code>, <code>WEEK(SUNDAY)</code>, <code>MONTH</code>, <code>QUARTER</code>, <code>YEAR</code>"},{"location":"bigfunctions/timestamp_to_unix_date_time/#usage","title":"Usage","text":"Call or Deploy <code>timestamp_to_unix_date_time</code> ? Call <code>timestamp_to_unix_date_time</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>timestamp_to_unix_date_time</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>timestamp_to_unix_date_time</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>timestamp_to_unix_date_time</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>timestamp_to_unix_date_time</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get timestamp_to_unix_date_time\nbigfun deploy timestamp_to_unix_date_time\n</code></pre>"},{"location":"bigfunctions/timestamp_to_unix_date_time/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.timestamp_to_unix_date_time(timestamp(\"2001-01-01\"), \"YEAR\")\n</code></pre> <pre><code>select bigfunctions.us.timestamp_to_unix_date_time(timestamp(\"2001-01-01\"), \"YEAR\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.timestamp_to_unix_date_time(timestamp(\"2001-01-01\"), \"YEAR\")\n</code></pre> <pre>\n<code>+------------+\n| unix_value |\n+------------+\n| 31         |\n+------------+\n</code>\n</pre>"},{"location":"bigfunctions/timestamp_to_unix_date_time/#use-cases","title":"Use cases","text":"<p>Use Case 1: Event Time Difference Calculation</p> <p>Imagine you have a table of events with timestamps, and you want to calculate the time elapsed between events in a specific unit (e.g., days, hours, minutes).  <code>timestamp_to_unix_date_time</code> can help achieve this.</p> <p><pre><code>SELECT\n    event_id,\n    event_timestamp,\n    bigfunctions.YOUR_REGION.timestamp_to_unix_date_time(event_timestamp, 'SECOND') -\n        LAG(bigfunctions.YOUR_REGION.timestamp_to_unix_date_time(event_timestamp, 'SECOND')) OVER (PARTITION BY user_id ORDER BY event_timestamp) AS time_difference_seconds\nFROM\n    your_event_table\n</code></pre> This query calculates the difference in seconds between consecutive events for each user. You can change 'SECOND' to 'MINUTE', 'HOUR', 'DAY', etc., depending on the desired unit.</p> <p>Use Case 2: Bucketing Events by Time Intervals</p> <p>You might want to group events into specific time intervals for analysis, such as hourly, daily, or weekly buckets.  <code>timestamp_to_unix_date_time</code> allows you to generate bucket identifiers.</p> <p><pre><code>SELECT\n    event_id,\n    event_timestamp,\n    bigfunctions.YOUR_REGION.timestamp_to_unix_date_time(event_timestamp, 'HOUR') AS hour_bucket\nFROM\n    your_event_table\n</code></pre> This query assigns each event to an hourly bucket based on its timestamp.  Events within the same hour will have the same <code>hour_bucket</code> value.  You can then use this <code>hour_bucket</code> for aggregation or filtering.</p> <p>Use Case 3: Data Retention Policies</p> <p>For implementing data retention policies, you can use <code>timestamp_to_unix_date_time</code> to identify data older than a specific period.</p> <pre><code>SELECT\n    *\nFROM\n    your_data_table\nWHERE\n    bigfunctions.YOUR_REGION.timestamp_to_unix_date_time(CURRENT_TIMESTAMP(), 'DAY') - bigfunctions.YOUR_REGION.timestamp_to_unix_date_time(data_timestamp, 'DAY') &gt; 30  -- Delete data older than 30 days\n</code></pre> <p>This query selects data older than 30 days. You can modify the condition and integrate it into a DELETE statement to automatically remove old data.</p> <p>Use Case 4: Simplified Date Arithmetic</p> <p>Sometimes you need to perform date arithmetic but don't want to deal with complexities of date and timestamp functions. Converting to Unix time can simplify these calculations. For example, adding 7 days to a timestamp becomes as simple as adding 7 * 24 * 60 * 60 to the Unix timestamp representation.</p> <p>Important Note: Remember to replace <code>YOUR_REGION</code> with the appropriate BigQuery region (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>) where you are running your query.</p> Need help or Found a bug? Get help using <code>timestamp_to_unix_date_time</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>timestamp_to_unix_date_time</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/translate/","title":"translate","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/translate/#translate","title":"translate","text":"<pre><code>translate(text, target_language)\n</code></pre>"},{"location":"bigfunctions/translate/#description","title":"Description","text":"<p>Translate <code>text</code> into <code>target_language</code></p>"},{"location":"bigfunctions/translate/#usage","title":"Usage","text":"Call or Deploy <code>translate</code> ? Call <code>translate</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>translate</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>translate</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>translate</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>translate</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get translate\nbigfun deploy translate\n</code></pre>"},{"location":"bigfunctions/translate/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.translate(\"Salut \\ud83d\\udc4b Florian. Merci d\\u0027\\u0027avoir contribu\\u00e9 !\", \"en\")\n</code></pre> <pre><code>select bigfunctions.us.translate(\"Salut \\ud83d\\udc4b Florian. Merci d\\u0027\\u0027avoir contribu\\u00e9 !\", \"en\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.translate(\"Salut \\ud83d\\udc4b Florian. Merci d\\u0027\\u0027avoir contribu\\u00e9 !\", \"en\")\n</code></pre> <pre>\n<code>+-------------------------------------------+\n| translated_text                           |\n+-------------------------------------------+\n| Hello \ud83d\udc4b Florian. Thanks for contributing! |\n+-------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/translate/#use-cases","title":"Use cases","text":"<p>A company has a database of customer reviews in various languages. They want to analyze the sentiment of these reviews but their sentiment analysis tool only works on English text.  They can use the <code>translate</code> function within BigQuery to translate all reviews into English before processing them with the sentiment analysis tool.</p> <pre><code>SELECT review_id, sentiment(bigfunctions.&lt;region&gt;.translate(review_text, 'en')) AS sentiment_score\nFROM `project.dataset.reviews`;\n</code></pre> <p>Replacing <code>&lt;region&gt;</code> with the appropriate BigQuery region for their dataset (e.g., <code>us</code>, <code>eu</code>, <code>europe-west1</code>).  This query translates each <code>review_text</code> into English and then calculates the sentiment score using the hypothetical <code>sentiment</code> function. This allows the company to perform sentiment analysis on all reviews regardless of the original language.</p> Need help or Found a bug? Get help using <code>translate</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>translate</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/translated_month_name/","title":"translated_month_name","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_date</li> </ul>"},{"location":"bigfunctions/translated_month_name/#translated_month_name","title":"translated_month_name","text":"<pre><code>translated_month_name(date, language)\n</code></pre>"},{"location":"bigfunctions/translated_month_name/#description","title":"Description","text":"<p>Get <code>translated_month_name</code> in targeted <code>language</code></p> <p><code>language</code> has locale format such as <code>fr</code>, <code>fr_FR</code>, <code>fr_BE</code>, etc.</p>"},{"location":"bigfunctions/translated_month_name/#usage","title":"Usage","text":"Call or Deploy <code>translated_month_name</code> ? Call <code>translated_month_name</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>translated_month_name</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>translated_month_name</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>translated_month_name</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>translated_month_name</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get translated_month_name\nbigfun deploy translated_month_name\n</code></pre>"},{"location":"bigfunctions/translated_month_name/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.translated_month_name(2022-05-01, \"es\")\n</code></pre> <pre><code>select bigfunctions.us.translated_month_name(2022-05-01, \"es\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.translated_month_name(2022-05-01, \"es\")\n</code></pre> <pre>\n<code>+-----------------------+\n| translated_month_name |\n+-----------------------+\n| mayo                  |\n+-----------------------+\n</code>\n</pre>"},{"location":"bigfunctions/translated_month_name/#use-cases","title":"Use cases","text":"<p>A company has a table of sales data with a date column. They want to create a report that displays the month name in different languages based on the user's locale.  They can use the <code>translated_month_name</code> function to achieve this.</p> <p>Example Scenario:</p> <p>The company operates in France and Spain.  They have a BigQuery table called <code>sales</code> with columns <code>date</code> and <code>sales_amount</code>.</p> <pre><code>CREATE OR REPLACE TABLE `your_project.your_dataset.sales` AS\nSELECT DATE('2023-01-15') AS date, 1200 AS sales_amount UNION ALL\nSELECT DATE('2023-02-20') AS date, 1500 AS sales_amount UNION ALL\nSELECT DATE('2023-03-10') AS date, 1800 AS sales_amount UNION ALL\nSELECT DATE('2023-04-05') AS date, 1100 AS sales_amount;\n</code></pre> <p>Query for French Users:</p> <pre><code>SELECT\n    bigfunctions.eu.translated_month_name(date, 'fr') AS month_name_fr,\n    sales_amount\nFROM\n    `your_project.your_dataset.sales`;\n</code></pre> <p>Result:</p> month_name_fr sales_amount janvier 1200 f\u00e9vrier 1500 mars 1800 avril 1100 <p>Query for Spanish Users:</p> <pre><code>SELECT\n    bigfunctions.eu.translated_month_name(date, 'es') AS month_name_es,\n    sales_amount\nFROM\n    `your_project.your_dataset.sales`;\n</code></pre> <p>Result:</p> month_name_es sales_amount enero 1200 febrero 1500 marzo 1800 abril 1100 <p>This allows the company to generate reports tailored to different language preferences without needing complex case statements or separate tables for each language.  The <code>translated_month_name</code> function simplifies the process of localizing date information. Remember to replace <code>your_project.your_dataset</code> and the region prefix (e.g. <code>eu</code>, <code>us</code>) as needed.</p> Need help or Found a bug? Get help using <code>translated_month_name</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>translated_month_name</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/translated_weekday_name/","title":"translated_weekday_name","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_date</li> </ul>"},{"location":"bigfunctions/translated_weekday_name/#translated_weekday_name","title":"translated_weekday_name","text":"<pre><code>translated_weekday_name(date, language)\n</code></pre>"},{"location":"bigfunctions/translated_weekday_name/#description","title":"Description","text":"<p>Get <code>translated_weekday_name</code> in targeted <code>language</code></p> <p><code>language</code> has locale format such as <code>fr</code>, <code>fr_FR</code>, <code>fr_BE</code>, etc.</p>"},{"location":"bigfunctions/translated_weekday_name/#usage","title":"Usage","text":"Call or Deploy <code>translated_weekday_name</code> ? Call <code>translated_weekday_name</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>translated_weekday_name</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>translated_weekday_name</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>translated_weekday_name</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>translated_weekday_name</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get translated_weekday_name\nbigfun deploy translated_weekday_name\n</code></pre>"},{"location":"bigfunctions/translated_weekday_name/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.translated_weekday_name(2023-06-02, \"fr\")\n</code></pre> <pre><code>select bigfunctions.us.translated_weekday_name(2023-06-02, \"fr\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.translated_weekday_name(2023-06-02, \"fr\")\n</code></pre> <pre>\n<code>+-------------------------+\n| translated_weekday_name |\n+-------------------------+\n| vendredi                |\n+-------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/translated_weekday_name/#use-cases","title":"Use cases","text":"<p>A company has a database of customer orders with timestamps. They want to generate reports based on the day of the week, but need the reports to be localized for different regions.</p> <p>For example, they might want to generate a report showing the total sales for each day of the week in French for their French-speaking customers, and a separate report in Spanish for their Spanish-speaking customers.</p> <p>Using the <code>translated_weekday_name</code> function, they can achieve this easily. They can query their order data, extract the weekday from the timestamp, and then use the function to translate the weekday name into the desired language.  A simplified example in BigQuery SQL (assuming the dataset is in the EU region) would be:</p> <pre><code>SELECT\n    bigfunctions.eu.translated_weekday_name(EXTRACT(DATE from order_timestamp), 'fr') AS french_weekday,\n    SUM(order_total) AS total_sales\n  FROM\n    `your_project.your_dataset.your_orders_table`\n  GROUP BY 1\n  ORDER BY 1\n</code></pre> <p>This would output a table showing the total sales for each day of the week, with the weekday name translated into French. They could then repeat the query with a different language code (e.g., 'es' for Spanish) to generate a localized report for a different region.</p> Need help or Found a bug? Get help using <code>translated_weekday_name</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>translated_weekday_name</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/trigger_dataform/","title":"trigger_dataform","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>trigger_event</li> </ul>"},{"location":"bigfunctions/trigger_dataform/#trigger_dataform","title":"trigger_dataform","text":"<pre><code>trigger_dataform(repo_location, repo_name, repo_workspace, project_id, compilation_result_id)\n</code></pre>"},{"location":"bigfunctions/trigger_dataform/#description","title":"Description","text":"<p>Triggers a Dataform workflow in the specified project, location, repository and workspace. Returns the workflow invocation ID if successful.</p>"},{"location":"bigfunctions/trigger_dataform/#usage","title":"Usage","text":"Call or Deploy <code>trigger_dataform</code> ? Call <code>trigger_dataform</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>trigger_dataform</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>trigger_dataform</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>trigger_dataform</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>trigger_dataform</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get trigger_dataform\nbigfun deploy trigger_dataform\n</code></pre>"},{"location":"bigfunctions/trigger_dataform/#examples","title":"Examples","text":"<p>Trigger a Dataform workflow with a new compilation</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.trigger_dataform(\"us-central1\", \"my-repo\", \"my-workspace\", \"my-project\")\n</code></pre> <pre><code>select bigfunctions.us.trigger_dataform(\"us-central1\", \"my-repo\", \"my-workspace\", \"my-project\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.trigger_dataform(\"us-central1\", \"my-repo\", \"my-workspace\", \"my-project\")\n</code></pre> <pre>\n<code>+----------------------------------------------------------+\n| invocation_result                                        |\n+----------------------------------------------------------+\n| {\"workflow_invocation_id\": \"workflow_invocation_123456\"} |\n+----------------------------------------------------------+\n</code>\n</pre> Need help or Found a bug? Get help using <code>trigger_dataform</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>trigger_dataform</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/upload_table_to_gsheet/","title":"upload_table_to_gsheet","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>export</li> </ul>"},{"location":"bigfunctions/upload_table_to_gsheet/#upload_table_to_gsheet","title":"upload_table_to_gsheet","text":"<pre><code>upload_table_to_gsheet(table_or_view_or_query, max_rows, spreadsheet_url, worksheet_name, write_mode)\n</code></pre>"},{"location":"bigfunctions/upload_table_to_gsheet/#description","title":"Description","text":"<p>Upload data from <code>table_or_view_or_query</code> to Google Sheet (maximum <code>max_rows</code> rows will be uploaded).</p> <ol> <li>\ud83d\udca1 For this to work, share your Google Sheet in edit mode to <code>749389685934-compute@developer.gserviceaccount.com</code></li> <li><code>write_mode</code> controls what is done if a worksheet with <code>worksheet_name</code> already exists. It must be one of:<ul> <li><code>write_truncate</code>: if the sheet already exists, it will be recreated.</li> <li><code>write_append</code>: if the sheet already exists, data will be appended to it.</li> <li><code>raise_error</code>:  if the sheet already exists, an error will be raised.</li> <li><code>do_nothing</code>:  if the sheet already exists, nothing will be done.</li> <li><code>null</code>: same as <code>write_truncate</code></li> </ul> </li> </ol>"},{"location":"bigfunctions/upload_table_to_gsheet/#usage","title":"Usage","text":"Call or Deploy <code>upload_table_to_gsheet</code> ? Call <code>upload_table_to_gsheet</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>upload_table_to_gsheet</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>upload_table_to_gsheet</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>upload_table_to_gsheet</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>upload_table_to_gsheet</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get upload_table_to_gsheet\nbigfun deploy upload_table_to_gsheet\n</code></pre>"},{"location":"bigfunctions/upload_table_to_gsheet/#examples","title":"Examples","text":"<p>1. upload 1000 rows from a table</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.upload_table_to_gsheet(\n      'bigfunctions.eu.sales', \n      1000, \n      'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n      'my worksheet', \n      'write_truncate');\n</code></pre> <pre><code>call bigfunctions.us.upload_table_to_gsheet(\n      'bigfunctions.us.sales', \n      1000, \n      'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n      'my worksheet', \n      'write_truncate');\n</code></pre> <pre><code>call bigfunctions.europe_west1.upload_table_to_gsheet(\n      'bigfunctions.europe_west1.sales', \n      1000, \n      'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n      'my worksheet', \n      'write_truncate');\n</code></pre> <p></p> <p>2. with a query</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.upload_table_to_gsheet(\n      '(select 1 as foo)', \n      null, \n      'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n      'my worksheet', \n      'write_truncate');\n</code></pre> <pre><code>call bigfunctions.us.upload_table_to_gsheet(\n      '(select 1 as foo)', \n      null, \n      'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n      'my worksheet', \n      'write_truncate');\n</code></pre> <pre><code>call bigfunctions.europe_west1.upload_table_to_gsheet(\n      '(select 1 as foo)', \n      null, \n      'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n      'my worksheet', \n      'write_truncate');\n</code></pre>"},{"location":"bigfunctions/upload_table_to_gsheet/#use-cases","title":"Use cases","text":"<p>Here are a few use cases for the <code>upload_table_to_gsheet</code> function:</p> <p>1. Reporting and Sharing Data:</p> <ul> <li>Regular Reporting:  A marketing team could use this function to automatically export weekly or monthly website traffic data from a BigQuery table to a Google Sheet. This sheet could then be used for reporting, visualization, and sharing with stakeholders who may not have direct access to BigQuery.</li> <li>Ad-hoc Data Extracts:  A business analyst might need to quickly extract a subset of customer data for a specific analysis.  They could use <code>upload_table_to_gsheet</code> to pull the relevant data into a Google Sheet for easier manipulation and sharing with collaborators.</li> <li>Data Sharing with External Parties: You might need to share data with a client or partner who doesn't have access to your BigQuery project. Exporting the data to a Google Sheet offers a simple and accessible way to share information.</li> </ul> <p>2. Collaboration and Data Entry:</p> <ul> <li>Collaborative Data Editing:  A team working on a project might use a Google Sheet as a central hub for data entry and review.  <code>upload_table_to_gsheet</code> could be used to seed the sheet with initial data from BigQuery, allowing the team to build upon it collaboratively.</li> <li>Collecting Feedback: You could upload survey results from BigQuery to a Google Sheet to facilitate collaborative analysis and discussion among team members.</li> </ul> <p>3. Data Integration and Transformation:</p> <ul> <li>Preprocessing Data for Other Tools:  Some tools and applications might not have direct integration with BigQuery. Exporting data to a Google Sheet can serve as an intermediary step, allowing you to format and prepare the data for import into those tools.</li> <li>Manual Data Cleansing and Enrichment: While BigQuery is powerful for data transformation, sometimes manual cleaning or enrichment is necessary. Exporting data to a Google Sheet provides a user-friendly interface for making such adjustments.</li> </ul> <p>4. Small-Scale Data Backup:</p> <ul> <li>Backing Up Important Tables: For relatively small tables, <code>upload_table_to_gsheet</code> can be a simple way to create a backup copy in a different format.  However, for large datasets, BigQuery's native backup and recovery mechanisms are more suitable.</li> </ul> <p>Example Scenario:</p> <p>An e-commerce company uses BigQuery to store sales data. Every Monday, the marketing team needs a report of the previous week's sales by product category. They could schedule a query to calculate this data and then use <code>upload_table_to_gsheet</code> to automatically export the results to a designated Google Sheet. This automates the reporting process and makes the data readily available for analysis and visualization.</p> Need help or Found a bug? Get help using <code>upload_table_to_gsheet</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>upload_table_to_gsheet</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/upload_to_gsheet/","title":"upload_to_gsheet","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>export</li> </ul>"},{"location":"bigfunctions/upload_to_gsheet/#upload_to_gsheet","title":"upload_to_gsheet","text":"<pre><code>upload_to_gsheet(data, spreadsheet_url, worksheet_name, write_mode)\n</code></pre>"},{"location":"bigfunctions/upload_to_gsheet/#description","title":"Description","text":"<p>Upload <code>data</code> (a json array of objects) to a Google Sheet in <code>write_mode</code>.</p> <ol> <li>\ud83d\udca1 For this to work, share your Google Sheet in edit mode to <code>749389685934-compute@developer.gserviceaccount.com</code></li> <li><code>write_mode</code> controls what is done if a worksheet with <code>worksheet_name</code> already exists. It must be one of:<ul> <li><code>write_truncate</code>: if the sheet already exists, it will be recreated.</li> <li><code>write_append</code>: if the sheet already exists, data will be appended to it.</li> <li><code>raise_error</code>:  if the sheet already exists, an error will be raised.</li> <li><code>do_nothing</code>:  if the sheet already exists, nothing will be done.</li> <li><code>null</code>: same as <code>write_truncate</code></li> </ul> </li> </ol>"},{"location":"bigfunctions/upload_to_gsheet/#usage","title":"Usage","text":"Call or Deploy <code>upload_to_gsheet</code> ? Call <code>upload_to_gsheet</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>upload_to_gsheet</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>upload_to_gsheet</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>upload_to_gsheet</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>upload_to_gsheet</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get upload_to_gsheet\nbigfun deploy upload_to_gsheet\n</code></pre>"},{"location":"bigfunctions/upload_to_gsheet/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.upload_to_gsheet(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]', \"https://docs.google.com/spreadsheets/d/xxxxxxxxx\", \"my worksheet\", \"write_truncate\")\n</code></pre> <pre><code>select bigfunctions.us.upload_to_gsheet(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]', \"https://docs.google.com/spreadsheets/d/xxxxxxxxx\", \"my worksheet\", \"write_truncate\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.upload_to_gsheet(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]', \"https://docs.google.com/spreadsheets/d/xxxxxxxxx\", \"my worksheet\", \"write_truncate\")\n</code></pre> <pre>\n<code>+---------------+\n| result        |\n+---------------+\n| DATA_UPLOADED |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/upload_to_gsheet/#use-cases","title":"Use cases","text":"<p>A marketing team wants to analyze the performance of their recent social media campaigns. They have the campaign data stored in a BigQuery table. To share this data with non-technical stakeholders who primarily use Google Sheets, they can utilize the <code>upload_to_gsheet</code> function.</p> <p>Here's a breakdown of the use case:</p> <ol> <li> <p>Data Preparation in BigQuery: The marketing team creates a BigQuery query to aggregate the relevant campaign data, such as campaign name, impressions, clicks, conversions, and cost.  Let's assume the query results in a table named <code>campaign_performance</code>.</p> </li> <li> <p>Converting to JSON:  They use BigQuery's <code>TO_JSON_STRING</code> function to convert the results of the <code>campaign_performance</code> table into a JSON array of objects, where each object represents a row of campaign data.</p> </li> </ol> <pre><code>SELECT TO_JSON_STRING(t)\nFROM `project.dataset.campaign_performance` AS t;\n</code></pre> <ol> <li>Uploading to Google Sheets: They use the <code>upload_to_gsheet</code> function within BigQuery to upload this JSON data directly to a designated Google Sheet.</li> </ol> <p><pre><code>SELECT bigfunctions.us.upload_to_gsheet(\n    (\n        SELECT TO_JSON_STRING(t)\n        FROM `project.dataset.campaign_performance` AS t\n    ),\n    'https://docs.google.com/spreadsheets/d/YOUR_SPREADSHEET_ID',\n    'Campaign Performance',\n    'write_truncate'\n);\n</code></pre>    This code snippet does the following:     * Calls the <code>upload_to_gsheet</code> function from the appropriate regional dataset (e.g., <code>bigfunctions.us</code>).     * Passes the JSON string generated in the subquery as the <code>data</code> argument.     * Provides the URL of the target Google Sheet, replacing <code>YOUR_SPREADSHEET_ID</code> with the actual ID.     * Specifies the worksheet name as 'Campaign Performance'.     * Uses the <code>write_truncate</code> mode to overwrite the sheet if it already exists, ensuring they always have the latest data.  Alternatively, they could use <code>write_append</code> to add new data to the existing sheet.</p> <ol> <li>Sharing and Analysis in Google Sheets: The Google Sheet is then shared with the non-technical stakeholders, who can easily access, visualize, and analyze the campaign performance data within their familiar spreadsheet environment.  They can create charts, pivot tables, and use other Google Sheets features to gain insights.</li> </ol> <p>This process automates the data transfer from BigQuery to Google Sheets, ensuring that stakeholders have up-to-date campaign performance data readily available for analysis and decision-making. It bridges the gap between technical data storage and non-technical data consumption, enabling broader access to critical business information.</p> Need help or Found a bug? Get help using <code>upload_to_gsheet</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>upload_to_gsheet</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/upsert/","title":"upsert","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/upsert/#upsert","title":"upsert","text":"<pre><code>upsert(query_or_table_or_view, destination_table, insertion_mode, primary_keys, recency_field)\n</code></pre>"},{"location":"bigfunctions/upsert/#description","title":"Description","text":"<p>Merges <code>query_or_table_or_view</code> into the <code>destination_table</code>.</p> <p>A record is identified by its <code>primary_keys</code>. A unique combination of those fields is a unique record. Before the merging operation, the records are identified and deduplicated according to the <code>primary_keys</code>. If <code>recency_field</code> is filled then the last record version is kept else it is chosen arbitrarily.</p> Param Possible values <code>query_or_table_or_view</code> Can be a fully qualified table or view <code>(&lt;project-id&gt;.)?&lt;dataset_id&gt;.&lt;table_or_view_name&gt;</code>.  Can also be a plain query in BigQuery Standard SQL. <code>destination_table</code> Must be a fully qualified table <code>(&lt;project-id&gt;.)?&lt;dataset_id&gt;.&lt;table_or_view_name&gt;</code>. <code>insertion_mode</code> Three insertion mode are available:<ul><li> <code>\"insert_only\"</code>: existing records in <code>query_or_table_or_view</code> and not existing in <code>destination_table</code> are inserted. Deletion and update are not possible. </li><li> <code>\"delta\"</code>: same as <code>insert_only</code> with the updatable records. Records existing both in <code>query_or_table_or_view</code> and in  <code>destination_table</code> are updated. If <code>recency_field</code> is filled, only the most recent version from source and destination is kept. </li><li> <code>\"full\"</code>: same as <code>delta</code> with the deletable records. Records not existing in <code>query_or_table_or_view</code> and existing in <code>destination_table</code> are deleted. </li> </ul> <code>primary_keys</code> Combination of field identifying a record. If <code>primary_keys = []</code>, every row will be considered as a unique record. <code>recency_field</code> Orderable field (ie. <code>timestamp</code>, <code>integer</code>, ...) to identify the relative frechness of a record version."},{"location":"bigfunctions/upsert/#usage","title":"Usage","text":"Call or Deploy <code>upsert</code> ? Call <code>upsert</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>upsert</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>upsert</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>upsert</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>upsert</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get upsert\nbigfun deploy upsert\n</code></pre>"},{"location":"bigfunctions/upsert/#examples","title":"Examples","text":"<p>1. Merge tables in delta mode</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.upsert(\"dataset_id.source_table_or_view\", \"dataset_id.destination_table\", \"delta\", ['id'], \"timestamp_field\");\n</code></pre> <pre><code>call bigfunctions.us.upsert(\"dataset_id.source_table_or_view\", \"dataset_id.destination_table\", \"delta\", ['id'], \"timestamp_field\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.upsert(\"dataset_id.source_table_or_view\", \"dataset_id.destination_table\", \"delta\", ['id'], \"timestamp_field\");\n</code></pre> <p>2. Merge from query in full</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.upsert(\"select * from dataset_id.source_table_or_view where filter_field = true\", \"dataset_id.destination_table\", \"full\", ['id'], null);\n</code></pre> <pre><code>call bigfunctions.us.upsert(\"select * from dataset_id.source_table_or_view where filter_field = true\", \"dataset_id.destination_table\", \"full\", ['id'], null);\n</code></pre> <pre><code>call bigfunctions.europe_west1.upsert(\"select * from dataset_id.source_table_or_view where filter_field = true\", \"dataset_id.destination_table\", \"full\", ['id'], null);\n</code></pre>"},{"location":"bigfunctions/upsert/#use-cases","title":"Use cases","text":"<p>Let's illustrate the <code>upsert</code> function with a concrete use case: managing a product catalog in BigQuery.</p> <p>Scenario: You have a BigQuery table called <code>product_catalog</code> that stores information about your products.  You receive regular updates about product information from various sources, and you need to efficiently update your <code>product_catalog</code> table with these changes.</p> <p>Table Schema (product_catalog):</p> <ul> <li><code>product_id</code> (STRING): Unique identifier for each product (primary key)</li> <li><code>name</code> (STRING): Product name</li> <li><code>price</code> (NUMERIC): Product price</li> <li><code>description</code> (STRING): Product description</li> <li><code>last_updated</code> (TIMESTAMP): Timestamp indicating the last update time</li> </ul> <p>Update Data: You receive a new batch of product updates in another table or as the result of a query. This data may contain new products, updates to existing products, or even information about products that need to be removed.</p> <p>Use Case Examples:</p> <p>1. Delta Update (Insert and Update):</p> <p>You want to insert new products and update existing ones based on the latest information.  You use the <code>delta</code> insertion mode and the <code>last_updated</code> field to determine the most recent record.</p> <pre><code>CALL bigfunctions.&lt;your-region&gt;.upsert(\n    'dataset_id.product_updates',  -- Source table with updates\n    'dataset_id.product_catalog', -- Destination table\n    'delta',                      -- Insertion mode\n    ['product_id'],              -- Primary key\n    'last_updated'               -- Recency field\n);\n</code></pre> <p>This will:</p> <ul> <li>Insert:  Any new products (based on <code>product_id</code>) found in <code>product_updates</code> that are not present in <code>product_catalog</code>.</li> <li>Update: For products with matching <code>product_id</code> in both tables, the values in <code>product_catalog</code> will be updated with the values from <code>product_updates</code> if the <code>last_updated</code> timestamp in <code>product_updates</code> is more recent.</li> </ul> <p>2. Full Merge (Insert, Update, and Delete):</p> <p>You want to perform a complete synchronization of your product catalog. This means inserting new products, updating existing ones, and deleting products that are no longer present in the source data. You use the <code>full</code> insertion mode.</p> <pre><code>CALL bigfunctions.&lt;your-region&gt;.upsert(\n    -- Query that selects active products from a larger dataset\n    'SELECT * FROM dataset_id.all_products WHERE active = TRUE',\n    'dataset_id.product_catalog', -- Destination table\n    'full',                      -- Insertion mode\n    ['product_id'],              -- Primary key\n    'last_updated'               -- Recency field\n);\n</code></pre> <p>This will:</p> <ul> <li>Insert: New products.</li> <li>Update: Existing products with more recent data.</li> <li>Delete: Products present in <code>product_catalog</code> but not returned by the source query (meaning they are no longer active).</li> </ul> <p>3. Insert Only:</p> <p>If you only want to insert new products without updating existing ones:</p> <pre><code>CALL bigfunctions.&lt;your-region&gt;.upsert(\n    'dataset_id.new_products',    -- Source table with new products\n    'dataset_id.product_catalog', -- Destination table\n    'insert_only',                -- Insertion mode\n    ['product_id'],              -- Primary key\n    NULL                         -- No recency field needed for insert only\n);\n</code></pre> <p>These examples demonstrate how the <code>upsert</code> function simplifies the process of merging data into a BigQuery table, handling various update scenarios with a single function call.  Remember to replace <code>&lt;your-region&gt;</code> with the appropriate BigQuery region (e.g., <code>us</code>, <code>eu</code>, <code>us-central1</code>).</p> Need help or Found a bug? Get help using <code>upsert</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>upsert</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/url_decode/","title":"url_decode","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/url_decode/#url_decode","title":"url_decode","text":"<pre><code>url_decode(url_encoded_string)\n</code></pre>"},{"location":"bigfunctions/url_decode/#description","title":"Description","text":"<p>Decode <code>url_encoded_string</code> (inspired from this stackoverflow solution)</p>"},{"location":"bigfunctions/url_decode/#usage","title":"Usage","text":"Call or Deploy <code>url_decode</code> ? Call <code>url_decode</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>url_decode</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>url_decode</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>url_decode</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>url_decode</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get url_decode\nbigfun deploy url_decode\n</code></pre>"},{"location":"bigfunctions/url_decode/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.url_decode(\"http%3A%2F%2Fwww.example.com%2Fhello%3Fv%3D12345\")\n</code></pre> <pre><code>select bigfunctions.us.url_decode(\"http%3A%2F%2Fwww.example.com%2Fhello%3Fv%3D12345\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.url_decode(\"http%3A%2F%2Fwww.example.com%2Fhello%3Fv%3D12345\")\n</code></pre> <pre>\n<code>+--------------------------------------+\n| string                               |\n+--------------------------------------+\n| http://www.example.com/hello?v=12345 |\n+--------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/url_decode/#use-cases","title":"Use cases","text":"<p>You have a table in BigQuery that stores URLs, but some of these URLs are URL-encoded (meaning special characters are replaced with percent signs followed by hexadecimal codes). You want to decode these URLs to their original, readable form.</p> <p>Example Scenario:</p> <p>Let's say you have a table named <code>website_traffic</code> with a column called <code>encoded_url</code>.  This column contains URL-encoded strings like this:</p> <pre><code>'https%3A%2F%2Fwww.example.com%2Fproducts%3Fid%3D123%26source%3Dgoogle'\n</code></pre> <p>You can use the <code>url_decode</code> function to decode these URLs within a query:</p> <pre><code>SELECT url_decode(encoded_url) AS decoded_url\nFROM `your_project.your_dataset.website_traffic`;\n</code></pre> <p>This query would produce a result set with a <code>decoded_url</code> column containing the properly decoded URLs:</p> <pre><code>https://www.example.com/products?id=123&amp;source=google\n</code></pre> <p>Use Cases:</p> <ul> <li>Log Analysis: Web server logs often store URLs in a URL-encoded format.  Decoding them makes the logs more human-readable and easier to analyze.</li> <li>Data Cleaning:  If you have URL data from different sources, some might be encoded and some might not.  Using <code>url_decode</code> ensures consistency in your data.</li> <li>Reporting:  Presenting decoded URLs in reports makes the information clearer and more understandable for stakeholders.</li> <li>Data Integration: If you're integrating data from a system that provides URL-encoded URLs, you'll need to decode them before storing or processing them in BigQuery.</li> </ul> <p>In essence, whenever you encounter URL-encoded strings in your BigQuery data and need to work with the actual URLs, the <code>url_decode</code> function becomes indispensable.</p> Need help or Found a bug? Get help using <code>url_decode</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>url_decode</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/validate_address/","title":"validate_address","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_geo_data</li> </ul>"},{"location":"bigfunctions/validate_address/#validate_address","title":"validate_address","text":"<pre><code>validate_address(address)\n</code></pre>"},{"location":"bigfunctions/validate_address/#description","title":"Description","text":"<p>Validate <code>address</code> using Google Maps</p>"},{"location":"bigfunctions/validate_address/#usage","title":"Usage","text":"Call or Deploy <code>validate_address</code> ? Call <code>validate_address</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>validate_address</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>validate_address</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>validate_address</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>validate_address</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get validate_address\nbigfun deploy validate_address\n</code></pre> <p>Requirements</p> <p><code>validate_address</code> uses the following secrets. Get them by reading the documentation link and store them in Google Secret Manager in the project where you deploy the function (and give Accessor role to the service account of the function):</p> name description documentation to get the secret <code>gmaps_api_key</code> Google Maps Api Key doc"},{"location":"bigfunctions/validate_address/#examples","title":"Examples","text":"<p>1. Correct address</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.validate_address(\"1 Avenue des Champs-\\u00c9lys\\u00e9es, 75008 Paris, France\")\n</code></pre> <pre><code>select bigfunctions.us.validate_address(\"1 Avenue des Champs-\\u00c9lys\\u00e9es, 75008 Paris, France\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.validate_address(\"1 Avenue des Champs-\\u00c9lys\\u00e9es, 75008 Paris, France\")\n</code></pre> <pre>\n<coden| validation_result                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {'result': {'verdict': {'inputGranularity': 'PREMISE',\n  'validationGranularity': 'PREMISE',\n  'geocodeGranularity': 'PREMISE',\n  'addressComplete': True},\n  'address': {'formattedAddress': '1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France',\n  ...},\n  'geocode': {'location': {'latitude': 48.8698877, 'longitude': 2.3079341},\n  ...,\n  'bounds': {'low': {'latitude': 48.8698877, 'longitude': 2.3079341},\n    'high': {'latitude': 48.8698877, 'longitude': 2.3079341}},\n  ...}},\n'responseId': ...}\n |\n+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>2. Address with inference</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.validate_address(\"1 Avenue des Champs-\\u00c9lys\\u00e9es, 75008 Paris, France\")\n</code></pre> <pre><code>select bigfunctions.us.validate_address(\"1 Avenue des Champs-\\u00c9lys\\u00e9es, 75008 Paris, France\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.validate_address(\"1 Avenue des Champs-\\u00c9lys\\u00e9es, 75008 Paris, France\")\n</code></pre> <pre>\n<coden| validation_result|\nn| {'result': {'verdict': {'inputGranularity': 'PREMISE',\n  'validationGranularity': 'PREMISE',\n  'geocodeGranularity': 'PREMISE',\n  'addressComplete': True,\n  'hasUnconfirmedComponents': True,\n  'hasInferredComponents': True},\n  'address': {\n    'formattedAddress': '1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France',\n    'addressComponents': [\n      {'componentName': {'text': '1', 'languageCode': 'fr'},\n        'componentType': 'street_number',\n        'confirmationLevel': 'CONFIRMED'},\n      {'componentName': {'text': 'rue des champs elysees', 'languageCode': 'fr'},\n        'componentType': 'route',\n        'confirmationLevel': 'UNCONFIRMED_BUT_PLAUSIBLE'},\n      ...,]\n    'unconfirmedComponentTypes': ['route']}\n  'geocode': {'location': {'latitude': 48.8698877, 'longitude': 2.3079341},\n  ...,\n  'bounds': {'low': {'latitude': 48.8698877, 'longitude': 2.3079341},\n    'high': {'latitude': 48.8698877, 'longitude': 2.3079341}},\n  ...}},\n'responseId': ...}\n |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>3. Route granularity</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.validate_address(\"Avenue des Champs-\\u00c9lys\\u00e9es, 75008 Paris, France\")\n</code></pre> <pre><code>select bigfunctions.us.validate_address(\"Avenue des Champs-\\u00c9lys\\u00e9es, 75008 Paris, France\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.validate_address(\"Avenue des Champs-\\u00c9lys\\u00e9es, 75008 Paris, France\")\n</code></pre> <pre>\n<coden| validation_result|\nn| {'result': {'verdict': {inputGranularity': 'ROUTE',\n  'validationGranularity': 'ROUTE',\n  'geocodeGranularity': 'ROUTE'},\n  'address': {\n    'formattedAddress': 'Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France',\n    'addressComponents': [\n      {'componentName': {'text': 'Avenue des Champs-\u00c9lys\u00e9es',\n        'languageCode': 'fr'},\n        'componentType': 'route',\n        'confirmationLevel': 'CONFIRMED'},\n      ...,]\n    'missingComponentTypes': ['street_number']}\n  'geocode': {'location': {'latitude': 48.8729602, 'longitude': 2.2978526},\n  ...,\n  'bounds': {'low': {'latitude': 48.8655318, 'longitude': 2.2952047},\n    'high': {'latitude': 48.8748338, 'longitude': 2.3200376}},\n  ...}},\n'responseId': ...}\n |\nn</code>\n</pre>"},{"location":"bigfunctions/validate_address/#use-cases","title":"Use cases","text":"<p>A practical use case for the <code>validate_address</code> function is cleaning and standardizing address data in a customer database.</p> <p>Imagine you have a large table of customer data in BigQuery, including a column with their addresses.  These addresses might have been entered manually or collected from various sources, leading to inconsistencies like:</p> <ul> <li>Different formats: \"123 Main St\", \"123 Main Street\", \"123 Main St.\", etc.</li> <li>Typos: \"123 Main Sreet\", \"124 Main St\", etc.</li> <li>Missing information: Some addresses might be missing city, state, or zip code.</li> </ul> <p>You can use the <code>validate_address</code> function within a BigQuery query to process these addresses and improve their quality:</p> <pre><code>SELECT\n    original_address,\n    bigfunctions.us.validate_address(original_address).result.address.formattedAddress AS standardized_address,\n    bigfunctions.us.validate_address(original_address).result.verdict.validationGranularity AS validation_granularity,\n    bigfunctions.us.validate_address(original_address).result.verdict.geocodeGranularity AS geocode_granularity\nFROM\n    `your_project.your_dataset.your_customer_table`;\n</code></pre> <p>This query will:</p> <ol> <li>Standardize the format: The <code>formattedAddress</code> field in the function's output will provide a consistent format for all valid addresses.</li> <li>Correct minor errors: The function can often correct typos and infer missing information.</li> <li>Identify invalid addresses: By checking the <code>validationGranularity</code> and <code>geocodeGranularity</code>, you can identify addresses that are completely invalid or only partially valid (e.g., only the street is valid).  You can then flag these addresses for manual review or further investigation.</li> </ol> <p>This standardized and validated address data can then be used for various purposes, such as:</p> <ul> <li>Geocoding: Accurately map customer locations for visualizations or analyses.</li> <li>Logistics: Optimize delivery routes and calculate shipping costs.</li> <li>Marketing: Target specific geographic areas with advertising campaigns.</li> <li>Data integration:  Improve the accuracy and consistency of data when integrating with other systems.</li> </ul> <p>By using the <code>validate_address</code> function, you can significantly enhance the quality and usability of your customer address data.  This leads to more accurate analyses, improved operational efficiency, and better business decisions.</p> Need help or Found a bug? Get help using <code>validate_address</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>validate_address</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/weighted_average/","title":"weighted_average","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_numeric</li> </ul>"},{"location":"bigfunctions/weighted_average/#weighted_average","title":"weighted_average","text":"<pre><code>weighted_average(element, weight)\n</code></pre>"},{"location":"bigfunctions/weighted_average/#description","title":"Description","text":"<p>Returns the weigthed average elements.</p>"},{"location":"bigfunctions/weighted_average/#usage","title":"Usage","text":"Call or Deploy <code>weighted_average</code> ? Call <code>weighted_average</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>weighted_average</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>weighted_average</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>weighted_average</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>weighted_average</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get weighted_average\nbigfun deploy weighted_average\n</code></pre>"},{"location":"bigfunctions/weighted_average/#examples","title":"Examples","text":"<p>Calculate average unit price</p> EUUSeurope-west1 <pre><code>with sample_data as (\n\n  select 10 as grade, 1 as ponderation\n      union all\n      select 13 as grade, 2 as ponderation\n\n)\n\n\nselect bigfunctions.eu.weighted_average(grade, ponderation)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select 10 as grade, 1 as ponderation\n      union all\n      select 13 as grade, 2 as ponderation\n\n)\n\n\nselect bigfunctions.us.weighted_average(grade, ponderation)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select 10 as grade, 1 as ponderation\n      union all\n      select 13 as grade, 2 as ponderation\n\n)\n\n\nselect bigfunctions.europe_west1.weighted_average(grade, ponderation)\nfrom sample_data\n</code></pre> <pre>\n<code>+------------------+\n| weighted_average |\n+------------------+\n| 12               |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/weighted_average/#use-cases","title":"Use cases","text":"<p>A teacher wants to calculate the weighted average grade for a student.  The student has two grades:</p> <ul> <li>Quiz: Grade = 10, Weight = 1 (Quizzes are worth less)</li> <li>Exam: Grade = 13, Weight = 2 (Exams are worth more)</li> </ul> <p>Using the <code>weighted_average</code> function, the calculation would be:</p> <pre><code>SELECT bigfunctions.{region}.weighted_average(grade, weight) AS weighted_average\nFROM (\n    SELECT 10 AS grade, 1 AS weight UNION ALL\n    SELECT 13 AS grade, 2 AS weight\n);\n</code></pre> <p>This would return 12, as shown in the example.  The exam grade (13) contributes more to the final average because it has a higher weight.</p> <p>Other use cases:</p> <ul> <li>Calculating average stock prices: Where <code>element</code> is the price of the stock and <code>weight</code> is the number of shares held at that price.</li> <li>Determining the weighted average cost of capital: Where <code>element</code> is the cost of each type of capital (debt, equity, etc.) and <code>weight</code> is the proportion of each type of capital in the company's capital structure.</li> <li>Computing the weighted average of customer satisfaction scores: Where <code>element</code> is the satisfaction score and <code>weight</code> is the number of customers who gave that score.</li> <li>Creating a composite index from multiple indicators: Where <code>element</code> is the value of each indicator and <code>weight</code> reflects the importance of each indicator in the overall index.  For instance, a happiness index could be created weighting factors like GDP per capita, life expectancy, and social support.</li> </ul> <p>In essence, anytime you need an average where some elements contribute more than others, the <code>weighted_average</code> function is useful.</p> Need help or Found a bug? Get help using <code>weighted_average</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>weighted_average</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/xml2json/","title":"xml2json","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>convert_data_format</li> </ul>"},{"location":"bigfunctions/xml2json/#xml2json","title":"xml2json","text":"<pre><code>xml2json(xml)\n</code></pre>"},{"location":"bigfunctions/xml2json/#description","title":"Description","text":"<p>Returns JSON as a string for given XML string</p>"},{"location":"bigfunctions/xml2json/#usage","title":"Usage","text":"Call or Deploy <code>xml2json</code> ? Call <code>xml2json</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>xml2json</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>xml2json</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>xml2json</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>xml2json</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get xml2json\nbigfun deploy xml2json\n</code></pre>"},{"location":"bigfunctions/xml2json/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml2json(\"\\u003ca\\u003e\\u003cb\\u003efoo\\u003c/b\\u003e\\u003c/a\\u003e\")\n</code></pre> <pre><code>select bigfunctions.us.xml2json(\"\\u003ca\\u003e\\u003cb\\u003efoo\\u003c/b\\u003e\\u003c/a\\u003e\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml2json(\"\\u003ca\\u003e\\u003cb\\u003efoo\\u003c/b\\u003e\\u003c/a\\u003e\")\n</code></pre> <pre>\n<code>+-------------------+\n| json              |\n+-------------------+\n| {\"a\":{\"b\":\"foo\"}} |\n+-------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml2json(\"\\u003ca\\u003e\\u003c/a\\u003e\")\n</code></pre> <pre><code>select bigfunctions.us.xml2json(\"\\u003ca\\u003e\\u003c/a\\u003e\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml2json(\"\\u003ca\\u003e\\u003c/a\\u003e\")\n</code></pre> <pre>\n<code>+----------+\n| json     |\n+----------+\n| {\"a\":\"\"} |\n+----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml2json(\"\\u003ca\\u003e\\u003c/a\")\n</code></pre> <pre><code>select bigfunctions.us.xml2json(\"\\u003ca\\u003e\\u003c/a\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml2json(\"\\u003ca\\u003e\\u003c/a\")\n</code></pre> <pre>\n<code>+------+\n| json |\n+------+\n| null |\n+------+\n</code>\n</pre>"},{"location":"bigfunctions/xml2json/#use-cases","title":"Use cases","text":"<p>Let's say you have a BigQuery table that stores product information, but some of that information is stored in XML format within a string column.  You want to analyze this data using BigQuery's powerful SQL capabilities, but working directly with XML in SQL can be cumbersome.  The <code>xml2json</code> function provides a solution.</p> <p>Scenario:</p> <p>Your table <code>products</code> has columns like <code>product_id</code>, <code>product_name</code>, and <code>product_details</code>. The <code>product_details</code> column contains XML data like this:</p> <pre><code>&lt;product_details&gt;\n  &lt;color&gt;Red&lt;/color&gt;\n  &lt;size&gt;Large&lt;/size&gt;\n  &lt;price&gt;25.99&lt;/price&gt;\n&lt;/product_details&gt;\n</code></pre> <p>Use Case with <code>xml2json</code>:</p> <p>You can use <code>xml2json</code> to convert the XML data into JSON within your SQL query, making it easier to access specific elements:</p> <pre><code>SELECT\n    product_id,\n    product_name,\n    JSON_VALUE(bigfunctions.us.xml2json(product_details), '$.product_details.color') AS color,\n    JSON_VALUE(bigfunctions.us.xml2json(product_details), '$.product_details.size') AS size,\n    CAST(JSON_VALUE(bigfunctions.us.xml2json(product_details), '$.product_details.price') AS NUMERIC) AS price\nFROM\n    products;\n</code></pre> <p>This query uses <code>xml2json</code> to convert the <code>product_details</code> XML into a JSON string.  Then, <code>JSON_VALUE</code> extracts the <code>color</code>, <code>size</code>, and <code>price</code> values using JSONPath expressions. This transforms the XML data into a more manageable format for analysis within BigQuery.</p> <p>Other Potential Use Cases:</p> <ul> <li>Data Transformation for downstream applications:  Convert XML data to JSON before exporting it to other systems that work better with JSON.</li> <li>Simplifying complex XML structures:  Transform complex, nested XML into a flatter JSON structure for easier querying and reporting.</li> <li>API Integration: If an API returns data in XML format,  <code>xml2json</code> can be used to convert the response into JSON within BigQuery for analysis.</li> <li>Log Processing:  If log files are stored in XML format, this function can convert them to JSON for easier parsing and analysis within BigQuery.</li> </ul> <p>By converting XML to JSON within BigQuery using <code>xml2json</code>, you unlock the power of BigQuery's JSON functions and make complex XML data more accessible for analysis and processing.</p> Need help or Found a bug? Get help using <code>xml2json</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>xml2json</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/xml_extract/","title":"xml_extract","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/xml_extract/#xml_extract","title":"xml_extract","text":"<pre><code>xml_extract(xml, x_path)\n</code></pre>"},{"location":"bigfunctions/xml_extract/#description","title":"Description","text":"<p>Returns content extracted from XML from given XPATH</p>"},{"location":"bigfunctions/xml_extract/#usage","title":"Usage","text":"Call or Deploy <code>xml_extract</code> ? Call <code>xml_extract</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>xml_extract</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>xml_extract</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>xml_extract</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>xml_extract</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get xml_extract\nbigfun deploy xml_extract\n</code></pre>"},{"location":"bigfunctions/xml_extract/#examples","title":"Examples","text":"<p>1. Only one element for the xpath</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml_extract(\"\\u003ccustomer\\u003e\\u003cname\\u003eJohn Doe\\u003c/name\\u003e\\u003c/customer\\u003e\", \"/customer/name\")\n</code></pre> <pre><code>select bigfunctions.us.xml_extract(\"\\u003ccustomer\\u003e\\u003cname\\u003eJohn Doe\\u003c/name\\u003e\\u003c/customer\\u003e\", \"/customer/name\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml_extract(\"\\u003ccustomer\\u003e\\u003cname\\u003eJohn Doe\\u003c/name\\u003e\\u003c/customer\\u003e\", \"/customer/name\")\n</code></pre> <pre>\n<code>+-----------------+\n| extracted_value |\n+-----------------+\n| [\"John Doe\"]    |\n+-----------------+\n</code>\n</pre> <p>2. Multiple elements for the xpath</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml_extract(\"\\u003ccustomer\\u003e\\u003cname\\u003eJohn Doe\\u003c/name\\u003e\\u003cname\\u003eJane Doe\\u003c/name\\u003e\\u003c/customer\\u003e\", \"/customer/name\")\n</code></pre> <pre><code>select bigfunctions.us.xml_extract(\"\\u003ccustomer\\u003e\\u003cname\\u003eJohn Doe\\u003c/name\\u003e\\u003cname\\u003eJane Doe\\u003c/name\\u003e\\u003c/customer\\u003e\", \"/customer/name\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml_extract(\"\\u003ccustomer\\u003e\\u003cname\\u003eJohn Doe\\u003c/name\\u003e\\u003cname\\u003eJane Doe\\u003c/name\\u003e\\u003c/customer\\u003e\", \"/customer/name\")\n</code></pre> <pre>\n<code>+--------------------------+\n| extracted_value          |\n+--------------------------+\n| [\"John Doe\", \"Jane Doe\"] |\n+--------------------------+\n</code>\n</pre> <p>3. Incorrect xpath</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml_extract(\"\\u003ccustomer\\u003e\\u003cname\\u003eJohn Doe\\u003c/name\\u003e\\u003c/customer\\u003e\", \"/customer/na\")\n</code></pre> <pre><code>select bigfunctions.us.xml_extract(\"\\u003ccustomer\\u003e\\u003cname\\u003eJohn Doe\\u003c/name\\u003e\\u003c/customer\\u003e\", \"/customer/na\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml_extract(\"\\u003ccustomer\\u003e\\u003cname\\u003eJohn Doe\\u003c/name\\u003e\\u003c/customer\\u003e\", \"/customer/na\")\n</code></pre> <pre>\n<code>+-----------------+\n| extracted_value |\n+-----------------+\n| null            |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/xml_extract/#use-cases","title":"Use cases","text":"<p>Let's say you have a BigQuery table called <code>product_catalog</code> that stores product information, including an XML description field. The XML data might look like this:</p> <pre><code>&lt;product&gt;\n  &lt;name&gt;Awesome Gadget&lt;/name&gt;\n  &lt;features&gt;\n    &lt;feature&gt;Long battery life&lt;/feature&gt;\n    &lt;feature&gt;Waterproof&lt;/feature&gt;\n  &lt;/features&gt;\n  &lt;price currency=\"USD\"&gt;99.99&lt;/price&gt;\n&lt;/product&gt;\n</code></pre> <p>Use Case 1: Extracting Feature List</p> <p>You want to analyze the most common product features. You can use <code>xml_extract</code> to pull out all the features into an array:</p> <pre><code>SELECT\n    product_id,\n    bigfunctions.us.xml_extract(xml_description, '/product/features/feature') AS features\n  FROM\n    product_catalog;\n</code></pre> <p>This query would return a table with <code>product_id</code> and a <code>features</code> column containing an array of strings, like <code>[\"Long battery life\", \"Waterproof\"]</code>. You can then unnest this array for further analysis.</p> <p>Use Case 2: Finding Products within a Price Range</p> <p>You want to find all products priced between $50 and $100. You can use <code>xml_extract</code> to extract the price and then filter based on its value:</p> <pre><code>SELECT\n    product_id,\n    CAST(bigfunctions.us.xml_extract(xml_description, '/product/price')[OFFSET(0)] AS BIGNUMERIC) AS price\n  FROM\n    product_catalog\n  WHERE CAST(bigfunctions.us.xml_extract(xml_description, '/product/price')[OFFSET(0)] AS BIGNUMERIC) BETWEEN 50 AND 100;\n</code></pre> <p>This query extracts the price, casts it to a numeric type (important!), and then filters the results.  The <code>[OFFSET(0)]</code> is used since <code>xml_extract</code> returns an array, even for single elements.</p> <p>Use Case 3:  Checking for a Specific Feature</p> <p>You want to find all products that have the \"Waterproof\" feature.</p> <pre><code>SELECT\n    product_id\n  FROM\n    product_catalog\n  WHERE 'Waterproof' IN (\n    SELECT feature FROM UNNEST(bigfunctions.us.xml_extract(xml_description, '/product/features/feature')) AS feature\n  );\n</code></pre> <p>This query uses <code>UNNEST</code> to turn the array of features into individual rows and then filters based on the presence of \"Waterproof\".</p> <p>These are just a few examples.  The key takeaway is that <code>xml_extract</code> allows you to query and analyze data embedded within XML structures stored in your BigQuery tables without needing complex string manipulation or external tools.  This makes working with XML data in BigQuery significantly easier. Remember to replace <code>bigfunctions.us</code> with the appropriate dataset for your BigQuery region.</p> Need help or Found a bug? Get help using <code>xml_extract</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>xml_extract</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/z_scores/","title":"z_scores","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/z_scores/#z_scores","title":"z_scores","text":"<pre><code>z_scores(arr)\n</code></pre>"},{"location":"bigfunctions/z_scores/#description","title":"Description","text":"<p>Compute <code>z_scores</code> for each value of <code>arr</code> array.</p> <p>The Z-Score is the number of standard deviations by which the value is above or below the mean value.</p>"},{"location":"bigfunctions/z_scores/#usage","title":"Usage","text":"Call or Deploy <code>z_scores</code> ? Call <code>z_scores</code> directly <p>The easiest way to use bigfunctions</p> <ul> <li><code>z_scores</code> function is deployed in 39 public datasets for all of the 39 BigQuery regions.</li> <li>It can be called by anyone. Just copy / paste examples below in your BigQuery console. It just works!</li> <li>(You need to use the dataset in the same region as your datasets otherwise you may have a function not found error)</li> </ul> <p>Public BigFunctions Datasets</p> Region Dataset <code>eu</code> <code>bigfunctions.eu</code> <code>us</code> <code>bigfunctions.us</code> <code>europe-west1</code> <code>bigfunctions.europe_west1</code> <code>asia-east1</code> <code>bigfunctions.asia_east1</code> ... ... Deploy <code>z_scores</code> in your project <p>Why deploy?</p> <ul> <li>You may prefer to deploy <code>z_scores</code> in your own project to build and manage your own catalog of functions.</li> <li>This is particularly useful if you want to create private functions (for example calling your internal APIs).</li> <li>Get started by reading the framework page </li> </ul> <p>Deployment</p> <p><code>z_scores</code> function can be deployed with:</p> <pre><code>pip install bigfunctions\nbigfun get z_scores\nbigfun deploy z_scores\n</code></pre>"},{"location":"bigfunctions/z_scores/#examples","title":"Examples","text":"EUUSeurope-west1 <pre><code>select bigfunctions.eu.z_scores([1, 2, 3, 4, 5])\n</code></pre> <pre><code>select bigfunctions.us.z_scores([1, 2, 3, 4, 5])\n</code></pre> <pre><code>select bigfunctions.europe_west1.z_scores([1, 2, 3, 4, 5])\n</code></pre> <pre>\n<code>+-----------------------------------+\n| z_scores                          |\n+-----------------------------------+\n| [-1.414, -0.707, 0, 0.707, 1.414] |\n+-----------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/z_scores/#use-cases","title":"Use cases","text":"<p>A use case for the <code>z_scores</code> function is to identify outliers in a dataset.  Let's imagine you have a table of website session durations in seconds:</p> <pre><code>CREATE OR REPLACE TABLE `your_project.your_dataset.session_durations` AS\nSELECT * FROM UNNEST([\n    10, 25, 30, 35, 40, 45, 50, 55, 60, 300, 65, 70, 75, 80, 85\n]) AS session_duration;\n</code></pre> <p>You suspect that the session duration of 300 seconds is an outlier.  You can use <code>z_scores</code> to confirm this:</p> <pre><code>SELECT\n    session_duration,\n    bigfunctions.your_region.z_scores(ARRAY_AGG(session_duration) OVER ()) as z_score\n  FROM\n    `your_project.your_dataset.session_durations`;\n</code></pre> <p>Replace <code>your_region</code> with your BigQuery region (e.g., <code>us</code>, <code>eu</code>, <code>us_central1</code>).</p> <p>This query will calculate the z-score for each session duration.  The session with a duration of 300 seconds will likely have a z-score significantly higher than other sessions (above 2 or 3, depending on your data distribution), indicating it's an outlier.  You could then filter based on the z-score to identify and potentially remove or further investigate these outlier sessions.</p> <p>Other use cases include:</p> <ul> <li>Standardizing data:  Transforming data to have a mean of 0 and a standard deviation of 1, useful for comparing variables measured on different scales.</li> <li>Anomaly detection: Similar to outlier detection, but in a time-series context, identifying unusual fluctuations in metrics.</li> <li>Machine learning preprocessing:  Many machine learning algorithms benefit from standardized input data.</li> <li>Ranking and scoring:  Z-scores can provide a relative ranking of items based on their performance compared to the average.  For example, ranking students based on their test scores.</li> </ul> <p>Remember to choose the correct BigQuery region for the <code>bigfunctions</code> dataset based on where your data resides.</p> Need help or Found a bug? Get help using <code>z_scores</code> <p>The community can help! Engage the conversation on Slack</p> <p>We also provide professional suppport.</p> Report a bug about <code>z_scores</code> <p>If the function does not work as expected, please</p> <ul> <li>report a bug so that it can be improved.</li> <li>or open the discussion with the community on Slack.</li> </ul> <p>We also provide professional suppport.</p> <p>Show your  by adding a  on  </p>"},{"location":"bigfunctions/load/generate/","title":"Generate","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>generate</li> </ul>"},{"location":"bigfunctions/load/generate/#generate","title":"Generate","text":"<ul> <li><code>faker</code>: Generates fake data</li> </ul>"},{"location":"bigfunctions/load/public_services/","title":"\u2602\ufe0f Public Services","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>public_services</li> </ul>"},{"location":"bigfunctions/load/public_services/#public-services","title":"\u2602\ufe0f Public Services","text":"<ul> <li><code>exchange_rate</code>: Get <code>exchange_rate</code></li> <li><code>get_appstore_reviews</code>: GET Apple App Store Reviews of an app</li> <li><code>get_github_data</code>: Get data from <code>public_repo</code> into <code>destination_dataset</code></li> <li><code>get_meteo</code>: Get <code>meteo</code></li> <li><code>get_playstore_reviews</code>: GET Google Play Store Reviews of an app</li> <li><code>get_transport_emissions</code>: Get the transport CO2 emissions given the <code>distance_km</code></li> <li><code>list_public_datasets</code>: Returns list of BigQuery <code>public_datasets</code></li> <li><code>load_google_trends</code>: Load daily Google Trends</li> </ul>"},{"location":"bigfunctions/load/saas/","title":"\u2601\ufe0f SAAS Data","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>saas</li> </ul>"},{"location":"bigfunctions/load/saas/#saas-data","title":"\u2601\ufe0f SAAS Data","text":"<ul> <li><code>get_json</code>: GET json <code>data</code> from <code>url</code></li> <li><code>load_pinterest_report</code>: Download Daily Pinterest Custom Report</li> <li><code>load_pinterest_report_into_temp_dataset</code>: Download Pinterest Custom Report</li> <li><code>load_saas_data</code>: Load SAAS data from 250+ sources using the Python Connectors of Airbyte</li> </ul>"},{"location":"bigfunctions/load/web/","title":"\ud83c\udf0e Web Data","text":"<ul> <li>bigfunctions\u276f</li> <li>load\u276f</li> <li>web</li> </ul>"},{"location":"bigfunctions/load/web/#web-data","title":"\ud83c\udf0e Web Data","text":"<ul> <li><code>get</code>: Request <code>url</code></li> <li><code>get_data_from_apify</code>: Get data using an apify <code>actor</code>.</li> <li><code>get_webpage_data</code>: Extract <code>data</code> from <code>url</code> using <code>prompt</code></li> <li><code>get_webpage_metadata</code>: Get webpage metadata</li> <li><code>get_webpage_structured_data</code>: Get webpage Structured Data</li> <li><code>load_duckdb_database</code>: Download duckdb database into <code>destination_dataset</code></li> <li><code>load_file</code>: Download web file into <code>destination_table</code></li> </ul>"},{"location":"bigfunctions/take_actions/","title":"\ud83d\ude80 Take Actions","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions</li> </ul>"},{"location":"bigfunctions/take_actions/#take-actions","title":"\ud83d\ude80 Take Actions","text":""},{"location":"bigfunctions/take_actions/#function-categories","title":"Function Categories","text":"<ol> <li>\ud83d\udca8 Trigger Event</li> <li>Unytics</li> <li>\ud83d\ude80 Export</li> <li>\ud83d\udcac Notify</li> </ol>"},{"location":"bigfunctions/take_actions/#trigger-event-3-functions","title":"\ud83d\udca8 Trigger Event (3 functions)","text":"<ul> <li><code>refresh_powerbi</code>: Refresh a Power BI dataset (semantic model)</li> <li><code>refresh_tableau</code>: Refresh a tableau datasource or workbook</li> <li><code>trigger_dataform</code>: Triggers a Dataform workflow in the specified project, location, repository and workspace.</li> </ul>"},{"location":"bigfunctions/take_actions/#unytics-3-functions","title":"Unytics (3 functions)","text":"<ul> <li><code>_export_table_to_unytics</code>: Creates a temp dataset in <code>bigfunctions</code> project</li> <li><code>create_temp_dataset</code>: Creates a temp dataset in <code>bigfunctions</code> project</li> <li><code>export_table_to_unytics</code>: Creates a temp dataset in <code>bigfunctions</code> project</li> </ul>"},{"location":"bigfunctions/take_actions/#export-7-functions","title":"\ud83d\ude80 Export (7 functions)","text":"<ul> <li><code>export_table_to_datastore</code>: Export <code>fully_qualified_table</code> to datastore</li> <li><code>export_to_datastore</code>: Exports <code>data</code> to Datastore</li> <li><code>export_to_pubsub</code>: Exports <code>data</code> and <code>attributes</code> to Pub/Sub <code>topic</code>.</li> <li><code>export_to_storage</code>: Exports <code>content</code> to Cloud Storage</li> <li><code>post</code>: POST <code>data</code> to <code>url</code>.</li> <li><code>upload_table_to_gsheet</code>: Upload data from <code>table_or_view_or_query</code> to Google Sheet</li> <li><code>upload_to_gsheet</code>: Upload <code>data</code> (a json array of objects) to a Google Sheet</li> </ul>"},{"location":"bigfunctions/take_actions/#notify-9-functions","title":"\ud83d\udcac Notify (9 functions)","text":"<ul> <li><code>send_google_chat_message</code>: Sends <code>message</code> to google chat space</li> <li><code>send_mail</code>: Sends an email</li> <li><code>send_mail_with_excel</code>: Sends an email with <code>table_or_view_or_query</code> data attached as excel file</li> <li><code>send_mail_with_gmail</code>: Sends an email using your gmail account</li> <li><code>send_slack_message</code>: Sends <code>message</code> to a slack channel.</li> <li><code>send_sms</code>: Sends <code>message</code> via SMS to <code>phone_number</code></li> <li><code>send_teams_adaptive_card</code>: Sends <code>Adaptive Card</code> to a Microsoft Teams channel.</li> <li><code>send_teams_message</code>: Sends <code>message</code> to a Microsoft Teams channel.</li> </ul>"},{"location":"bigfunctions/take_actions/export/","title":"\ud83d\ude80 Export","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>export</li> </ul>"},{"location":"bigfunctions/take_actions/export/#export","title":"\ud83d\ude80 Export","text":"<ul> <li><code>export_table_to_datastore</code>: Export <code>fully_qualified_table</code> to datastore</li> <li><code>export_to_datastore</code>: Exports <code>data</code> to Datastore</li> <li><code>export_to_pubsub</code>: Exports <code>data</code> and <code>attributes</code> to Pub/Sub <code>topic</code>.</li> <li><code>export_to_storage</code>: Exports <code>content</code> to Cloud Storage</li> <li><code>post</code>: POST <code>data</code> to <code>url</code>.</li> <li><code>upload_table_to_gsheet</code>: Upload data from <code>table_or_view_or_query</code> to Google Sheet</li> <li><code>upload_to_gsheet</code>: Upload <code>data</code> (a json array of objects) to a Google Sheet</li> </ul>"},{"location":"bigfunctions/take_actions/notify/","title":"\ud83d\udcac Notify","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>notify</li> </ul>"},{"location":"bigfunctions/take_actions/notify/#notify","title":"\ud83d\udcac Notify","text":"<ul> <li><code>send_google_chat_message</code>: Sends <code>message</code> to google chat space</li> <li><code>send_mail</code>: Sends an email</li> <li><code>send_mail_with_excel</code>: Sends an email with <code>table_or_view_or_query</code> data attached as excel file</li> <li><code>send_mail_with_gmail</code>: Sends an email using your gmail account</li> <li><code>send_slack_message</code>: Sends <code>message</code> to a slack channel.</li> <li><code>send_sms</code>: Sends <code>message</code> via SMS to <code>phone_number</code></li> <li><code>send_teams_adaptive_card</code>: Sends <code>Adaptive Card</code> to a Microsoft Teams channel.</li> <li><code>send_teams_message</code>: Sends <code>message</code> to a Microsoft Teams channel.</li> </ul>"},{"location":"bigfunctions/take_actions/trigger_event/","title":"\ud83d\udca8 Trigger Event","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>trigger_event</li> </ul>"},{"location":"bigfunctions/take_actions/trigger_event/#trigger-event","title":"\ud83d\udca8 Trigger Event","text":"<ul> <li><code>refresh_powerbi</code>: Refresh a Power BI dataset (semantic model)</li> <li><code>refresh_tableau</code>: Refresh a tableau datasource or workbook</li> <li><code>trigger_dataform</code>: Triggers a Dataform workflow in the specified project, location, repository and workspace.</li> </ul>"},{"location":"bigfunctions/take_actions/unytics/","title":"Unytics","text":"<ul> <li>bigfunctions\u276f</li> <li>take_actions\u276f</li> <li>unytics</li> </ul>"},{"location":"bigfunctions/take_actions/unytics/#unytics","title":"Unytics","text":"<ul> <li><code>_export_table_to_unytics</code>: Creates a temp dataset in <code>bigfunctions</code> project</li> <li><code>create_temp_dataset</code>: Creates a temp dataset in <code>bigfunctions</code> project</li> <li><code>export_table_to_unytics</code>: Creates a temp dataset in <code>bigfunctions</code> project</li> </ul>"},{"location":"bigfunctions/transform/ai/","title":"\ud83e\udde0 AI","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ai</li> </ul>"},{"location":"bigfunctions/transform/ai/#ai","title":"\ud83e\udde0 AI","text":"<ul> <li><code>ask_ai</code>: Ask Anything!</li> <li><code>ask_appstore_reviews</code>: Ask AI what your app users think.</li> <li><code>ask_my_data</code>: Ask your data any <code>question</code> in natural language.</li> <li><code>categorize</code>: Categorize <code>items</code> in categories and subcategories.</li> <li><code>generate_categories</code>: Return <code>categories</code> of <code>items</code>.</li> <li><code>generate_face_embedding</code>: Detect Face on image and Generate its Embedding</li> <li><code>generate_sql</code>: Transform <code>question</code> to a SQL query.</li> </ul>"},{"location":"bigfunctions/transform/convert_data_format/","title":"\ud83d\udd28 Convert Data Format","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>convert_data_format</li> </ul>"},{"location":"bigfunctions/transform/convert_data_format/#convert-data-format","title":"\ud83d\udd28 Convert Data Format","text":"<ul> <li><code>html2pdf</code>: Convert <code>html</code> to <code>pdf</code></li> <li><code>json2excel</code>: Dump data to excel file</li> <li><code>json2xml</code>: Returns XML for given JSON string</li> <li><code>markdown2html</code>: Convert <code>markdown</code> to <code>html</code></li> <li><code>xml2json</code>: Returns JSON as a string for given XML string</li> </ul>"},{"location":"bigfunctions/transform/ga4/","title":"\ud83d\udcf6 GA4","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>ga4</li> </ul>"},{"location":"bigfunctions/transform/ga4/#ga4","title":"\ud83d\udcf6 GA4","text":"<ul> <li><code>create_ga4_views</code>: Create views to help querying GA4 Data</li> </ul>"},{"location":"bigfunctions/transform/graph/","title":"\ud83c\udf10 Graph","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>graph</li> </ul>"},{"location":"bigfunctions/transform/graph/#graph","title":"\ud83c\udf10 Graph","text":"<ul> <li><code>connected_components</code>: Compute the connected components of a non-directed graph.</li> </ul>"},{"location":"bigfunctions/transform/machine_learning/","title":"\ud83e\udde0 Machine Learning","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>machine_learning</li> </ul>"},{"location":"bigfunctions/transform/machine_learning/#machine-learning","title":"\ud83e\udde0 Machine Learning","text":"<ul> <li><code>precision_recall_auc</code>: Returns the Area Under the Precision Recall Curve (a.k.a. AUC PR)</li> <li><code>precision_recall_curve</code>: Returns the Precision-Recall Curve</li> <li><code>prophet</code>: Return Time Series Forecast as json using prophet</li> <li><code>prophet_table</code>: Return Time Series Forecast as table using prophet</li> <li><code>roc_auc</code>: Returns the Area Under the Receiver Operating Characteristic Curve (a.k.a. ROC AUC)</li> <li><code>roc_curve</code>: Returns the Receiver Operating Characteristic Curve (a.k.a. ROC Curve)</li> <li><code>sentiment_score</code>: Compute sentiment score of <code>content</code></li> </ul>"},{"location":"bigfunctions/transform/transform_array/","title":"[...] Transform Array","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_array</li> </ul>"},{"location":"bigfunctions/transform/transform_array/#transform-array","title":"[...] Transform Array","text":"<ul> <li><code>are_arrays_equal</code>: Return true if <code>array1</code> = <code>array2</code></li> <li><code>array_contains</code>: Returns <code>true</code> if <code>value</code> is in array <code>arr</code> else returns <code>false</code></li> <li><code>array_intersect</code>: Returns the intersection of two arrays.</li> <li><code>array_union</code>: Returns the union of two arrays.</li> <li><code>benford_distance</code>: Calculate the distance from Benford's Law for given <code>values</code>.</li> <li><code>distinct_values</code>: Return distinct values</li> <li><code>find_greater_value</code>: Return the <code>offset</code> (zero-based index) of the first <code>value</code> in <code>arr</code> where <code>value &gt;= x</code></li> <li><code>find_lower_value</code>: Return the <code>offset</code> (zero-based index) of the first <code>value</code> in <code>arr</code> where <code>value &lt;= x</code></li> <li><code>find_value</code>: Return the first <code>offset</code> (zero-based index) of <code>value</code> in array <code>arr</code></li> <li><code>frequent_values</code>: Returns <code>frequent_values</code> among array of <code>values</code></li> <li><code>get_value</code>: Return the first <code>value</code> with a key <code>search_key</code> from <code>key_value_items</code></li> <li><code>last_value</code>: Return last value of array</li> <li><code>max_value</code>: Return max value of array</li> <li><code>median_value</code>: Return median value of array</li> <li><code>min_max_scaler</code>: Performs min-max scaling on an array.</li> <li><code>min_value</code>: Return min value of array</li> <li><code>percentile_value</code>: Returns percentile of an array with percentile a float in range [0, 1].</li> <li><code>rare_values</code>: Returns <code>rare_values</code> among array of <code>values</code></li> <li><code>remove_value</code>: Return an array with all values except <code>value</code>.</li> <li><code>sort_values</code>: Return sorted array (ascending)</li> <li><code>sort_values_desc</code>: Return sorted array (descending)</li> <li><code>sum_values</code>: Return the sum of array values</li> <li><code>z_scores</code>: Compute <code>z_scores</code></li> </ul>"},{"location":"bigfunctions/transform/transform_date/","title":"\ud83d\udcc6 Transform Date","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_date</li> </ul>"},{"location":"bigfunctions/transform/transform_date/#transform-date","title":"\ud83d\udcc6 Transform Date","text":"<ul> <li><code>date_sub_isoyear</code>: Returns same day <code>years</code> before</li> <li><code>generate_dates</code>: Generate a table of dates</li> <li><code>gregorian2hijri</code>: Convert Gregorian Date to Hijri Date (taken from here)</li> <li><code>is_public_holiday</code>: Return true if <code>date</code> corresponds to a public holiday in <code>country_code</code></li> <li><code>parse_date</code>: Parse date with automatic format detection</li> <li><code>translated_month_name</code>: Get <code>translated_month_name</code></li> <li><code>translated_weekday_name</code>: Get <code>translated_weekday_name</code></li> </ul>"},{"location":"bigfunctions/transform/transform_geo_data/","title":"\ud83c\udf10 Transform Geo Data","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_geo_data</li> </ul>"},{"location":"bigfunctions/transform/transform_geo_data/#transform-geo-data","title":"\ud83c\udf10 Transform Geo Data","text":"<ul> <li><code>geocode</code>: Get <code>address</code> details from Google Maps</li> <li><code>geocode_fr</code>: Get <code>address</code> details from api-adresse.data.gouv.fr</li> <li><code>h3</code>: Wrapper around Uber H3</li> <li><code>reverse_geocode</code>: Get address details at <code>latitude</code>, <code>longitude</code></li> <li><code>validate_address</code>: Validate <code>address</code> using Google Maps</li> </ul>"},{"location":"bigfunctions/transform/transform_ip/","title":"Transform Ip","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_ip</li> </ul>"},{"location":"bigfunctions/transform/transform_ip/#transform-ip","title":"Transform Ip","text":"<ul> <li><code>ip2asn</code>: Get <code>asn</code> of <code>ip</code></li> <li><code>ip2continent</code>: Get <code>continent_code</code> of <code>ip</code></li> <li><code>ip2continent_name</code>: Get <code>continent</code> of <code>ip</code></li> <li><code>ip2country</code>: Get <code>country_code</code> of <code>ip</code></li> <li><code>ip2country_name</code>: Get <code>country_name</code> of <code>ip</code></li> <li><code>ip_range2ip_networks</code>: Convert an IP range into a json list of IP networks in CIDR notation</li> </ul>"},{"location":"bigfunctions/transform/transform_json/","title":"{...} Transform Json","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_json</li> </ul>"},{"location":"bigfunctions/transform/transform_json/#transform-json","title":"{...} Transform Json","text":"<ul> <li><code>create_materialized_view_w_flattened_json_column</code>: Create a Materialized view of a table with <code>json_column</code> flattened</li> <li><code>items2json</code>: Returns <code>json</code> object from array of <code>key_value_items</code></li> <li><code>json_column_schema</code>: Returns the schema of a json column</li> <li><code>json_items</code>: Extract <code>key_value_items</code> from <code>json_string</code></li> <li><code>json_keys</code>: Extract <code>keys</code> from <code>json_string</code></li> <li><code>json_merge</code>: Merge <code>json_string1</code> and <code>json_string2</code></li> <li><code>json_query</code>: Extract data from <code>json_string</code> using advanced json querying</li> <li><code>json_schema</code>: Returns the schema of <code>data</code></li> <li><code>json_values</code>: Extract <code>values</code> from <code>json_string</code></li> <li><code>sql_to_flatten_json_column</code>: Generate the SQL to flatten a json <code>column</code></li> </ul>"},{"location":"bigfunctions/transform/transform_numeric/","title":"1\ufe0f\u20e3 Transform Numeric","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_numeric</li> </ul>"},{"location":"bigfunctions/transform/transform_numeric/#1-transform-numeric","title":"1\ufe0f\u20e3 Transform Numeric","text":"<ul> <li><code>compute_linear_regression_coefficients</code>: Returns linear regression coefficients from <code>x</code>, <code>y</code> columns.</li> <li><code>format_percentage</code>: Return <code>first_number / second_number</code> as a formatted percentage</li> <li><code>nps</code>: Returns the NPS (Net Promoter Score)</li> <li><code>quantize_into_bins</code>: Get the <code>bin_range</code> in which belongs <code>value</code></li> <li><code>quantize_into_bins_with_labels</code>: Get the <code>label</code> of the bin in which belongs <code>value</code></li> <li><code>quantize_into_fixed_width_bins</code>: Get the <code>bin_range</code> in which belongs <code>value</code></li> <li><code>weighted_average</code>: Returns the weigthed average elements.</li> </ul>"},{"location":"bigfunctions/transform/transform_string/","title":"\u2728 Transform String","text":"<ul> <li>bigfunctions\u276f</li> <li>transform\u276f</li> <li>transform_string</li> </ul>"},{"location":"bigfunctions/transform/transform_string/#transform-string","title":"\u2728 Transform String","text":"<ul> <li><code>camel2snake</code>: Convert <code>string</code> from camelCase to snake_case</li> <li><code>convert_non_ascii_characters_to_unicode_escape_sequences</code>: Replace all non ASCII characters with escape unicode</li> <li><code>deidentify</code>: Masks sensitive information of type <code>info_types</code> in <code>text</code></li> <li><code>detect_language</code>: Detects <code>text</code> language</li> <li><code>detect_sensitive_info</code>: Detect sensitive information in <code>text</code></li> <li><code>is_email_valid</code>: Return true if <code>email</code> is valid</li> <li><code>is_phone_number_valid</code>: Return if <code>phone_number</code> is valid</li> <li><code>ngram_frequency_similarity</code>: Calculates n-gram similarity between two strings</li> <li><code>parse_url</code>: Return <code>url</code> parts</li> <li><code>parse_user_agent</code>: Parses User Agent strings into several components</li> <li><code>phone_number_info</code>: Get <code>phone_number</code> info</li> <li><code>remove_accents</code>: Remove accents</li> <li><code>remove_extra_whitespaces</code>: Remove unwanted whitespaces</li> <li><code>remove_strings</code>: Remove any string of <code>strings_to_remove</code> from <code>string</code></li> <li><code>remove_words</code>: Remove any word of <code>words_to_remove</code> from <code>string</code></li> <li><code>render_handlebars_template</code>: Render template with context using handlebars.js templating library</li> <li><code>render_template</code>: Render template with context using nunjucks.js templating library</li> <li><code>replace_special_characters</code>: Replace most common special characters in a <code>string</code> with <code>replacement</code></li> <li><code>translate</code>: Translate <code>text</code> into <code>target_language</code></li> <li><code>url_decode</code>: Decode <code>url_encoded_string</code></li> <li><code>xml_extract</code>: Returns content extracted from XML from given XPATH</li> </ul>"},{"location":"bigfunctions/utils/","title":"\ud83d\udd28 Utils","text":"<ul> <li>bigfunctions\u276f</li> <li>utils</li> </ul>"},{"location":"bigfunctions/utils/#utils","title":"\ud83d\udd28 Utils","text":"<ul> <li><code>deduplicate_rows</code>: Returns the deduplicated rows of <code>query_or_table_or_view</code></li> <li><code>delete_empty_datasets</code>: Delete empty datasets in <code>project</code></li> <li><code>get_daily_jobs_cost</code>: Get daily jobs cost</li> <li><code>get_latest_partition_timestamp</code>: Return the maximum of the partition column of <code>fully_qualified_table</code></li> <li><code>get_table_columns</code>: Get the column information of the given table from <code>INFORMATION_SCHEMA.COLUMNS</code></li> <li><code>get_view_history</code>: Get BigQuery View history</li> <li><code>list_scheduled_queries</code>: Returns<code>scheduled_queries</code> of project <code>project</code>.</li> <li><code>run_python</code>: Run any <code>python_code</code>.</li> <li><code>sleep</code>: Sleep during <code>seconds</code> seconds</li> <li><code>timestamp_from_unix_date_time</code>: Interprets <code>unix_date_time</code> as the number of <code>date_time_part</code> since <code>1970-01-01 00:00:00 UTC</code>.</li> <li><code>timestamp_to_unix_date_time</code>: Returns the number of <code>date_time_part</code> since <code>1970-01-01 00:00:00 UTC</code>.</li> <li><code>upsert</code>: Merges <code>query_or_table_or_view</code> into the <code>destination_table</code>.</li> </ul>"},{"location":"blog/reddit/","title":"Introducing BigFunctions: open-source superpowers for BigQuery","text":"<p>Hey r/dataengineering!</p> <p>I'm excited to introduce BigFunctions, an open-source project designed to supercharge your BigQuery data-warehouse and empower your data analysts!</p> <p>After 2 years building it, I just wrote our first article to announce it.</p>"},{"location":"blog/reddit/#what-is-bigfunctions","title":"What is BigFunctions?","text":"<p>Inspired by the growing \"SQL Data Stack\" movement, BigFunctions is a framework that lets you:</p> <ul> <li>Build a Governed Catalog of Functions: Think dbt, but for creating and managing reusable functions directly within BigQuery.</li> <li>Empower Data Analysts: Give them a self-service catalog of functions to handle everything from data loading to complex transformations and action taking-- all from SQL!</li> <li>Simplify Your Data Stack: Replace messy Python scripts and a multitude of tools with clean, scalable SQL queries.</li> </ul>"},{"location":"blog/reddit/#the-problem-were-solving","title":"The Problem We're Solving","text":"<p>The modern data stack can get complicated. Lots of tools, lots of custom scripts...it's a management headache. We believe the future is a simplified stack where SQL (and the data warehouse) does it all.</p> <p>Here are some benefits:</p> <ul> <li>Simplify the stack by replacing a multitude of custom tools to one.</li> <li>Enable data-analysts to do more, directly from SQL.</li> </ul>"},{"location":"blog/reddit/#how-it-works","title":"How it Works","text":"<ul> <li>YAML-Based Configuration: Define your functions using simple YAML, just like dbt uses for transformations.</li> <li>CLI for Testing &amp; Deployment: Test and deploy your functions with ease using our command-line interface.</li> <li>Community-Driven Function Library: Access a growing library of over 120 functions contributed by the community.</li> </ul> <p>Deploy them with a single command!</p>"},{"location":"blog/reddit/#example","title":"Example:","text":"<p>Imagine this:</p> <ol> <li>Load Data: Use a BigFunction to ingest data from any URL directly into BigQuery.</li> <li>Transform: Run time series forecasting with a Prophet BigFunction.</li> <li>Activate: Automatically send sales predictions to a Slack channel using a BigFunction that integrates with the Slack API.</li> </ol> <p>All in SQL. No more jumping between different tools and languages.</p>"},{"location":"blog/reddit/#why-we-built-this","title":"Why We Built This","text":"<p>As Head of Data at Nickel, I saw the need for a better way to empower our 25 data analysts.</p> <p>Thanks to SQL and configuration, our data-analysts at Nickel send 100M+ communications to customers every year, personalize content on mobile app based on customer behavior and call internal APIs to take actions based on machine learning scoring.</p> <p>I built BigFunctions 2 years ago as an open-source project to benefit the entire community. So that any team can empower its SQL users.</p> <p>Today, I think it has been used in production long enough to announce it publicly. Hence this first article on medium.</p> <p>The road is not finished; we still have a lot to do. Stay tuned for the journey.</p> <p>Stay connected and follow us on GitHub, Slack or Linkedin.</p>"}]}