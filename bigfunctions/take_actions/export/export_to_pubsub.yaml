type: function_py
author: Valentin Cordonnier
description: |
  Exports `data` and `attributes` to Pub/Sub `topic`.

  > ðŸ’¡ For this to work, `749389685934-compute@developer.gserviceaccount.com` must have publish permission on your topic.
arguments:
  - name: project
    type: string
  - name: topic
    type: string
  - name: data
    type: string
  - name: attributes
    type: json
output:
  name: published_message_id
  type: int64
examples:
  - description: ""
    arguments:
      - "'your-project'"
      - "'your_topic'"
      - "'Your message data'"
      - "'{\"attribute1\": \"value1\", \"attribute2\": \"value2\"}'"
    output: "1123432546"
code_process_rows_as_batch: true
code: |
  import concurrent.futures
  import google.cloud.pubsub_v1
  import google.api_core.exceptions

  publisher = google.cloud.pubsub_v1.PublisherClient()

  try:
    futures = []
    for row in rows:
      project, topic, data, attributes = row
      topic_path = publisher.topic_path(project, topic)
      attributes = attributes or {}
      data = data.encode("utf-8")
      future = publisher.publish(topic_path, data, **attributes)
      futures.append(future)

    concurrent.futures.wait(futures, return_when=concurrent.futures.ALL_COMPLETED)
    return [future.result() for future in futures]

  except google.api_core.exceptions.NotFound:
    assert False, f'Given topic does not exist in given project OR service Account `{get_current_service_account()}` does not have publish permission into that topic'
  except google.api_core.exceptions.PermissionDenied:
    assert False, f'Service Account `{get_current_service_account()}` does not have publish permission into given topic of given project'
requirements:
  google-cloud-pubsub
cloud_run:
  concurrency: 16
quotas:
  max_rows_per_user_per_day: 10000000
