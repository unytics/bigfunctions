type: function_py
author: Guillaume Pivette from Neoxia
description: |
  Sends an email
  to `to` email with `subject`, `content` and possible attachment (defined by `attachment_filename` and `attachment_content`).

  | Param      | Possible values  |
  |------------|------------------|
  | `to     `  | One or multiple comma separated emails.<br>For instance `contact@unytics.io` or `contact@unytics.io, paul.marcombes@unytics.io`   |
  | `subject`  | Email subject |
  | `content`  | Can be plain text, html or **markdown**   |
  | `attachment_filename`  | `null` or filename with extension such as `report.xlsx`  |
  | `attachment_content`  | `null` or can be plain text or base64 encoded content (useful to send excel files, pdf or images)  |

  > This function uses [SendGrid](https://sendgrid.com/) to send the emails and [Lee Munroe HTML template](https://github.com/leemunroe/responsive-html-email-template) for styling emails.
arguments:
  - name: to
    type: string
  - name: subject
    type: string
  - name: content
    type: string
  - name: attachment_filename
    type: string
  - name: attachment_content
    type: string
output:
  name: success
  type: BOOL
examples:
  - description: "Send email without file attached"
    arguments:
      - "'contact@unytics.io'"
      - "'I love BigFunctions'"
      - "'Hey Paul, could you deploy more BigFunctions üôè?'"
      - "null"
      - "null"
    output: "true"
  - description: "Send email with plain text file attached"
    arguments:
      - "'contact@unytics.io'"
      - "'I love BigFunctions'"
      - "'Hey Paul, could you deploy more BigFunctions üôè?'"
      - "'report.csv'"
      - "'col1,col2\\nval1,val2\\nval3,val4'"
    output: "true"
  - description: "Send email with excel file attached"
    arguments:
      - "'contact@unytics.io'"
      - "'I love BigFunctions'"
      - "'Hey Paul, could you deploy more BigFunctions üôè?'"
      - "'report.xlsx'"
      - "(select {BIGFUNCTIONS_DATASET}.json2excel('[{\"col1\": \"val1\", \"col2\": \"val2\"}, {\"col1\": \"val3\", \"col2\": \"val4\"}]'))"
    output: "true"
code: |
  import re
  import base64
  import mimetypes
  import requests
  import markdown
  import css_inline

  if not to:
    return True
  subject = subject or ''
  content = content or ''

  sender = {
      'name': 'BigFunctions',
      'email': 'bigfunctions@unytics.io'
  }
  reply_to = {'email': 'noreply@unytics.io'}


  css = '''
  /* -------------------------------------
      GLOBAL RESETS
  ------------------------------------- */

  /*All the styling goes here*/

  .button {
    background-color: #3367D6;
    border-color: transparent;
    color: #fff;
    border-width: 1px;
    cursor: pointer;
    justify-content: center;
    padding-bottom: calc(0.5em - 1px);
    padding-left: 1em;
    padding-right: 1em;
    padding-top: calc(0.5em - 1px);
    text-align: center;
    white-space: nowrap;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    -webkit-appearance: none;
    align-items: center;
    border: 1px solid transparent;
    border-radius: 0.375em;
    box-shadow: none;
    display: inline-flex;
    font-size: 14px;
    line-height: 1.5;
    position: relative;
    vertical-align: top;
    text-decoration: none;
  }

  .button:hover {
    background-color: #3e56c4;
  }

  img {
    border: none;
    -ms-interpolation-mode: bicubic;
    max-width: 100%;
  }

  body {
    background-color: #f6f6f6;
    font-family: sans-serif;
    -webkit-font-smoothing: antialiased;
    font-size: 14px;
    line-height: 1.4;
    margin: 0;
    padding: 0;
    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
  }

  table {
    border-collapse: separate;
    mso-table-lspace: 0pt;
    mso-table-rspace: 0pt;
    width: 100%; }
    table td {
      font-family: sans-serif;
      font-size: 14px;
      vertical-align: top;
  }

  /* -------------------------------------
      BODY & CONTAINER
  ------------------------------------- */

  .body {
    background-color: #f6f6f6;
    width: 100%;
  }

  /* Set a max-width, and make it display as block so it will automatically stretch to that width, but will also shrink down on a phone or something */
  .container {
    display: block;
    margin: 0 auto !important;
    /* makes it centered */
    max-width: 580px;
    padding: 10px;
    width: 580px;
  }

  /* This should also be a block element, so that it will fill 100% of the .container */
  .content {
    box-sizing: border-box;
    display: block;
    margin: 0 auto;
    max-width: 580px;
    padding: 10px;
  }

  /* -------------------------------------
      HEADER, FOOTER, MAIN
  ------------------------------------- */
  .main {
    background: #ffffff;
    border-radius: 3px;
    width: 100%;
  }

  .wrapper {
    box-sizing: border-box;
    padding: 20px;
  }

  .content-block {
    padding-bottom: 10px;
    padding-top: 10px;
  }

  .footer {
    clear: both;
    margin-top: 10px;
    text-align: center;
    width: 100%;
  }
    .footer td,
    .footer p,
    .footer span,
    .footer a {
      color: #999999;
      font-size: 12px;
      text-align: center;
  }

  /* -------------------------------------
      TYPOGRAPHY
  ------------------------------------- */
  h1,
  h2,
  h3,
  h4 {
    color: #000000;
    font-family: sans-serif;
    font-weight: 400;
    line-height: 1.4;
    margin: 0;
    margin-top: 30px;
  }

  h1 {
    font-size: 35px;
    font-weight: 300;
    text-align: center;
    text-transform: capitalize;
  }

  p,
  ul,
  ol {
    font-family: sans-serif;
    font-size: 14px;
    font-weight: normal;
    margin: 0;
    margin-bottom: 15px;
  }
    p li,
    ul li,
    ol li {
      list-style-position: inside;
      margin-left: 5px;
  }

  a {
    color: #3498db;
    text-decoration: underline;
  }

  /* -------------------------------------
      OTHER STYLES THAT MIGHT BE USEFUL
  ------------------------------------- */
  .last {
    margin-bottom: 0;
  }

  .first {
    margin-top: 0;
  }

  .align-center {
    text-align: center;
  }

  .align-right {
    text-align: right;
  }

  .align-left {
    text-align: left;
  }

  .clear {
    clear: both;
  }

  .mt0 {
    margin-top: 0;
  }

  .mb0 {
    margin-bottom: 0;
  }

  .powered-by a {
    text-decoration: none;
  }

  hr {
    border: 0;
    border-bottom: 1px solid #f6f6f6;
    margin: 20px 0;
  }

  /* -------------------------------------
      RESPONSIVE AND MOBILE FRIENDLY STYLES
  ------------------------------------- */
  @media only screen and (max-width: 620px) {
    table.body h1 {
      font-size: 28px !important;
      margin-bottom: 10px !important;
    }
    table.body p,
    table.body ul,
    table.body ol,
    table.body td,
    table.body span,
    table.body a {
      font-size: 16px !important;
    }
    table.body .wrapper,
    table.body .article {
      padding: 10px !important;
    }
    table.body .content {
      padding: 0 !important;
    }
    table.body .container {
      padding: 0 !important;
      width: 100% !important;
    }
    table.body .main {
      border-left-width: 0 !important;
      border-radius: 0 !important;
      border-right-width: 0 !important;
    }
    table.body .img-responsive {
      height: auto !important;
      max-width: 100% !important;
      width: auto !important;
    }
  }

  /* -------------------------------------
      PRESERVE THESE STYLES IN THE HEAD
  ------------------------------------- */
  @media all {
    .ExternalClass {
      width: 100%;
    }
    .ExternalClass,
    .ExternalClass p,
    .ExternalClass span,
    .ExternalClass font,
    .ExternalClass td,
    .ExternalClass div {
      line-height: 100%;
    }
    .apple-link a {
      color: inherit !important;
      font-family: inherit !important;
      font-size: inherit !important;
      font-weight: inherit !important;
      line-height: inherit !important;
      text-decoration: none !important;
    }
    #MessageViewBody a {
      color: inherit;
      text-decoration: none;
      font-size: inherit;
      font-family: inherit;
      font-weight: inherit;
      line-height: inherit;
    }
  }
  '''


  html_template = '''
  <!doctype html>
  <html>
    <head>
      <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <style>{css}</style>
    </head>
    <body>
      <table role="presentation" border="0" cellpadding="0" cellspacing="0" class="body">
        <tr>
          <td>&nbsp;</td>
          <td class="container">
            <div class="content">

              <!-- START CENTERED WHITE CONTAINER -->
              <table role="presentation" class="main">

                <!-- START MAIN CONTENT AREA -->
                <tr>
                  <td class="wrapper">
                    <table role="presentation" border="0" cellpadding="0" cellspacing="0">
                      <tr>
                        <td>
                          {html}
                        </td>
                      </tr>
                    </table>
                  </td>
                </tr>

              <!-- END MAIN CONTENT AREA -->
              </table>
              <!-- END CENTERED WHITE CONTAINER -->

              <!-- START FOOTER -->
              <div class="footer">
                <table role="presentation" border="0" cellpadding="0" cellspacing="0">
                  <tr>
                    <td class="content-block">
                      <p><a href="https://unytics.io/bigfunctions/"><img src="https://unytics.io/bigfunctions/assets/logo_and_name.png" style="max-width: 50%;"></a></p>
                      <p>Sent by <a href="https://unytics.io/bigfunctions/">BigFunctions</a>:<br>üëâ open-source functions supercharging BigQuery.</p>
                      <p><a href="https://github.com/unytics/bigfunctions">Give a ‚≠ê on GitHub</a>.</em> üôè</p>
                    </td>
                  </tr>
                </table>
              </div>
              <!-- END FOOTER -->

            </div>
          </td>
          <td>&nbsp;</td>
        </tr>
      </table>
    </body>
  </html>
  '''


  def is_string_base64_encoded(string):
      try:
          return base64.b64encode(base64.b64decode(string)) == string.encode()
      except:
          return False


  def check_emails(to):
      to = to.replace(';', ',')
      emails = [email.strip() for email in to.split(',')]
      email_regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'
      for email in emails:
          assert re.fullmatch(email_regex, email), f'email `{email}` is not a valid email'
      return emails


  def format_content(content):
      content = re.sub(r'\n[ \t]+', '\n', content)
      html = markdown.markdown(content, extensions=['tables'])
      html = html_template.format(css=css, html=html)
      return css_inline.inline(html)


  def build_attachment(attachment_filename, attachment_content):
      if attachment_filename is None or attachment_content is None:
          return

      is_b64_encoded = is_string_base64_encoded(attachment_content)
      if not is_b64_encoded:
          b = base64.b64encode(bytes(attachment_content, 'utf-8'))
          attachment_content = b.decode('utf-8')

      attachment_type = mimetypes.guess_type(attachment_filename)[0]
      attachment_type = attachment_type or (
          'application/octet-stream'
          if is_b64_encoded
          else 'text/plain'
      )
      return {
          'content': attachment_content,
          'type': attachment_type,
          'filename': attachment_filename,
      }


  def send_mail(emails, subject, content, attachment):
      url = 'https://api.sendgrid.com/v3/mail/send'
      headers = {
          'Authorization': f'Bearer {sendgrid_api_key}',
          'Content-Type': 'application/json',
      }
      mail = {
          "personalizations": [{"to": [{"email": email} for email in emails]}],
          "from": sender,
          "reply_to": reply_to,
          "subject": subject,
          "content": [{"type": "text/html", "value": content}]
      }
      if attachment:
          mail['attachments'] = [attachment]
      response = requests.post(url, headers=headers, json=mail)
      assert response.ok, 'ERROR: ' + response.text


  emails = check_emails(to)
  content = format_content(content)
  attachment = build_attachment(attachment_filename, attachment_content)
  send_mail(emails, subject, content, attachment)
  return True
requirements: |
  requests
  markdown
  css_inline
secrets:
  - name: sendgrid_api_key
    description: "Sendgrid API Key"
    documentation_link: https://docs.sendgrid.com/for-developers/sending-email/api-getting-started
quotas:
  max_rows_per_user_per_day: 100
