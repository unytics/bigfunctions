type: function_py
author: Paul Marcombes
description: |
  Return `categories` of `items`.

  Using GenAi, this function generates a hierarchy of categories and subcategories that best represents the given `items`.
  (`items`: must be a json array of strings or or objects).

  Result is a json with the following schema:

  ```
  {
    categories: [
      {
        name: string,
        subcategories: [
          string
        ]
      }
    ]
  }
  ```
arguments:
  - name: items
    type: json
output:
  name: categories
  type: json
examples:
  - description: "Categorize User Reviews of Nickel App in App Store"
    arguments:
      - |

        (
          select to_json(array_agg(content))
          from {BIGFUNCTIONS_DATASET}.get_appstore_reviews(
            'https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763'
          )
        )
    output: |
      {
        "categories": [
          {
            "name": "Account Management",
            "subcategories": [
                  "Login Issues",
                  ...
            ]
          },
          ...
        ]
      }
init_code: |
  import json

  import dicttoxml
  import vertexai
  from vertexai.generative_models import GenerationConfig, GenerativeModel, Part, HarmCategory, HarmBlockThreshold, SafetySetting

  MODEL = "gemini-1.5-pro-002"
  PROMPT = '''
  As a data manager you want to organize ITEMS into CATEGORIES and SUBCATEGORIES to improve data discovery in a data catalog.

  Return a hierarchy of CATEGORIES and their SUBCATEGORIES which contain the ITEMS of the file.

  The returned hierarchy will respect the following constraints:
  - Each CATEGORY must have between 2 and 10 SUBCATEGORIES
  - Each SUBCATEGORY must have between 2 and 10 ITEMS
  - Each ITEM must be belong to one SUBCATEGORY.
  - Do not invent any ITEM

  '''

  response_schema = {
    "title": "Categorization of items",
    "description": "Schema of the Categorization Hierarchy of items",
    "type": "object",
    "properties": {
      "categories": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the category",
            },
            "subcategories": {
              "type": "array",
              "description": "Names of the subcategories which contain items",
              "items": {
                "type": "string",
              }
            }
          },
          "required": ["name", "subcategories"]
        }
      }
    },
    "required": ["categories"]
  }

  generation_config=GenerationConfig(
    response_mime_type="application/json",
    response_schema=response_schema
  )

  safety_config = [
      SafetySetting(
          category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold=HarmBlockThreshold.OFF,
      ),
      SafetySetting(
          category=HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold=HarmBlockThreshold.OFF,
      ),
  ]

  def xmlize(item):
    if isinstance(item, str):
      return f'<item>{item}</item>'
    elif isinstance(item, dict):
      return dicttoxml.dicttoxml(item, custom_root='item', attr_type=False, xml_declaration=False).decode('utf-8')
    assert False, 'each item of `items` must be a string or an object'

  vertexai.init(location=CURRENT_LOCATION)
  model = GenerativeModel(MODEL)
code: |
  if not items:
    return {}

  assert isinstance(items, list), 'Given `items` must be a json array of strings or objects'
  items_xml = [xmlize(item) for item in items]
  items_xml = '\n\n'.join(items_xml)

  contents = [
      PROMPT,
      Part.from_text(items_xml),
  ]

  response = model.generate_content(
    contents,
    safety_settings=safety_config,
    generation_config=generation_config,
  )

  categories = response.text
  categories = json.loads(categories)
  return categories
requirements: |
  dicttoxml
  google-cloud-aiplatform
quotas:
  max_rows_per_query: 1
  max_rows_per_user_per_day: 100
