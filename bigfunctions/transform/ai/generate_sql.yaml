type: procedure
author: Paul Marcombes
description: |
  Transform `question` to a SQL query.

  >  This function sends the following enriched question to [`ask_ai`](ask_ai.md) (*the schema of `fully_qualified_table` is sent so that the generated SQL query is adapted to your data*):
  >
  >  ```
  >  Question: {{question}}
  >  Table:    {{fully_qualified_table}}
  >  Columns:  {{columns of fully_qualified_table}}
  >  Answer:   bigquery sql query
  >  ```

  | Param  | Description  |
  |---|---|
  | `question`  | A question to ask over your data. It may start with a verb |
  | `fully_qualified_table`  | A table whose schema will be given to the generative AI model for context.<br> - `fully_qualified_table` format must be like `PROJECT.DATASET.TABLE`.<br>  - `fully_qualified_table` must exist.<br>  - You must have read permission on the table schema  |
arguments:
  - name: question
    type: string
  - name: fully_qualified_table
    type: string
examples:
  - description: ""
    arguments:
      - "'get the 3 products which generated the most revenue in 2023'"
      - "'{BIGFUNCTIONS_DATASET}.sales'"
    output: |
      +---------------+-------------------+-------------------------+
      | generated_sql | question          | raw_answer_before_clean |
      +---------------+-------------------+-------------------------+
      + SELECT ...    + Question: get ... | sql``` SELECT...        |
      +---------------+-------------------+-------------------------+
code: |
  assert array_length(split(fully_qualified_table, '.')) = 3 as 'BAD ARGUMENT FORMAT: `fully_qualified_table` argument must follow the pattern `PROJECT.DATASET.TABLE`';

  execute immediate {BIGFUNCTIONS_DATASET}.render_template(
    r'''
    {%- set fully_qualified_table = fully_qualified_table.replace('`', '') -%}
    {%- set table_parts = fully_qualified_table.split('.') -%}
    {%- set dataset = table_parts[0] + '.' + table_parts[1] -%}
    {%- set table = table_parts[2] -%}

    create or replace temp table bigfunction_result as

    with

    columns as (
      select array_to_string(array_agg(column_name), ', ') as cols
      from `{{dataset}}.INFORMATION_SCHEMA.COLUMNS`
      where table_name = '{{table}}'
    ),

    question as (
      select """
        Question: {{question}}
        Table: `{{fully_qualified_table}}`
        Columns: """ || cols || """
        Answer: bigquery sql query
      """ as question
      from columns
      where if(cols is not null, true, error('ERROR: Could not find table `{{table}}` in dataset `{{dataset}}`'))
    ),

    answer as (
      select {BIGFUNCTIONS_DATASET}.ask_ai(question.question, 'code-bison@002') as raw_answer_before_clean
      from question
    ),

    cleaned_answer as (
      select
          regexp_replace(regexp_replace(regexp_replace(
            answer.raw_answer_before_clean
            , '^```sql\n', '')
            , '^```\n', '')
            , '\n```$', '')
          as generated_sql
      from answer
    )

    select
      cleaned_answer.generated_sql,
      question.question,
      answer.raw_answer_before_clean,
    from cleaned_answer, question, answer
    ''',

    to_json(struct(
        regexp_replace(question, r'\n\s*', ' ') as question,
        fully_qualified_table as fully_qualified_table
    ))
  );
