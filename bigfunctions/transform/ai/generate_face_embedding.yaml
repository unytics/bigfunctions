type: function_py
author: Paul Marcombes
description: |
  Detect Face on image and Generate its Embedding
  using [deepface](https://github.com/serengil/deepface).

  - `image_url` is the url of a photo which contains a face. It can be a signed url of a cloud storage object. Then this function works well with [object tables](https://cloud.google.com/bigquery/docs/object-table-introduction#signed_urls).
  - `output` is the output of `DeepFace.represent` method. It is like:

  ```
  {
    embedding: [...],      # A 4096 float vector
    facial_areal: {...},   # Coordinated of detected face
    face_confidence: 1.0,  # Confidence score for face detection
  }
  ```
arguments:
  - name: image_url
    type: string
output:
  name: output
  type: json
examples:
  - description: "Public test image from deepface"
    arguments:
      - "'https://raw.githubusercontent.com/serengil/deepface/master/tests/dataset/img1.jpg'"
    output: |
      {
        embedding: [...],
        facial_areal: {...},
        face_confidence: 1.0,
      }
dockerfile:
  apt_packages: libgl1-mesa-glx libglib2.0-0
  additional_commands: |
    RUN python -c "import deepface.DeepFace; import deepface.detectors.DetectorWrapper; deepface.DeepFace.build_model('Facenet512'); deepface.detectors.DetectorWrapper.build_model('retinaface')"
code: |
  import tempfile
  import urllib.request
  from deepface import DeepFace

  with tempfile.TemporaryDirectory() as folder:
    filename = f'{folder}/img'
    urllib.request.urlretrieve(image_url, filename)
    try:
      faces = DeepFace.represent(
        img_path=filename,
        detector_backend="retinaface",
        model_name="Facenet512",
      )
    except:
      return {'face_confidence': 0.}
    sorted_faces = sorted(faces, key=lambda face: face['face_confidence'])
    best_face = sorted_faces[-1]
    return best_face
requirements: |
  deepface
  tf-keras
max_batching_rows: 1
cloud_run:
  memory: 2048Mi
  concurrency: 1
