type: procedure
author: Paul Marcombes
description: |
  Create a Materialized view of a table with `json_column` flattened
  .

  It creates a materialized view with:

  - query given by [sql_to_flatten_json_column function](sql_to_flatten_json_column.md)
  - same partition as `fully_qualified_table`

arguments:
  - name: fully_qualified_table
    type: string
  - name: fully_qualified_materialized_view
    type: string
  - name: json_column
    type: string
examples:
  - description:
    arguments:
      - "'your_project.your_dataset.your_table'"
      - "'your_project.your_dataset.your_materialized_view'"
      - "'data'"
code: |
  declare flattening_sql, partition_column string;
  set fully_qualified_table = replace(fully_qualified_table, '`', '');
  set fully_qualified_materialized_view = replace(fully_qualified_materialized_view, '`', '');


  # ---------------------------------------------------
  # Get SQL to flatten json column
  # ---------------------------------------------------
  execute immediate format(
    '''
    select {BIGFUNCTIONS_DATASET}.sql_to_flatten_json_column(`%s`, '%s.%s')
    from `%s`
    ''',
    json_column, fully_qualified_table, json_column, fully_qualified_table
  ) into flattening_sql;


  # ---------------------------------------------------
  # Get Partition Column
  # ---------------------------------------------------
  execute immediate {BIGFUNCTIONS_DATASET}.render_template(
    '''
    {%- set table_parts = fully_qualified_table.split('.') %}
    {%- if table_parts | length == 3 %}
      {%- set project = table_parts[0] %}
      {%- set dataset = table_parts[1] %}
      {%- set table = table_parts[2] %}

      select column_name
      from `{{ project }}.{{ dataset }}.INFORMATION_SCHEMA.COLUMNS`
      where table_name = '{{ table }}' and is_partitioning_column = 'YES'

    {%- else %}
      select error('`fully_qualified_table` argument should be fully qualified such as PROJECT.DATASET.TABLE')
    {%- endif -%}
    ''',
    json_object(
      'fully_qualified_table', fully_qualified_table
    )
  ) into partition_column;


  # ---------------------------------------------------
  # Create Materialized View
  # ---------------------------------------------------
  execute immediate {BIGFUNCTIONS_DATASET}.render_template(
    '''
    create materialized view `{{ fully_qualified_materialized_view }}`
    {% if partition_column %}partition by date({{ partition_column }}){% endif %}
    as
    {{ flattening_sql | safe }}

    ''',
    json_object(
      'fully_qualified_materialized_view', fully_qualified_materialized_view,
      'flattening_sql', flattening_sql,
      'partition_column', partition_column
    )
  );
