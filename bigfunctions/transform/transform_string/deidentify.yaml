type: function_py
author: Shivam Singh
description: |
  Masks sensitive information of type `info_types` in `text`
  using [Cloud Data Loss Prevention](https://cloud.google.com/dlp)

  | Param  | Possible values (can be one or any combination of the following values separated by comma)  |
  |---|---|
  | `info_types` | `ADVERTISING_ID`, `AGE`, `AUTH_TOKEN`, `AWS_CREDENTIALS`, `AZURE_AUTH_TOKEN`, `BASIC_AUTH_HEADER`, `CREDIT_CARD_NUMBER`, `CREDIT_CARD_TRACK_NUMBER`, `DATE`, `DATE_OF_BIRTH`, `DOMAIN_NAME`, `EMAIL_ADDRESS`, `ENCRYPTION_KEY`, `ETHNIC_GROUP`, `FEMALE_NAME`, `FIRST_NAME`, `GCP_API_KEY`, `GCP_CREDENTIALS`, `GENDER`, `GENERIC_ID`, `HTTP_COOKIE`, `HTTP_COOKIE`, `IBAN_CODE`, `ICCID_NUMBER`, `ICD10_CODE`, `ICD9_CODE`, `IMEI_HARDWARE_ID`, `IMSI_ID`, `IP_ADDRESS`, `JSON_WEB_TOKEN`, `LAST_NAME`, `LOCATION`, `LOCATION_COORDINATES`, `MAC_ADDRESS`, `MAC_ADDRESS_LOCAL`, `MALE_NAME`, `MARITAL_STATUS`, `MEDICAL_RECORD_NUMBER`, `MEDICAL_TERM`, `OAUTH_CLIENT_SECRET`, `ORGANIZATION_NAME`, `PASSPORT`, `PASSWORD`, `PERSON_NAME`, `PHONE_NUMBER`, `SSL_CERTIFICATE`, `STORAGE_SIGNED_POLICY_DOCUMENT`, `STORAGE_SIGNED_URL`, `STREET_ADDRESS`, `SWIFT_CODE`, `TIME`, `URL`, `VAT_NUMBER`, `VEHICLE_IDENTIFICATION_NUMBER`, `WEAK_PASSWORD_HASH`, `XSRF_TOKEN` |
arguments:
  - name: text
    type: string
  - name: info_types
    type: string
output:
  name: masked_info
  type: string
examples:
  - description: "String with email in it."
    arguments:
      - '"My email is shivam@google.co.in"'
      - '"PHONE_NUMBER, EMAIL_ADDRESS"'
    output: 'My email is [EMAIL_ADDRESS]'
  - description: "String with phone number in it."
    arguments:
      - '"My phone number is 0123456789"'
      - '"PHONE_NUMBER, email_address"'
    output: 'My phone number is [PHONE_NUMBER]'
  - description: "If `info_types` is `null` or empty, all built-in info types may be used"
    arguments:
      - '"My email is shivam@google.co.in"'
      - 'null'
    output: 'My email is [PERSON_NAME][EMAIL_ADDRESS]'
code: |
  import google.cloud.dlp
  import json

  if not text or not text.strip():
      return text

  built_in_info_types = [
      'ADVERTISING_ID', 'AGE', 'AUTH_TOKEN', 'AWS_CREDENTIALS',
      'AZURE_AUTH_TOKEN', 'BASIC_AUTH_HEADER', 'CREDIT_CARD_NUMBER',
      'CREDIT_CARD_TRACK_NUMBER', 'DATE', 'DATE_OF_BIRTH',
      'DOMAIN_NAME', 'EMAIL_ADDRESS', 'ENCRYPTION_KEY', 'ETHNIC_GROUP',
      'FEMALE_NAME', 'FIRST_NAME', 'GCP_API_KEY', 'GCP_CREDENTIALS',
      'GENDER', 'GENERIC_ID', 'HTTP_COOKIE', 'HTTP_COOKIE',
      'IBAN_CODE', 'ICCID_NUMBER', 'ICD10_CODE', 'ICD9_CODE',
      'IMEI_HARDWARE_ID', 'IMSI_ID', 'IP_ADDRESS', 'JSON_WEB_TOKEN',
      'LAST_NAME', 'LOCATION', 'LOCATION_COORDINATES', 'MAC_ADDRESS',
      'MAC_ADDRESS_LOCAL', 'MALE_NAME', 'MARITAL_STATUS',
      'MEDICAL_RECORD_NUMBER', 'MEDICAL_TERM', 'OAUTH_CLIENT_SECRET',
      'ORGANIZATION_NAME', 'PASSPORT', 'PASSWORD', 'PERSON_NAME',
      'PHONE_NUMBER', 'SSL_CERTIFICATE', 'STORAGE_SIGNED_POLICY_DOCUMENT',
      'STORAGE_SIGNED_URL', 'STREET_ADDRESS', 'SWIFT_CODE', 'TIME',
      'URL', 'VAT_NUMBER', 'VEHICLE_IDENTIFICATION_NUMBER',
      'WEAK_PASSWORD_HASH', 'XSRF_TOKEN'
  ]

  info_types = info_types or ''
  info_types = [info_type.strip().upper() for info_type in info_types.split(',') if info_type]
  for info_type in info_types:
      if info_type not in built_in_info_types:
          return f'ERROR: given info_type "{info_type}" does not belong to possible values which are: {built_in_info_types}'

  dlp = google.cloud.dlp_v2.DlpServiceClient()
  response = dlp.deidentify_content(
      request={
          "item": {"value": text},
          "parent": f"projects/{PROJECT}",
          "inspect_config": {
              "info_types": [{"name": info_type} for info_type in info_types]
          },
          "deidentify_config": {
              "info_type_transformations": {
                  "transformations": [
                      {"primitive_transformation": {"replace_with_info_type_config": {}}}
                  ]
              }
          },
      }
  )
  return response.item.value
requirements: |
  google-cloud-dlp
quotas:
  max_rows_per_user_per_day: 10000
