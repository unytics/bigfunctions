type: function_js
author: Paul Marcombes
description: Render template with context using nunjucks.js templating library
arguments:
  - name: template
    type: string
  - name: context
    type: json
output:
  name: rendered_content
  type: string
examples:
  - description: ""
    arguments:
      - "'Hello {{ user }}'"
      - "json '{\"user\": \"James\"}'"
    output: Hello James
code: |
  var env = nunjucks.configure();

  function chart(data, chart_type, kwargs) {
    kwargs = kwargs || {};
    const uid = (Math.random() + 1).toString(36).substring(7);
    const x = data.map(v => v.x);
    const y = data.map(v => v.y);
    return env.filters.safe(`
      <div><canvas id="${uid}"></canvas></div>
      <script>
        (function() {
          new Chart(
            document.getElementById('${uid}'),
            {
                type: '${chart_type}',
                data: {
                  labels: ${JSON.stringify(x)},
                  datasets: [{
                    label: '${kwargs.ylabel}',
                    data: ${JSON.stringify(y)},
                    borderColor: 'rgb(64, 81, 181)',
                    backgroundColor: 'rgb(64, 81, 181)',
                  }]
                },
                options: {}
              }
          );
        })();
      </script>
    `);
  }

  env.addGlobal('chart', chart);

  env.addFilter('add_thousands_separators_to_integers', function(x) {
      if (Number.isInteger(x)) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      }
      return x;
  });

  env.addFilter('as_percentage', function(x) {
      if (x == 0) {
        return '0 %';
      }
      if (x < 0.001) {
        return '< 0.1 %';
      }
      if (x > 0.01) {
        return Math.round(x * 100).toString() + ' %';
      }
      return (0.1 * Math.round(x * 1000)).toString() + ' %';
  });

  env.addFilter('size_bytes_pretty', function(x) {
      if (x > 1e12) {
        return Math.round(x / (1024*1024*1024*1024)).toString() + ' TB';
      }
      if (x > 1e9) {
        return Math.round(x / (1024*1024*1024)).toString() + ' GB';
      }
      if (x > 1e6) {
        return Math.round(x / (1024*1024)).toString() + ' MB';
      }
      return Math.round(x / (1024)).toString() + ' KB';
  });

  env.addFilter('table_or_view_or_query', function(x) {
      if (x && x.toLowerCase().match(/^\s*select\s|^\s*with\s/g)) {
        return '(\n' + x + '\n)';
      }
      return x;
  });

  env.addFilter('to_json', function(table_or_view_or_query, limit) {
      if (!table_or_view_or_query) {
        return table_or_view_or_query;
      }

      if (limit) {
        limit = `limit ${limit}`;
      }
      else {
        limit = '';
      }

      if (table_or_view_or_query.toLowerCase().match(/^\s*select\s|^\s*with\s/g)) {
        table_or_view_or_query = '(\n' + table_or_view_or_query + '\n)';
      }

      return `
        select
          to_json(array_agg(struct(_res)._res ${limit})) as data
        from ${table_or_view_or_query} _res
      `
  });

  return env.renderString(template, context);
npm_packages:
  - nunjucks@3.2.4
