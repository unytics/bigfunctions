type: procedure
author: Ali Izadi
description: |
  Create views to help querying GA4 Data
  .

  This function creates table functions in `destination_dataset` to help querying GA4 data contained in `ga4_dataset` (like `your-project.analytics_123456789`).

  > Table functions are like views but take parameters as input.
  > Here, they take `start_date` and `end_date` parameters
  > to restrict the analysis period and be more efficient

  Each created table function is the copy of a query from [Bigquery-GA4-Queries](https://github.com/aliasoblomov/Bigquery-GA4-Queries)
  GitHub repo created by [Ali Izadi](https://www.linkedin.com/in/ali-iz/).

  For example, `event_scope__flatten_events` table function will be created in `destination_dataset`.
  You can then get the flatten events between '2024-11-01' and '2024-12-01' with:

  ```sql
  select *
  from `destination_dataset`.event_scope__flatten_events('2024-11-01', '2024-12-01')
  ```

  You can get details on each created table function by reading the README of [Bigquery-GA4-Queries](https://github.com/aliasoblomov/Bigquery-GA4-Queries) repo.
  If you find these queries useful, please add a star to the repo to show your support.

  > Queries from `BigQuery Administration`, `Extras` folders
  > are ignored as they go beyond GA4
arguments:
  - name: ga4_dataset
    type: string
  - name: destination_dataset
    type: string
examples:
  - description: ""
    arguments:
      - "'your-project.your_ga4_dataset'"
      - "'your-project.your_destination_dataset'"
code: | #sql
  declare do_user_tables_exist bool;

  execute immediate format(
    'select exists(select table_id from `%s`.__TABLES__ where starts_with(table_id,  "users_"))',
    ga4_dataset
  )
  into do_user_tables_exist;


  create or replace temp table code as

  with

  filepaths as (

    select
      lax_string(file.path) as path,
    from unnest(
      json_query_array(
        {BIGFUNCTIONS_DATASET}.get_json('https://api.github.com/repos/aliasoblomov/Bigquery-GA4-Queries/git/trees/main?recursive=true', null),
        '$.tree'
      )
    ) as file
    where
      ends_with(lax_string(file.path), '.sql')
      and not starts_with(lax_string(file.path), 'BigQuery Administration')
      and not starts_with(lax_string(file.path), 'Extras')

  ),


  files_content as (

    select
      regexp_replace(replace(replace(replace(
        lower(path),
        '/', '__'),
        ' ', '_'),
        '.sql', ''),
        r'[\(\)\&]', ''
      ) as name,
      {BIGFUNCTIONS_DATASET}.get(
        format(
        'https://raw.githubusercontent.com/aliasoblomov/Bigquery-GA4-Queries/refs/heads/main/%s',
        replace(path, ' ', '%20')
        ),
        null
      ) as content,
    from filepaths

  )

  select
    name,
    (
      format(
        'create or replace table function `%s`.%s(start_date string, end_date string) as',
        destination_dataset, name
      ) ||
      replace(replace(replace(replace(regexp_replace(regexp_replace(
        '\n' || content,
      '^DECLARE.*', ''),
      '\nDECLARE.*', ''),
        'project.dataset', ga4_dataset),
        'your-project-id.your-dataset-id', ga4_dataset),
        'your-project-id.dataset_name', ga4_dataset),
        'your-project-id.analytics_1234567890', ga4_dataset
      )
    ) as code
  from files_content
  where
    not contains_substr(content, '.users_*')
    or do_user_tables_exist
  order by name
  ;


  for record in (select * from code) do
    begin
      execute immediate record.code;
    exception when error then
    end;
  end for;
