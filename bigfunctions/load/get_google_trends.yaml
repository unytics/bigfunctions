type: function_py
author: Paul Marcombes
hide_in_doc: true
description: |
  GET [Google Trends](https://trends.google.com/) data

  **Params**

  | Param          | Description  |
  |----------------|---|
  | `destination_table`| Fully qualified destination table (PROJECT.DATASET.TABLE) |
  | `keywords`| Array of one to five search terms (a search term can be an expression) |
  | `start_month`| First month (`YYYY-MM`) to load data from |
  | `geo`| Two letter country abbreviation. For example United States is 'US'. Defaults to World. More detail available for States/Provinces by specifying additional abbreviations. For example: Alabama would be 'US-AL'. For example: England would be 'GB-ENG' |
  | `category`| Category to narrow results. Find available categories by inspecting the url when manually using Google Trends. The category starts after cat= and ends before the next & or view [this wiki page](https://github.com/pat310/google-trends-api/wiki/Google-Trends-Categories) containing all available categories. For example: "https://www.google.com/trends/explore#q=pizza&cat=71". '71' is the category. Defaults to no category |
  | `gprop`| What Google property to filter to. Example 'images'. Defaults to web searches. Can be images, news, youtube or froogle (for Google Shopping results) |

  !!! warning "This function may return `[]`"

      Google Trends put some quotas to request their API.
      For this reason, this function may sometimes return `[]`.
      It is advised to call it several times a day if you want to make sure to retrieve the data.
arguments:
  - name: keywords
    type: string
  - name: timeframe
    type: string
  - name: geo
    type: string
  - name: category
    type: int64
  - name: gprop
    type: string
output:
  name: trends
  type: json
examples:
  - description: "GET trends for chaise and fauteuil"
    arguments:
      - "'chaise, fauteuil'"
      - "11"
      - "'2025-01-01 2025-01-07'"
      - "'FR'"
      - "null"
    output: |
      [
        {"date":"2019-12-01T00:00:00", "keyword": "chaise", "value": 58},
        {"date":"2019-12-01T00:00:00", "keyword": "fauteuil", "value": 2},
        {"date":"2019-12-08T00:00:00", "keyword": "chaise", "value": 57},
        {"date":"2019-12-08T00:00:00", "keyword": "fauteuil", "value": 3},
        ...
      ]
init_code: | #python
  import random
  import json
  import urllib.parse
  from curl_cffi import requests
  import time


  def build_payload(keywords, timeframe, geo, category, property):
      token_payload = {
          'hl': 'en-US',
          'tz': '0',
          'req': {
              'comparisonItem': [{'keyword': keyword, 'time': timeframe, 'geo': geo} for keyword in keywords],
              'category': category,
              'property': property,
          }
      }
      token_payload['req'] = json.dumps(token_payload['req'])
      return token_payload


  def get_google_cookies(browser):
      with requests.Session() as session:
          session.get("https://www.google.com", impersonate=browser)
          return session.cookies


  def get_widgets(keywords, timeframe, geo, category, property, session, browser, cookies):
      time.sleep(2)
      token_payload = build_payload(keywords, timeframe, geo, category, property)
      url = 'https://trends.google.com/trends/api/explore'
      params = urllib.parse.urlencode(token_payload)
      full_url = f"{url}?{params}"
      response = session.get(full_url, impersonate=browser, cookies=cookies)
      if response.status_code == 200:
          content = response.text[4:]
          try:
              data = json.loads(content)
              widgets = {widget['id']: widget for widget in data['widgets']}
              return widgets
          except json.JSONDecodeError:
              print(f"Failed to decode JSON while fetching token, retrying")
      else:
          print(f"Error {response.status_code} while fetching token, retrying")


  def get_trends(widgets, session, browser, cookies):
      time.sleep(5)
      token = widgets['TIMESERIES']['token']
      req_string = json.dumps(widgets['TIMESERIES']['request'], separators=(',', ':'))
      encoded_req = urllib.parse.quote(req_string, safe=':,+')
      url = f"https://trends.google.com/trends/api/widgetdata/multiline?hl=en-US&tz=0&req={encoded_req}&token={token}"
      response = session.get(url, impersonate=browser, cookies=cookies)
      if response.status_code == 200:
          content = response.text[5:]
          try:
              return json.loads(content)
          except json.JSONDecodeError:
              print(f"Failed to decode JSON while fetching trends data, retrying")
      else:
          print(f"Error {response.status_code} while fetching trends data, retrying")


  def format_trends(raw_data, keywords):
      data = []
      for entry in raw_data['default']['timelineData']:
          timestamp = int(entry['time'])
          timestamp = datetime.datetime.utcfromtimestamp(timestamp).isoformat()
          for keyword, value in zip(keywords, entry['value']):
              data.append({
                  'timestamp': timestamp,
                  'keyword': keyword,
                  'value': value,
              })
      return data


  def fetch_trends_data(keywords, timeframe='now 7-d', geo='US', category=0, property='', max_retries_per_browser=5):
      browsers = ['chrome99', 'chrome100', 'chrome101', 'chrome104', 'chrome107', 'chrome110', 'chrome116', 'chrome119', 'chrome120', 'chrome123', 'chrome124', 'chrome99_android', 'edge99', 'edge101', 'safari15_3', 'safari15_5', 'safari17_0', 'safari17_2_ios']
      random.shuffle(browsers)
      browsers = browsers[:5]
      for browser in browsers:
          print(f"Starting with browser version to {browser}")
          cookies = get_google_cookies(browser)

          with requests.Session() as session:
              # phase 1: token
              for retry in range(max_retries_per_browser):
                  print(f'Get Widgets {retry + 1}/{max_retries_per_browser}')
                  widgets = get_widgets(keywords, timeframe, geo, category, property, session, browser, cookies)
                  if widgets:
                      break
              else:
                  print(f"Exceeded maximum retry attempts ({max_retries_per_browser}) while fetching token.")
                  time.sleep(5)
                  continue

              # phase 2: trends data
              for retry in range(max_retries_per_browser):
                  print(f'Get Trends {retry + 1}/{max_retries_per_browser}')
                  raw_data = get_trends(widgets, session, browser, cookies)
                  if raw_data:
                      trends_data = format_trends(raw_data, keywords)
                      return trends_data
              else:
                  print(f"Exceeded maximum retry attempts ({max_retries_per_browser}) while fetching trends data.")
                  time.sleep(5)

      print(f"FAILED with all browsers. Exiting...")
      return []

code: | #python
  if not keywords:
    return []
  keywords = [kw.strip() for kw in keywords.split(',')]
  gprop = gprop or ''
  timeframe = timeframe or 'today 5-y'
  return fetch_trends_data(keywords, timeframe, geo, category, gprop)
requirements: |
  curl_cffi
max_batching_rows: 1
cloud_run:
  concurrency: 1
