type: procedure
author: Paul Marcombes
description: |
  Load daily [Google Trends](https://trends.google.com/)
  (search volume) of `keywords` into `destination_table`.

  ??? note "How it works"

      This function will:

      - download daily search volume for each `keyword` for each `month` which are not already in destination table. Search volumes of the current month are downloaded anyway even if already in destination table. The daily search volumes are normalized between `[0, 100]` for each `(keyword, month)`.
      - download monthly search volume at once for all keywords altogether during the whole period. The downloaded volumes are then comparable for all keywords and the whole period.
      - globally normalize the daily search volumes using the monthly search volumes to make them comparable.

      (This function calls [`get_google_trends`](get_google_trends.md) function under the hood)


  **Destination Table Schema**

  | Column         | Description  |
  |----------------|---|
  | `date`| day of the trend |
  | `keyword`| keyword |
  | `search_volume`| search volume (normalized) |
  | `_raw_search_volume`| search volume at load time (before global normalization) |
  | `_raw_month_search_volume`| search month volume at load time (before global normalization) |
  | `_load_date`| date when the data was downloaded from google trends |


  **Params**

  | Param          | Description  |
  |----------------|---|
  | `destination_table`| Fully qualified destination table (PROJECT.DATASET.TABLE) |
  | `keywords`| Array of one to five search terms (a search term can be an expression) |
  | `start_month`| First month (`YYYY-MM`) to load data from |
  | `geo`| Two letter country abbreviation. For example United States is 'US'. Defaults to World. More detail available for States/Provinces by specifying additional abbreviations. For example: Alabama would be 'US-AL'. For example: England would be 'GB-ENG' |
  | `category`| Category to narrow results. Find available categories by inspecting the url when manually using Google Trends. The category starts after cat= and ends before the next & or view [this wiki page](https://github.com/pat310/google-trends-api/wiki/Google-Trends-Categories) containing all available categories. For example: "https://www.google.com/trends/explore#q=pizza&cat=71". '71' is the category. Defaults to no category |
  | `gprop`| What Google property to filter to. Example 'images'. Defaults to web searches. Can be images, news, youtube or froogle (for Google Shopping results) |


  !!! warning "You may need call this function several times a day"

      Google Trends put some quotas to request their API.
      For this reason, this function may not return data for all months in one call.
      But if you schedule this function to be called several times a day, you will certainly have all the data.
arguments:
  - name: destination_table
    type: string
  - name: keywords
    type: array<string>
  - name: start_month
    type: string
  - name: geo
    type: string
  - name: category
    type: int64
  - name: gprop
    type: string
output:
  name: result
  type: string
examples:
  - description: |
      Download daily google trends comparing bigquery and snowflake

      ![snowflake vs bigquery google trends comparison](load_google_trends.png){ width=600 }
    arguments:
      - "'your_project.dataset.table'"
      - "['bigquery', 'snowflake']"
      - "'2024-01'"
      - "null"
      - "null"
      - "null"
code: | #sql
  declare query string;
  declare monthly_trends json;

  assert array_length(split(destination_table, '.')) = 3 as '`destination_table` must be like PROJECT.DATASET.TABLE';
  assert array_length(keywords) <= 5 as 'you must have 5 keywords or less';


  select 'Create temp table with monthly volumes from all time';
  create temp table monthly_trends as
  select
    date(string(trend.timestamp)) as date,
    string(trend.keyword) as keyword,
    int64(trend.value) as month_search_volume,
  from unnest(json_query_array(
    (
      select
        {BIGFUNCTIONS_DATASET}.get_google_trends(
          array_to_string(keywords, ','),
          'all',
          geo,
          category,
          gprop
        )
    ), '$'
  )) trend;


  if (select count(*) from monthly_trends) = 0
  then
    select 'could not load monthly trends (please retry later). Exiting...';
    return;
  end if;


  select 'Create destination table if not exists';
  set query = format(
    '''
    create table if not exists `%s`
    (
      date date options(description="day of the trend"),
      keyword string options(description="keyword"),
      search_volume float64 options(description="search volume (normalized)"),
      _raw_search_volume int64 options(description="search volume at load time (before normalization)"),
      _raw_month_search_volume int64 options(description="search month volume at load time (before normalization)"),
      _load_date date options(description="date when the data was downloaded from google trends"),
    )
    options(
    description="google trends downloaded using bigfunctions.eu.load_google_trends. See https://unytics.io/bigfunctions/bigfunctions/load_google_trends/ for details"
    )
    ''',
    destination_table
  );
  select query;
  execute immediate query;


  select 'Create temp table listing missing (date, keyword) (+ current month)';
  set query = format(
    '''
    create temp table missing_dates_keywords as
    select
      date,
      keyword,
    from
    unnest(%s) as keyword,
    unnest(generate_date_array(date('%s' || '-01'), current_date - 2)) as date
    left join `%s` destination using(date, keyword)
    where
      destination._raw_search_volume is null
      or format_date('%%Y-%%m', date) = format_date('%%Y-%%m', current_date)
    ;
    ''',
    to_json_string(keywords), start_month, destination_table
  );
  select query;
  execute immediate query;


  select 'Download daily trends for missing (date, keyword)';
  create temp table new_daily_trends_by_month as
  select
    keyword,
    format_date( '%Y-%m', date) as month,
    {BIGFUNCTIONS_DATASET}.get_google_trends(
      keyword,
      min(date) || ' ' || max(date),
      geo,
      category,
      gprop
    ) as daily_trend,
  from missing_dates_keywords
  group by keyword, format_date('%Y-%m', date);


  select 'Format to destination format';
  create temp table new_daily_trends as
  select
    date(string(trend.timestamp)) as date,
    keyword,
    int64(trend.value) as _raw_search_volume,
    current_date as _load_date,
  from new_daily_trends_by_month,
  unnest(json_query_array(daily_trend, '$')) as trend;


  select 'Merge into destination';
  set query = format(
    '''
    merge `%s` destination
    using new_daily_trends
    on destination.keyword = new_daily_trends.keyword and destination.date = new_daily_trends.date
    when matched then
      update set
        _raw_search_volume = new_daily_trends._raw_search_volume,
        _load_date = new_daily_trends._load_date,
        search_volume = null
    when not matched then
      insert (date, keyword, _raw_search_volume, _load_date)
      values(date, keyword, _raw_search_volume, _load_date)
    ''',
    destination_table
  );
  select query;
  execute immediate query;


  select 'Update monthly raw search_volumes from daily raw search_volumes';
  set query = format(
    '''
    update `%s` destination
    set _raw_month_search_volume = (
      select sum(d._raw_search_volume)
      from `%s` d
      where
        d.keyword = destination.keyword and
        format_date('%%Y-%%m', d.date) = format_date('%%Y-%%m', destination.date)
    )
    where true
    ''',
    destination_table, destination_table
  );
  select query;
  execute immediate query;


  select 'Normalize data at destination using monthly volumes';
  set query = format(
    '''
    update `%s` destination
    set search_volume = (
      destination._raw_search_volume *
      safe_divide(monthly_trends.month_search_volume, destination._raw_month_search_volume) *
      if(
        format_date('%%Y-%%m', destination.date) = format_date('%%Y-%%m', current_date),
        1./30 * date_diff(current_date, date_trunc(current_date, month), day),
        1
      )
    )
    from monthly_trends
    where
      destination.keyword = monthly_trends.keyword and
      format_date('%%Y-%%m', destination.date) = format_date('%%Y-%%m', monthly_trends.date)
    ''',
    destination_table
  );
  select query;
  execute immediate query;
