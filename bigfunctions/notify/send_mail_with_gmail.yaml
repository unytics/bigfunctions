type: function_py
author: Paul Marcombes
description: |
  Sends an email using your gmail account

  | Param         | Possible values  |
  |---------------|------------------|
  | `gmail_email` | The email for your gmail account   |
  | `gmail_app_password` | An App Password of your gmail account.  1.[Get an App Password](https://myaccount.google.com/apppasswords). ‚ö†Ô∏è 2. Encrypt the password wit the button below before copying it to your queries!  |
  | `to`          | One or multiple comma separated emails.<br>For instance `contact@unytics.io` or `contact@unytics.io, paul.marcombes@unytics.io`   |
  | `subject`     | Email subject |
  | `content`     | Email content   |
  | `attachments`  | json like `{filename: content}` with `content` a plain text or base64 encoded bytes (for excel, pdf, image, etc)  |
arguments:
  - name: gmail_email
    type: string
  - name: gmail_app_password
    type: string
    contains_secret: true
  - name: to
    type: string
  - name: subject
    type: string
  - name: content
    type: string
  - name: attachments
    type: json
output:
  name: success
  type: BOOL
examples:
  - description: "Send email without file attached"
    arguments:
      - "'paul.marcombes@unytics.io'"
      - "'ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)'"
      - "'you@example.com'"
      - "'I love BigFunctions'"
      - "'Hey Paul, could you deploy more BigFunctions üôè?'"
      - "null"
    output: "true"
  - description: "Send email with plain text file attached"
    arguments:
      - "'paul.marcombes@unytics.io'"
      - "'ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)'"
      - "'you@example.com'"
      - "'I love BigFunctions'"
      - "'Hey Paul, could you deploy more BigFunctions üôè?'"
      - "json_object('report.csv', 'col1,col2\\nval1,val2\\nval3,val4')"
    output: "true"
  - description: "Send email with excel file attached"
    arguments:
      - "'paul.marcombes@unytics.io'"
      - "'ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd...)'"
      - "'you@example.com'"
      - "'I love BigFunctions'"
      - "'Hey Paul, could you deploy more BigFunctions üôè?'"
      - |
        json_object(
          'report.xlsx',
          (select {BIGFUNCTIONS_DATASET}.json2excel(json '[{"col1": "val1", "col2": "val2"}, {"col1": "val3", "col2": "val4"}]'))
        )
    output: "true"
init_code: | #python
  import base64
  import mimetypes
  import re
  import smtplib
  from email.mime.application import MIMEApplication
  from email.mime.multipart import MIMEMultipart
  from email.mime.text import MIMEText
  from email.utils import COMMASPACE
  from email.mime.base import MIMEBase
  from email import encoders

  SMTP_SERVER = 'smtp.gmail.com'
  SMTP_PORT = 587

  def is_string_base64_encoded(string):
    try:
      return base64.b64encode(base64.b64decode(string)) == string.encode()
    except:
      return False


  def check_emails(to):
    to = to.replace(';', ',')
    emails = [email.strip() for email in to.split(',')]
    email_regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'
    for email in emails:
      assert re.fullmatch(email_regex, email), f'email `{email}` is not a valid email'
    return emails


  def attach_files(msg, attachments):
    attachments = attachments or {}
    for filename, content in attachments.items():
      if is_string_base64_encoded(content):
        attachment_type = mimetypes.guess_type(filename)[0]
        attachment_type = attachment_type or 'application/octet-stream'
        mime_type, mime_subtype = attachment_type.split('/')
        part = MIMEBase(mime_type, mime_subtype)
        content = base64.b64decode(content)
        part.set_payload(content)
        encoders.encode_base64(part)
      else:
        part = MIMEApplication(content.encode(), Name=filename)
      part['Content-Disposition'] = f'attachment; filename="{filename}"'
      msg.attach(part)


  def build_message(gmail_email, to, subject, content, attachments):
    subject = subject or ''
    content = content or ''
    to = check_emails(to)
    msg = MIMEMultipart()
    msg['From'] = gmail_email
    msg['To'] = ','.join(to)
    msg['Reply-To'] = gmail_email
    msg['Return - Path'] = gmail_email
    msg['Subject'] = subject
    msg.attach(MIMEText(content, 'html'))
    attach_files(msg, attachments)
    return msg


  def send_mail(gmail_email, gmail_app_password, msg):
    smtpObj = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
    smtpObj.ehlo()
    smtpObj.starttls()
    smtpObj.login(gmail_email, gmail_app_password)
    smtpObj.sendmail(gmail_email, msg['To'].split(","), msg.as_string())
    smtpObj.quit()

code: | #python
  if not to:
    return True
  msg = build_message(gmail_email, to, subject, content, attachments)
  send_mail(gmail_email, gmail_app_password, msg)
  return True
quotas:
  max_rows_per_query: 100
