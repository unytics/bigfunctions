type: function_py
author: Paul Marcombes with Axel Thevenot
description: |
  Run any `python_code`.

  !!! warning "For security reasons (sandboxing):"

      - this function is rather slow (a new python environement is created for each query). You may prefer to create a dedicated python function for your use case. You can suggest a new bigfunction [here](https://github.com/unytics/bigfunctions/issues/new?assignees=&labels=new-bigfunction&projects=&template=0_new_bigfunction.yaml&title=%5Bnew%5D%3A+%60function_name%28argument1%2C+argument2%29%60) if you want someone to create your function.
      - your python code won't have access to internet
      - not all python packages can be installed


  | Param          | Possible values  |
  |----------------|---|
  | `python_code`  | Arbitrary python code (indented with 4 spaces).  |
  | `requirements` | requirements as you would pass them to `pip install` (separated with space). Keep note that for security reasons, not all python packages can be installed  |
  | `kwargs`       | A json dict of variables. These variables will be defined and usable in your python code. |


  ??? question "How sandboxing is done"

      The provided `python_code` will run in [pyodide](https://pyodide.org/):
      a python distribution which runs in a chrome headless browser.

      This simplifies the implementation of:

      - isolation between function calls,
      - installation of python packages,
      - isolation from the internet.

      For every function call:

      - we init a new browser context,
      - download pyodide,
      - install python packages
      - run the code.
arguments:
  - name: python_code
    type: string
  - name: requirements
    type: string
  - name: kwargs
    type: json
output:
  name: result
  type: string
examples:
  - description: "Basic Example"
    arguments:
      - |

        '''
        return sum(range(10))
        '''
      - |

        null
      - |

        null
    output: '45'
  - description: "Some packages such as `pandas` can be installed and used."
    arguments:
      - |

        '''
        import pandas as pd
        return pd.Series(range(10)).sum()
        '''
      - |

        'pandas'
      - |

        null
    output: '45'
  - description: "Replace `word` passed as a variable by its [stem](https://en.wikipedia.org/wiki/Word_stem)"
    arguments:
      - |

        '''
        import snowballstemmer
        stemmer = snowballstemmer.stemmer('english')
        stems = stemmer.stemWords(text.split())
        return ' '.join(stems)
        '''
      - |

        'snowballstemmer'
      - |

        to_json(struct(
          'care cared and caring' as text
        ))
    output: 'go'
code_process_rows_as_batch: true
code: |
  import tempfile
  import re

  PYODIDE_URL = 'https://cdn.jsdelivr.net/pyodide/v0.23.2/full/pyodide.js'

  def create_browser_context():
      if 'browser' not in CACHE:
          from playwright.sync_api import sync_playwright
          CACHE['playwright'] = sync_playwright().start()
          CACHE['browser'] = CACHE['playwright'].chromium.launch()
      return CACHE['browser'].new_context()

  def init_python(page):
      with tempfile.TemporaryDirectory() as folder:
          filename = f'{folder}/index.html'
          html = f'<html><head><script src="{PYODIDE_URL}"></script></head><body></body></html>'
          open(filename, 'w', encoding='utf-8').write(html)
          page.goto(f'file:///{filename}')
          page.evaluate('async () => { window.pyodide = await loadPyodide(); }')

  def install_python_packages(page, requirements):
      if not requirements:
          return
      bad_requirements = re.findall(r'[^a-zA-Z\d\s=\.-]', ''.join(requirements))
      assert not bad_requirements, 'Bad `requirements` argument format! Expecting `requirements` to be like `pandas nltk==3.8.1` (multiple requirements separated with space)'
      try:
          page.evaluate(f'''async () => {{
              await pyodide.loadPackage("micropip");
              const micropip = pyodide.pyimport("micropip");
              await micropip.install({list(requirements)});
          }}''')
      except Exception as e:
          error_message = str(e)
          prefix_to_remove = 'ValueError: '
          suffix_to_remove = 'at new_error (https://cdn.jsdelivr.net'
          if prefix_to_remove in error_message:
              error_message = error_message[error_message.rfind(prefix_to_remove) + len(prefix_to_remove):]
          error_message = error_message[:error_message.find(suffix_to_remove)]
          raise Exception(error_message.strip())


  def run_python_code(page, python_code, kwargs):
      if not (python_code or '').strip():
          return

      kwargs = kwargs or {}
      assert isinstance(kwargs, dict), '`kwargs` argument must be a json dict (NOT a json array) or null'

      # Manage indents
      python_lines = [line for line in python_code.split('\n') if line.strip()]
      indents = [len(line) - len(line.lstrip()) for line in python_lines]
      assert min(indents) >= indents[0], "python indentation error: there should be no line in your code with an indent inferior to the indent of the first line."
      python_code = '\n'.join(['    ' + line[indents[0]:] for line in python_lines])

      variables_assignment = f"    {''.join([k + ', ' for k in kwargs.keys()])} = {list(kwargs.values())}" if kwargs else ''
      python_code = variables_assignment + '\n' + python_code
      python_code = python_code.replace('`', 'BIGFUNCTION_BACKTICK')

      javascript = '\n'.join([
          'async () =>  {',
              'let code = String.raw`',

              'def compute():',
              python_code,

              'result = compute()',
              'str(result)',

              '`;',
              r"code = code.replaceAll('BIGFUNCTION_BACKTICK', '`');",
              'return pyodide.runPython(code);',
          '}',
      ])
      print(javascript)

      try:
          result = page.evaluate(javascript)
          return None if result == 'None' else result
      except Exception as e:
          error_message = str(e)
          prefix_to_remove = '"<exec>",'
          suffix_to_remove = 'at new_error (https://cdn.jsdelivr.net'
          if prefix_to_remove in error_message:
              error_message = error_message[error_message.rfind(prefix_to_remove) + len(prefix_to_remove):]
          error_message = error_message[:error_message.find(suffix_to_remove)]
          raise Exception(error_message.strip())


  browser_context = create_browser_context()
  page = browser_context.new_page()
  page.on("console", lambda msg: print('CONSOLE', msg.text))
  init_python(page)

  requirements = set([
      req.strip()
      for row in rows
      for req in (row[1] or '').split(' ')
      if req.strip()
  ])
  install_python_packages(page, requirements)

  browser_context.set_offline(offline=True)

  result = [
      run_python_code(page, python_code, kwargs)
      for python_code, _, kwargs in rows
  ]
  browser_context.close()
  return result
requirements: |
  playwright
dockerfile:
  additional_commands: |
    ENV PLAYWRIGHT_BROWSERS_PATH=/opt/
    RUN playwright install --with-deps chromium
cloud_run:
  memory: 1024Mi
  concurrency: 1
  service_account: no-permission@bigfunctions.iam.gserviceaccount.com
quotas:
  backend: "none"
